<apex:page controller="ExAM.MultipleInspectionAssessmentViewCtrller" standardStylesheets="false" docType="html-5.0" sidebar="false">

    <c:remoetk ></c:remoetk>
    <apex:includeScript value="{!URLFOR($Resource.ExAM__Datepicker,'Datepicker/jquery-1.10.2.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.ExAM__Datepicker,'Datepicker/jquery-ui.min.js')}"/>
    <apex:stylesheet value="{!URLFOR($Resource.ExAM__Datepicker,'Datepicker/jquery-ui.min.css')}"/>
    <apex:includeScript value="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.5/angular.min.js"/>
    <apex:includeScript value="{!$Resource.ExAM__sanitize}"/>
    <!--<apex:includeScript value="{!URLFOR($Resource.UnderscoreAndAngularJS,'UnderscoreAndAngularJS/angular.min.js')}"/>-->
    <apex:includeScript value="{!URLFOR($Resource.ExAM__UnderscoreAndAngularJS,'UnderscoreAndAngularJS/underscore-min.js')}"/>
    <apex:includeScript value="{!$Resource.ExAM__JSSignaturePad}"/>
    <apex:includeScript value="{!$Resource.ExAM__hilightHotspot}"/>
    <html xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
        <head>
            <title>Multiple Inspection Assessment Viewer And Process</title>
            <meta http-equiv="X-UA-Compatible" content="IE=Edge"/>
            <apex:stylesheet value="{!URLFOR($Resource.ExAM__SLDS052, '/assets/styles/salesforce-lightning-design-system-vf.css')}" />   
        </head>
        <script type="text/javascript">
            var __sfdcSessionId = '{!GETSESSIONID()}';
        </script>
        
        <script src="../../soap/ajax/35.0/connection.js" type="text/javascript"></script>
        <script src="../../soap/ajax/35.0/apex.js" type="text/javascript"></script>
        
        <style>
            .slds .slds-tabs--scoped .slds-active > a { background-color: white;color: #0070d2;border-color: #d8dde6; }
            .slds .slds-tabs--scoped .slds-active > a:focus { text-decoration: underline; }
            .vfHelpText { text-decoration: none;position: absolute;display: none;width: 15em;z-index: 12;background-color: #fefdb9;padding: 2px 5px;border: 1px solid orange;text-align: left;white-space: normal;font-weight: normal;color: #000; }
            .dependentQuestDivStyle { margin-left: 4% !important; }
            .imgStyle { height: 25px !important; }
            .slds-radio { display: block !important; }
            .knowledgeArticle, .AnsweredQues { margin-left:2px;text-decoration: none;position: relative;display: none;width: 10em;z-index: 12;background-color: #fefdb9;padding: 2px 5px;border: 1px solid orange;text-align: left;font-weight: normal;color: #000; }
            .slds-table--bordered { border-top: none !important; }
            .selected { border:'1px solid black';background-color:'lightblue'; }
            .deselected { border:none;background-color:''; }
        </style>

        <div ng-app="mainApp">    
            <div ng-controller="mainAppCtrller">
                <body>
                    <apex:pageMessages />
                    <div class="slds slds-col--padded slds-size--1-of-1 slds-medium-size--1-of-1 slds-large-size--1-of-1 slds-p-around--xx-large slds-container--large slds-container--center">
                        <div class="main" role="main">
                            <div class="slds-page-header">
                                <div class="slds-tabs--scoped">
                                    <ul class="slds-tabs--scoped__nav" role="tablist" id="tabId">
                                        <li class="slds-tabs__item slds-text-heading--label slds-active" role="presentation" id="tab1" ng-click="callTabViewChangeFn($event);">
                                            <a href="#" role="tab" tabindex="0" aria-selected="true" aria-controls="tab-scoped-1" title="{!$Label.Primary_Assessment_Type}" style="text-decoration:none;">{!$Label.Primary_Assessment_Type}</a>
                                        </li>
                                        <li class="slds-tabs__item slds-text-heading--label" role="presentation" id="tab2" ng-click="callTabViewChangeFn($event);" ng-show="{!NOT(hideRAMTab1)}">
                                            <a href="#" role="tab" tabindex="-1" aria-selected="false" aria-controls="tab-scoped-2" title="{!$Label.Related_Assessment_Type_1}" style="text-decoration:none;">{!$Label.Related_Assessment_Type_1}</a>
                                        </li>
                                        <li class="slds-tabs__item slds-text-heading--label" role="presentation" id="tab3" ng-click="callTabViewChangeFn($event);" ng-show="{!NOT(hideRAMTab2)}">
                                            <a href="#" role="tab" tabindex="-1" aria-selected="false" aria-controls="tab-scoped-3" title="{!$Label.Related_Assessment_Type_2}" style="text-decoration:none;">{!$Label.Related_Assessment_Type_2}</a>
                                        </li>
                                        <li class="slds-tabs__item slds-text-heading--label" role="presentation" id="tab4" ng-click="callTabViewChangeFn($event);" ng-show="{!NOT(hideRAMTab3)}">
                                            <a href="#" role="tab" tabindex="-1" aria-selected="false" aria-controls="tab-scoped-4" title="{!$Label.Related_Assessment_Type_3}" style="text-decoration:none;">{!$Label.Related_Assessment_Type_3}</a>
                                        </li>
                                        <li class="slds-tabs__item slds-text-heading--label" role="presentation" id="tab5" ng-click="callTabViewChangeFn($event);" ng-show="{!NOT(hideRAMTab4)}">
                                            <a href="#" role="tab" tabindex="-1" aria-selected="false" aria-controls="tab-scoped-5" title="{!$Label.Related_Assessment_Type_4}" style="text-decoration:none;">{!$Label.Related_Assessment_Type_4}</a>
                                        </li>
                                        <li class="slds-tabs__item slds-text-heading--label" role="presentation" id="tab6" ng-click="callTabViewChangeFn($event);" ng-show="{!NOT(hideDataViewerTab)}">
                                            <a href="#" role="tab" tabindex="-1" aria-selected="false" aria-controls="tab-scoped-6" title="Data Viewer" style="text-decoration:none;">Data Viewer</a>
                                        </li>
                                        <li class="slds-tabs__item slds-text-heading--label" role="presentation" id="tab7" ng-click="callTabViewChangeFn($event);" ng-show="{!NOT(hideAMListTab)}">
                                            <a href="#" role="tab" tabindex="-1" aria-selected="false" aria-controls="tab-scoped-7" title="Assignment Manager List" style="text-decoration:none;">Assignment Manager List</a>
                                        </li>
                                        <li class="slds-tabs__item slds-text-heading--label" role="presentation" id="tab8" ng-click="callTabViewChangeFn($event);" ng-show="{!NOT(hideAssessableRecordTab)}">
                                            <a href="#" role="tab" tabindex="-1" aria-selected="false" aria-controls="tab-scoped-8" title="{!$Label.Assessable_Record_Tab_Name}" style="text-decoration:none;">{!$Label.Assessable_Record_Tab_Name}</a>
                                        </li>
                                        <li class="slds-tabs__item slds-text-heading--label" role="presentation" id="tab9" ng-click="callTabViewChangeFn($event);" ng-show="{!NOT(hideKnowledgeArticleTab)}">
                                            <a href="#" role="tab" tabindex="-1" aria-selected="false" aria-controls="tab-scoped-9" title="Knowledge Article" style="text-decoration:none;">Knowledge Article</a>
                                        </li>
                                    </ul>
                                    <!-- Start- Code for ipod, mobile view tab menu -->
                                    <div class="slds-dropdown-trigger slds-dropdown-trigger--click slds-is-open slds-hide" aria-expanded="true" aria-selected="true" id="dropdownListId" style="display:none">
                                      <button class="slds-button slds-button--icon-border-filled" aria-haspopup="true" ng-click="showMenu()">
                                        <svg aria-hidden="true" class="slds-button__icon">
                                          <use xlink:href="{!URLFOR($Resource.SLDS052, '/assets/icons/utility-sprite/svg/symbols.svg#down')}"></use>
                                        </svg>
                                        <span class="slds-assistive-text">Show More</span>
                                      </button>
                                      <div class="slds-dropdown slds-dropdown--left" id="menuId">
                                        <ul class="dropdown__list" role="menu">
                                          <li class="slds-dropdown__item slds-active" role="menuitem" id="tab1">
                                            <a title="{!$Label.Primary_Assessment_Type}" href="#" ng-click="callTabViewChangeFn($event);">
                                              {!$Label.Primary_Assessment_Type}
                                            </a>
                                          </li>
                                          <li class="slds-dropdown__item" role="menuitem" id="tab2" ng-show="{!NOT(hideRAMTab1)}">
                                            <a title="{!$Label.Related_Assessment_Type_1}" href="#" ng-click="callTabViewChangeFn($event);">
                                              {!$Label.Related_Assessment_Type_1}
                                            </a>
                                          </li>
                                          <li class="slds-dropdown__item" role="menuitem" id="tab3" ng-show="{!NOT(hideRAMTab2)}">
                                            <a title="{!$Label.Related_Assessment_Type_2}" href="#" ng-click="callTabViewChangeFn($event);">
                                              {!$Label.Related_Assessment_Type_2}
                                            </a>
                                          </li>
                                          <li class="slds-dropdown__item" role="menuitem" id="tab4" ng-show="{!NOT(hideRAMTab3)}">
                                            <a title="{!$Label.Related_Assessment_Type_3}" href="#" ng-click="callTabViewChangeFn($event);">
                                              {!$Label.Related_Assessment_Type_3}
                                            </a>
                                          </li>
                                          <li class="slds-dropdown__item" role="menuitem" id="tab5" ng-show="{!NOT(hideRAMTab4)}">
                                            <a title="{!$Label.Related_Assessment_Type_4}" href="#" ng-click="callTabViewChangeFn($event);">
                                              {!$Label.Related_Assessment_Type_4}
                                            </a>
                                          </li>
                                          <li class="slds-dropdown__item" role="menuitem" id="tab6" ng-show="{!NOT(hideDataViewerTab)}">
                                            <a title="Data Viewer" href="#" ng-click="callTabViewChangeFn($event);">
                                              Data Viewer
                                            </a>
                                          </li>
                                           <li class="slds-dropdown__item" role="menuitem" id="tab7" ng-show="{!NOT(hideAMListTab)}">
                                            <a title="Assignment Manager List" href="#" ng-click="callTabViewChangeFn($event);">
                                              Assignment Manager List
                                            </a>
                                          </li>
                                          <li class="slds-dropdown__item" role="menuitem" id="tab8" ng-show="{!NOT(hideAssessableRecordTab)}">
                                            <a title="{!$Label.Assessable_Record_Tab_Name}" href="#" ng-click="callTabViewChangeFn($event);">
                                              {!$Label.Assessable_Record_Tab_Name}
                                            </a>
                                          </li>
                                          <li class="slds-dropdown__item" role="menuitem" id="tab9" ng-show="{!NOT(hideKnowledgeArticleTab)}">
                                            <a title="Knowledge Article" href="#" ng-click="callTabViewChangeFn($event);">
                                              Knowledge Article
                                            </a>
                                          </li>
                                        </ul>
                                      </div>
                                    </div> <!-- End - Code for ipod, mobile view tab menu -->
                                    <div class="slds-tabs__content slds-hide" role="tabpanel" id="tabpanel1">
                                        <div ng-controller="unitController">
                                            <c:SearchASMAcctAndShowItsRelatedTemplates />
                                        </div>
                                    </div>
                                    <div class="slds-tabs__content slds-hide" role="tabpanel" id="tabpanel2" ng-show="{!NOT(hideRAMTab1)}">
                                        <div ng-controller="siteController">
                                            <c:SearchASMAcctAndShowItsRelatedTemplates />
                                        </div>
                                    </div>
                                    <div class="slds-tabs__content slds-hide" role="tabpanel" id="tabpanel3" ng-show="{!NOT(hideRAMTab2)}">
                                        <div ng-controller="systemsController">
                                            <c:SearchASMAcctAndShowItsRelatedTemplates />
                                        </div>
                                    </div>
                                    <div class="slds-tabs__content slds-hide" role="tabpanel" id="tabpanel4" ng-show="{!NOT(hideRAMTab3)}">
                                        <div ng-controller="commonareacontroller">
                                            <c:SearchASMAcctAndShowItsRelatedTemplates />
                                        </div>
                                    </div>
                                    <div class="slds-tabs__content slds-hide" role="tabpanel" id="tabpanel5" ng-show="{!NOT(hideRAMTab4)}">
                                        <div ng-controller="exteriorcontroller">
                                            <c:SearchASMAcctAndShowItsRelatedTemplates />
                                        </div>
                                    </div>
                                    <div class="slds-tabs__content slds-hide" role="tabpanel" id="tabpanel6" ng-show="{!NOT(hideDataViewerTab)}">
                                        <c:DataManagement frmLensViewer="true"/>
                                    </div>
                                    <div class="slds-tabs__content slds-hide" role="tabpanel" id="tabpanel7" ng-show="{!NOT(hideAMListTab)}">
                                        <c:AssignmentManagerList />
                                    </div>
                                    <div class="slds-tabs__content slds-hide" role="tabpanel" id="tabpanel8" ng-show="{!NOT(hideAssessableRecordTab)}">
                                        <apex:iframe scrolling="false" src="{!$Page.ExAM__AssessableRecord}?amid={!currentASMId}" id="iFrameAssessableRecord"/>
                                    </div>
                                    <div class="slds-tabs__content slds-hide" role="tabpanel" id="tabpanel9" ng-show="{!NOT(hideKnowledgeArticleTab)}"> 
                                          <c:KnowledgeArticle />
                                    </div>
                                </div><!-- end class slds-tabs--scoped -->
                            </div><!-- end class slds-page-header -->
                        </div><!-- end class main -->
                    </div><!-- end class slds-p-around--xx-large -->
                </body><!-- end Body -->
            </div>
        </div><!-- end module mainApp -->
    </html>     

    <script>
        var underscore = angular.module('underscore', []);
        underscore.factory('_', ['$window', function($window) {
            return $window._; // assumes underscore has already been loaded on the page
        }]);

        var activeComponentId, activeComponentIndex, selectedComponentId, selectedComponentIndex;

        $('#tabpanel1').addClass('slds-show');
        $('li.slds-tabs__item').click(function() {
            $('li.slds-tabs__item').each(function() {
                if($(this).hasClass('slds-active')) {

                    activeComponentId = $(this).attr('id');
                    activeComponentIndex = activeComponentId.substring(activeComponentId.length-1, activeComponentId.length);
                    $(this).removeClass('slds-active');
                    $('#tabpanel'+activeComponentIndex).removeClass('slds-show');
                }
            });
            selectedComponentId = $(this).attr('id');
            selectedComponentIndex = selectedComponentId.substring(selectedComponentId.length-1, selectedComponentId.length);
            $(this).addClass('slds-active');
            $('#tabpanel'+selectedComponentIndex).addClass('slds-show');
        });
        $('li.slds-dropdown__item').click(function() {
            $('li.slds-dropdown__item').each(function() {
                if($(this).hasClass('slds-active')) {

                    activeComponentId = $(this).attr('id');
                    activeComponentIndex = activeComponentId.substring(activeComponentId.length-1, activeComponentId.length);
                    $(this).removeClass('slds-active');
                    $('#tabpanel'+activeComponentIndex).removeClass('slds-show');
                }
            });
            selectedComponentId = $(this).attr('id');
            selectedComponentIndex = selectedComponentId.substring(selectedComponentId.length-1, selectedComponentId.length);
            $(this).addClass('slds-active');
            $('#tabpanel'+selectedComponentIndex).addClass('slds-show');
        });
        
        var app = angular.module('mainApp', ['underscore','ngSanitize']);
        app.directive('file', function(){
            
            return {
                scope: {
                    file: '='
                },
                link: function(scope, el, attrs){
                    el.bind('change', function(event){
                        var files = event.target.files;
                        var file = files[0];

                        var reader = new FileReader();
                        reader.onload = loaded;
                        reader.onerror = errorHandler;
                        reader.readAsDataURL(file);
                        
                        function loaded(evt){
                            scope.file = {};
                            var fileContent = String(evt.target.result);
                            fileContent = fileContent.substr(fileContent.indexOf(',') + 1);
                            
                            scope.file.resultbody = fileContent ;
                            scope.file.name = file ? file.name : undefined;
                            scope.file.contenttype = file ? file.type : undefined;
                            
                            scope.$apply(); 
                            //console.log(scope.file);
                        }                            
                        function errorHandler(evt) {
                            if (evt.target.error.name == 'NotReadableError') {
                                console.log('File could not be read');
                            }
                            else {
                                console.log(evt.target.error);
                            }
                        }
                    });
                }
            };
        });
        app.service('mainappservice', function($q,_) {

            var reqdInputObj = new Object();
            var linkAMObj = new Object();
            var tobeInsertedAMObj = new Object();
            var sectionQuestionTemplatesObj = new Object();
            var tobeInsertedAnswerResponseObj = new Object();
        
            this.queryReqdInputJS = function(currentManagerId) {

                var defer = $q.defer();
                reqdInputObj.hasActionSuccess = false;
                reqdInputObj.inputObj = new Object();

                ExAM.MultipleInspectionAssessmentViewCtrller.fetchRelatedAssignmentManagers(currentManagerId, '{!assesableFieldAPIName}', JSON.stringify({!assRecClsListJSON}), function(result, event) {
    
                    if(event.status) {

                        if (typeof result === 'object') {

                            reqdInputObj.hasActionSuccess = true;
                            reqdInputObj.inputObj = result;
                            defer.resolve(JSON.parse(_.unescape(JSON.stringify(reqdInputObj))));
                        } else {

                            defer.reject(reqdInputObj);
                        }
                    }else {

                        defer.reject(reqdInputObj);
                    }
                });
                return defer.promise;
            }

            this.queryQuestionTemplates = function(assessmentTemplateIdStr, assignmentManagerIdStr) {

                var defer = $q.defer();
                sectionQuestionTemplatesObj.hasActionSuccess = false;
                sectionQuestionTemplatesObj.inputObj = new Object();

                ExAM.MultipleInspectionAssessmentViewCtrller.returnSectionAndQuestionTemplate(assessmentTemplateIdStr, assignmentManagerIdStr, '', function(result, event) {
        
                    if(event.status) {

                        sectionQuestionTemplatesObj.hasActionSuccess = true;
                        var response_after_escaping = result.replace(new RegExp("&#39;", 'g'), "'");
                        sectionQuestionTemplatesObj.inputObj = JSON.parse( _.unescape(response_after_escaping) );
                        defer.resolve(sectionQuestionTemplatesObj);
                    }else{

                        defer.reject(sectionQuestionTemplatesObj);
                    }
                });
                return defer.promise;
            }

            this.fetchAllAnswerRecords = function() {

                var defer = $q.defer();
                var ansDetailsObj = {};
                ExAM.DataManagementController.queryAllAnswerRecords('{!currentASMId}', true, function(result, event) {
    
                    if (event.status) {                        
                        var ans = JSON.parse( _.unescape(result) );
                        if (ans["errType"] && ans["errMsg"]) {
                            defer.reject( ans );
                        }
                        else {
                            defer.resolve(ans);
                        }
                    }
                }, function(error) {
                    defer.reject(error);
                });
                return defer.promise;
            }

            this.fetchAllManagerRecords = function() {

                var defer = $q.defer();
                ExAM.AssignmentManagerListController.queryAllASMRecords(function(result, event) {
    
                    if (event.status) {
                        var fResult = JSON.parse(_.unescape(result));
                        defer.resolve(fResult);
                    }
                }, function(error) {
                    defer.reject(error);
                });
                return defer.promise;
            }

            /* Links Selected Assignment Manager With the Current ASM */
            this.linkSelectedManagerJS = function(currentASMIdStr, selectedManagerId, currentTabName) {

                var defer = $q.defer();
                var managerIdArr = [];

                linkAMObj.errMessage = '';
                linkAMObj.searchManagerText = '';
                linkAMObj.showASMTable = true;
                linkAMObj.showErrMessage = false;
                linkAMObj.hasActionSuccess = false;

                managerIdArr.push(currentASMIdStr); /* Record Id of current Assignment Manager */
                managerIdArr.push(selectedManagerId); /* Record Id of selected Assignment Manager */
                managerIdArr.push(currentTabName); /* Current Tab Name */

                ExAM.MultipleInspectionAssessmentViewCtrller.linkSelectedASMWithCurrentAssignmentManager(JSON.stringify(managerIdArr), function(result, event) {

                    if (event.status) {
                        var s = JSON.parse(result.replace(/(&quot\;)/g,"\""));
                        if (s.errMsg) {
                            linkAMObj.showErrMessage = true;
                            linkAMObj.errMessage = s.errMsg;
                            defer.reject(linkAMObj);
                        }
                        else {
                            linkAMObj.hasActionSuccess = true;
                            linkAMObj.searchManagerText = '';
                            linkAMObj.showASMTable = false;
                            defer.resolve(linkAMObj);
                        }
                    }else {
                        linkAMObj.showErrMessage = true;
                        linkAMObj.errMessage = 'Remote Call Failed';
                        defer.reject(linkAMObj);
                    }
                });
                return defer.promise;
            }

            /* Creates New Assignment Manager Under Selected Account */
            this.createNewASManagerJS = function(currentASMIdStr, selectedAcctId, templateId, currentTabName) {

                var defer = $q.defer();
                var reqdInputIdArr = [];
                tobeInsertedAMObj.questionTemplateObj = new Object();
                tobeInsertedAMObj.showASMSection = true;
                tobeInsertedAMObj.showAccountSection = true;
                tobeInsertedAMObj.showSectionQuestions = false;
                tobeInsertedAMObj.showErrMessage = false;
                tobeInsertedAMObj.hasActionSuccess = false;
                tobeInsertedAMObj.errMessage = '';
                tobeInsertedAMObj.assessmentTemplateId = '';
                tobeInsertedAMObj.newASMId = '';
                tobeInsertedAMObj.newASMName = '';

                reqdInputIdArr.push(currentASMIdStr); /* Record Id of current Assignment Manager */
                reqdInputIdArr.push(selectedAcctId); /* Record Id of selected Account */
                reqdInputIdArr.push(templateId); /* Record Id of Assessment Template Based on Active Tab */
                reqdInputIdArr.push(currentTabName); /* Current Tab Name */
                reqdInputIdArr.push('{!assessableField_API}');/* assessable fileld api name */ 
                ExAM.MultipleInspectionAssessmentViewCtrller.createNewAssignmentManager(JSON.stringify(reqdInputIdArr), function(result, event) {

                    if (event.status ) {

                        var s = JSON.parse(result.replace(/(&quot\;)/g,"\""));
                        if (s["error"]) {
                            tobeInsertedAMObj.hasActionSuccess = false;
                            tobeInsertedAMObj.showErrMessage = true;
                            tobeInsertedAMObj.errMessage = s["error"].errMsg;
                            defer.reject(tobeInsertedAMObj);
                        }
                        tobeInsertedAMObj.hasActionSuccess = true;
                        tobeInsertedAMObj.questionTemplateObj = s;
                        if ( angular.isDefined(tobeInsertedAMObj.questionTemplateObj[0].sectionTemplateRecord) ) {

                            tobeInsertedAMObj.assessmentTemplateId = tobeInsertedAMObj.questionTemplateObj[0].sectionTemplateRecord.ExAM__Questionnaire_Section__c;
                            tobeInsertedAMObj.newASMId = tobeInsertedAMObj.questionTemplateObj[ tobeInsertedAMObj.questionTemplateObj.length-1 ].sectionTemplateRecord.ExAM__Section_Description__c.split('~~')[0];
                            tobeInsertedAMObj.newASMName = tobeInsertedAMObj.questionTemplateObj[ tobeInsertedAMObj.questionTemplateObj.length-1 ].sectionTemplateRecord.ExAM__Section_Description__c.split('~~')[1];
                        }
                        tobeInsertedAMObj.showASMSection = false;
                        tobeInsertedAMObj.showAccountSection = false;
                        tobeInsertedAMObj.showSectionQuestions = true;
                        defer.resolve(tobeInsertedAMObj);
                    }else {

                        tobeInsertedAMObj.showErrMessage = true;
                        tobeInsertedAMObj.errMessage = 'Remote Call Failed';
                        defer.reject(tobeInsertedAMObj);
                    }
                });
                return defer.promise;
            }

            this.saveUsrEnteredAnswers = function(response,responseFile,fileAttach, comment, photo,signImage, assessmentTemplateId, newASMId, currentTabName, isSubmit, sectionAndQuestionTemplateObj, caseRes, decisionTreeQuesIdwithAnsId) {

                var defer = $q.defer();
                var errorFlag = false;
                tobeInsertedAnswerResponseObj.showErrMessage = false;
                tobeInsertedAnswerResponseObj.showASMSection = false;
                tobeInsertedAnswerResponseObj.showAccountSection = false;
                tobeInsertedAnswerResponseObj.showSectionQuestions = true;
                tobeInsertedAnswerResponseObj.hasActionSuccess = false;
                tobeInsertedAnswerResponseObj.errMessage = '';
                tobeInsertedAnswerResponseObj.sectionAndQuestionTemplateObj = {};
    
                /* Below code prepares answers array */
                
                var answerList = [];
                $.each(response, function(key, value) { 
       
                    var answerObj = new Object();
                    answerObj.questiontemplateId = key;
                    if (comment.hasOwnProperty(key)) {
                        answerObj.comment = comment[key];
                    }
                    if (typeof value == 'object'){
                        var answer = '';
                        for (var option in value){
                            if (value[option] && option != "$$hashKey") {
                                if (answer.length > 0) {
                                    answer += '~'+option;
                                } else {
                                    answer = option;
                                }
                            }
                        }
                        answerObj.response = answer;
                    }
                    else{
                        answerObj.response = value;
                    }
                    answerObj.assignmentManagerId = newASMId;
                    answerList.push(answerObj);
                });
                
                if(responseFile != null) { 
                    var attachmentlist=[];
                    try {
                        for (var key in responseFile) { 
                                
                            var attach = new sforce.SObject("Attachment");
                            attach.Name        = responseFile[key].name;
                            attach.ContentType = responseFile[key].contenttype;
                            attach.Body        = responseFile[key].resultbody;
                            attach.ParentId    = newASMId;
                            attach.IsPrivate   = false;
                            attachmentlist.push( attach );
                        
                        }
                        attachment_result = sforce.connection.create(attachmentlist);
                    }
                    catch(error){
                        console.log(error.message);
                    } 
                }
                
                if (answerList.length > 0 || (isSubmit)) {
        
                    /* Below code calls controller method to insert all answer records */

                    var attList = [];
                    ExAM.MultipleInspectionAssessmentViewCtrller.saveAnswerRecords(answerList, assessmentTemplateId, newASMId,isSubmit, caseRes, decisionTreeQuesIdwithAnsId, function(result, event) {
                        if (event.status) {
                            if (result != null && result != '') {

                                var s = JSON.parse(result.replace(/(&quot\;)/g,"\""));
                                if (s.code) {
                                    tobeInsertedAnswerResponseObj.hasActionSuccess = true;
                                    tobeInsertedAnswerResponseObj.showErrMessage = false;
                                    tobeInsertedAnswerResponseObj.errMessage = 'Assignment manager updated successfully';
                                    tobeInsertedAnswerResponseObj.sectionAndQuestionTemplateObj = sectionAndQuestionTemplateObj;
                                }
                                else {
                                    if(s.errMsg) {
                                        tobeInsertedAnswerResponseObj.showErrMessage = true;
                                        tobeInsertedAnswerResponseObj.errMessage = s.errMsg;
                                        tobeInsertedAnswerResponseObj.sectionAndQuestionTemplateObj = sectionAndQuestionTemplateObj;
                                        defer.reject(tobeInsertedAnswerResponseObj);
                                    }
                                    else {
    
                                        var resultobject = JSON.parse(_.unescape(result));
                                        var attachmentlist = [];
                                        //Added on 01-07-2016 for Answered icon
                                        for(i=0;i<sectionAndQuestionTemplateObj.length;i++) {
                                            for(j=0;j<sectionAndQuestionTemplateObj[i].questionTemplateRecords.length;j++) {
                                                if(resultobject[sectionAndQuestionTemplateObj[i].questionTemplateRecords[j].quesTemp.Id]) {
                                                    sectionAndQuestionTemplateObj[i].questionTemplateRecords[j].isAnswered = true;
                                                }
                                            }
                                        }
                                        $.each(photo, function(key, value) {
    
                                            if (resultobject.hasOwnProperty(key)) {
                                                answeridList = resultobject[key];
                                                for (j = 0; j < answeridList.length; j++) {        
                                                    var attach = new sforce.SObject("Attachment");
    
                                                    attach.Name        = value.name;
                                                    attach.ContentType = value.contenttype;
                                                    attach.Body        = value.resultbody;
                                                    attach.ParentId    = answeridList[j];
                                                    attach.IsPrivate   = false;
                                                    attachmentlist.push( attach );
                                                }
                                            }
                                        });
                                        for (var key in fileAttach) {
            
                                            if (resultobject.hasOwnProperty(key)) {
                                                answeridList = resultobject[key];
                                                for (j = 0; j < answeridList.length; j++) {        
                                                    var attach = new sforce.SObject("Attachment");
                
                                                    attach.Name        = fileAttach[key].name;
                                                    attach.Body        = fileAttach[key].resultbody;
                                                    attach.ContentType = fileAttach[key].contenttype;
                                                    attach.ParentId    = answeridList[j];
                                                    attach.IsPrivate   = false;
                                                    attachmentlist.push( attach );
                                                }
                                                
                                            }
                                        }
                                        <!--add on 15-09-2016-->
                                        for (var key in signImage) {
            
                                            if (resultobject.hasOwnProperty(key)) {
                                                answeridList = resultobject[key];
                                                for (j = 0; j < answeridList.length; j++) {        
                                                    var attach = new sforce.SObject("Attachment");
                
                                                    attach.Name        = 'Signature';
                                                    attach.Body        = signImage[key].replace("data:image/png;base64,","");
                                                    attach.ParentId    = answeridList[j];
                                                    attach.ContentType = 'image/png';
                                                    attach.IsPrivate   = false;
                                                    attachmentlist.push( attach );
                                                }
                                            }
                                        }
                                        attachment_result = sforce.connection.create(attachmentlist);
                                        tobeInsertedAnswerResponseObj.hasActionSuccess = true;
                                        tobeInsertedAnswerResponseObj.showErrMessage = false;
                                        tobeInsertedAnswerResponseObj.errMessage = 'Answer created successfully';
                                        tobeInsertedAnswerResponseObj.sectionAndQuestionTemplateObj = sectionAndQuestionTemplateObj;
                                    }
                                }
                                $('.imgStyle').each(function(){
                                    $(this).css({'border': 'none'});
                                });
                                $('.btnStyle').each(function(){
                                    $(this).css({'border': '1px solid #d8dde6','background-color': 'white'});
                                });
                                defer.resolve(JSON.parse(_.unescape(JSON.stringify(tobeInsertedAnswerResponseObj))));
                            }    
                        } else {
        
                            tobeInsertedAnswerResponseObj.showErrMessage = true;
                            tobeInsertedAnswerResponseObj.errMessage = 'Remote Action Call Failed';
                            tobeInsertedAnswerResponseObj.sectionAndQuestionTemplateObj = sectionAndQuestionTemplateObj;
                            defer.reject(tobeInsertedAnswerResponseObj);
                        }
                    });

                }
                else {
        
                    tobeInsertedAnswerResponseObj.showErrMessage = true;
                    tobeInsertedAnswerResponseObj.errMessage = 'Please enter answer for any of the available questions and then save the record';
                    defer.reject(tobeInsertedAnswerResponseObj);
                }
                return defer.promise;
            }            

            /* Splits Available Picklist Options In Question Template */
            this.splitAvailableAnswerOptions = function(strOption) {
        
                var options = [];
                if(strOption != null && strOption != '') {
                    options = strOption.split('~');
                }
                return options;
            }
        
            /* Notes Div Toggle Code */

            this.opencommentBox = function(selQuestionId) {
                
                $('.answercomment').removeClass('slds-modal__close');
                $('.answercomment').addClass('slds-fade-in-open');
            }
            this.closecommentBox = function() {
                $('.answercomment').addClass('slds-modal__close');
                $('.answercomment').removeClass('slds-fade-in-open');
            }
            this.savecommentBox = function() {    
                $('.answercomment').addClass('slds-modal__close');
                $('.answercomment').removeClass('slds-fade-in-open');
            }
            
            /* Attachment Div Toggle Code */
            this.openPhotoUploadBox = function() {
                $('.photoUpload').removeClass('slds-modal__close');
                $('.photoUpload').addClass('slds-fade-in-open');
            }
            this.closePhotoUploadBox = function() {
                $('.photoUpload').addClass('slds-modal__close');
                $('.photoUpload').removeClass('slds-fade-in-open');
            }
            this.savePhotoBox = function() {    
                $('.photoUpload').addClass('slds-modal__close');
                $('.photoUpload').removeClass('slds-fade-in-open');
            }
            <!--added on 20-09-2016-->
            this.openSignModal = function() {
                $('.sign').removeClass('slds-modal__close');
                $('.sign').addClass('slds-fade-in-open');   
            }
            this.closeSignModal = function() {
                $('.sign').addClass('slds-modal__close');
                $('.sign').removeClass('slds-fade-in-open');   
            }
            /** Decision Tree Functionality Starts **/
            this.queryQuestionTemplatesForCurrentActiveTab = function(assessmentTemplateId, decisionTreeResultTemplateObj) {

                var defer = $q.defer();
                var client = new remotetk.Client();
                var questionsList = [];
                var questionNamewithQuestionTemplate = {};
                var resultQuestionNamewithQuestionTemplate = {};
                var nextQuestionObj = new Object();
                nextQuestionObj.hasActionSuccess = false;
                var resultQuestionIdDefaultValueObj = {};
                //console.log('::::decisionTreeResultTemplateObj;;;;',decisionTreeResultTemplateObj);
                //console.log('::::length;;;;',decisionTreeResultTemplateObj.length);
                client.query("SELECT Id, Name, ExAM__Subquestion_Label__c, ExAM__Weight_of_Answer__c, ExAM__HelpText__c,"+ 
                                " ExAM__Section_Question__c, ExAM__Section_Question__r.ExAM__Questionnaire_Section__c, ExAM__Question_Label__c, ExAM__Question_Order_No__c,"+
                                " ExAM__Question_Type__c, ExAM__Next_Question__c, ExAM__Is_Mandatory__c, ExAM__Decision_Tree__c "+
                            " FROM ExAM__Question_Template__c "+
                            " WHERE ExAM__Section_Question__r.ExAM__Questionnaire_Section__c = \'"+assessmentTemplateId+"\'"+
                            " ORDER BY ExAM__Question_Order_No__c ASC", function(responseQuery){

                    questionsList = responseQuery.records;
                    for (i = 0; i < questionsList.length; i++) { 

                        questionNamewithQuestionTemplate[questionsList[i].Name] = questionsList[i];
                        
                        //Storing QuestionType equals Result in a separate JSON String
                        if (questionsList[i].ExAM__Question_Type__c == 'Result') {

                            resultQuestionNamewithQuestionTemplate[ questionsList[i].Id ] = questionsList[i];

                            var answerFieldApiNameValueObj = {};
                            //new code for answer option value assign into question response field on 19-08-2016
                            if (questionsList[i].ExAM__Subquestion_Label__c != null && questionsList[i].ExAM__Subquestion_Label__c != '') {
                                answerFieldApiNameValueObj['exam__response__c'] = questionsList[i].ExAM__Subquestion_Label__c;
                            }
                            if (questionsList[i].ExAM__Decision_Tree__c != null &&
                                questionsList[i].ExAM__Decision_Tree__c != ''
                            ) {

                                for(var dt=0; dt<decisionTreeResultTemplateObj.length; dt++) {

                                    var answerDefaultValues = questionsList[i].ExAM__Decision_Tree__c.split('~');
                                    for (b=0; b < answerDefaultValues.length; b++) {
                                        if ((decisionTreeResultTemplateObj[dt].hasEnabled) 
                                            && (decisionTreeResultTemplateObj[dt].fieldAPIName == answerDefaultValues[b].split(':')[0])
                                        ) {

                                            answerFieldApiNameValueObj[ answerDefaultValues[b].split(':')[0] ] = answerDefaultValues[b].split(':')[1];
                                        }
                                    }
                                }
                            }
                            resultQuestionIdDefaultValueObj[ questionsList[i].Id ] = answerFieldApiNameValueObj;
                        }
                    } 
                    nextQuestionObj.hasActionSuccess = true;
                    nextQuestionObj.questionNameAndTemplateJsonString = questionNamewithQuestionTemplate;
                    nextQuestionObj.resultNameAndTemplateJsonString = resultQuestionNamewithQuestionTemplate;
                    nextQuestionObj.resultQuestionIdDefaultVal = resultQuestionIdDefaultValueObj;
                    defer.resolve( nextQuestionObj );
                }, function(error) {
                    console.log(error);
                });
                return defer.promise;
            }
            
            this.decisionTreeOpenWindow = function(answer, questionTemplate, questionNamewithQuestionTemplate, resultQuestionNamewithQuestionTemplate) {

                var decisionTreeQuestion = '';

                if ( angular.isDefined(questionTemplate.ExAM__Next_Question__c) ) {
                    var questionPosition = -1;
                    
                    if ( angular.isDefined(questionTemplate.ExAM__Subquestion_Label__c) ) {

                        var answerOptions = questionTemplate.ExAM__Subquestion_Label__c.split('~');
                        for (i=0; i < answerOptions.length; i++) {
                            if (answer == answerOptions[i]) {
                                questionPosition = i;
                                break;
                            }
                        }
                    }

                    var nextquestionList = questionTemplate.ExAM__Next_Question__c.split('~');    
                        
                    //Added isDefined codn check on 14-06-2016 to ensure there is a question defined on selected Answer's position
                    if( nextquestionList.length > questionPosition && 
                        angular.isDefined( nextquestionList[questionPosition] ) &&
                        angular.isDefined( questionNamewithQuestionTemplate[nextquestionList[questionPosition]] )
                    ) {

                        decisionTreeQuestion = questionNamewithQuestionTemplate[nextquestionList[questionPosition]];

                    }
                    //Added isDefined codn check on 14-06-2016 to ensure there is a question defined on selected Answer's position
                    else if(nextquestionList.length > 0 && 
                        angular.isDefined( nextquestionList[0] ) &&
                        angular.isDefined( questionNamewithQuestionTemplate[nextquestionList[0]] )
                    ) {

                        decisionTreeQuestion = questionNamewithQuestionTemplate[nextquestionList[0]];
                    }   
                    $('.DecisionTree').removeClass('slds-modal__close');
                    $('.DecisionTree').addClass('slds-fade-in-open');
                }
                return decisionTreeQuestion;
            }
            this.decisionTreeNextQuestion = function(answer, questionTemplate, questionNamewithQuestionTemplate, resultQuestionNamewithQuestionTemplate, previousQuestion) {
                
                var nextQuestionObj = new Object();
                nextQuestionObj.hasNextQuestion = true;

                if (angular.isUndefined(answer)) {
                    return false;
                }
                
                var questionPosition = -1;
                if ( angular.isDefined(questionTemplate.ExAM__Subquestion_Label__c) ) {
                    var answerOptions = questionTemplate.ExAM__Subquestion_Label__c.split('~');
                    for (i=0; i < answerOptions.length; i++) {
                        if (answer == answerOptions[i]) {
                            questionPosition = i;
                            break;
                        }
                    }
                }
                
                if ( angular.isDefined(questionTemplate.ExAM__Next_Question__c) ) {

                    var nextquestionList = questionTemplate.ExAM__Next_Question__c.split('~');    

                    //Added isDefined codn check on 14-06-2016 to ensure there is a question defined on selected Answer's position
                    if( nextquestionList.length > questionPosition && 
                        angular.isDefined( nextquestionList[questionPosition] ) &&
                        angular.isDefined( questionNamewithQuestionTemplate[nextquestionList[questionPosition]] )
                    ) {

                        nextQuestionObj.decisionTreeQuestion = questionNamewithQuestionTemplate[nextquestionList[questionPosition]];

                    }
                    //Added isDefined codn check on 14-06-2016 to ensure there is a question defined on selected Answer's position
                    else if(nextquestionList.length > 0 && 
                        angular.isDefined( nextquestionList[0] ) &&
                        angular.isDefined( questionNamewithQuestionTemplate[nextquestionList[0]] )
                    ) {

                        nextQuestionObj.decisionTreeQuestion = questionNamewithQuestionTemplate[nextquestionList[0]];
                    }                        
                    if (questionTemplate != null && questionTemplate.Name != null && 
                        nextQuestionObj.decisionTreeQuestion != null && nextQuestionObj.decisionTreeQuestion.Name != null) {
                    
                        previousQuestion[nextQuestionObj.decisionTreeQuestion.Name] =  questionTemplate;
                        nextQuestionObj.previousQuestion = previousQuestion;
                    }
                } else {

                    nextQuestionObj.hasNextQuestion = false;
                }
                return nextQuestionObj;
            }
            this.callConstructDecisionTreeTemplateActn = function(tempId) {

                var defer = $q.defer();

                ExAM.MultipleInspectionAssessmentViewCtrller.constructDecisionTreeResultQuestion(tempId, function(result, event) {

                    if (event.status) {

                        if (result != null && result != '') {

                            defer.resolve( JSON.parse(_.unescape(result)) );
                        }
                        else {
                            defer.reject('Error');
                        }
                    }
                    else {
                        defer.reject('Error');
                    }
                });
                return defer.promise;
            }
    
            //Added on 14-06-2016 to make the compiler wait until Decision Tree Answers save is done successfully
            this.saveDecisionTreeAnswersInBackEnd = function(enteredAnswerOptions, managerId, relatedAnswerId, sectionAndQuestionTemplateObj, response, dtQuestion) {

                var defer = $q.defer();
                var i = 0;
                var j = 1;
                var length = Object.keys(enteredAnswerOptions).length;
                var decisionTreeanswerList = [];
                var answerSaveResponse = {};
                answerSaveResponse.createdAnswers = {};
                answerSaveResponse.sectionAndQuestionTemplateObj = {};
                answerSaveResponse.response = {};

                for (var key in enteredAnswerOptions) {

                    if (key.indexOf('~~') > 0) {
                        if( i == 0 ) {
                            answerObj = {};
                            answerObj.ExAM__Question_Template__c = key.split('~~')[0];
                            answerObj.ExAM__Issue_Request__c = managerId;
                            answerObj.ExAM__Questionnaire_Taker_user__c = '{!$User.Id}';
                            if (relatedAnswerId.length) {
                                answerObj.ExAM__Related_Answer__c = relatedAnswerId;
                            }
                            i = i+1;
                        }
                        var fieldApiNameStr = key.split('~~')[1];
                        if (!answerObj[fieldApiNameStr] ) {
                            answerObj[ fieldApiNameStr ] = enteredAnswerOptions[key];
                        }
                        if (j == length) {
                            decisionTreeanswerList.push(answerObj);
                        }
                    }
                    else if (dtQuestion[key] || {!NOT(skip_Answer_For_Decision_Tree_Steps)}) {
                        answerObj = {};
                        answerObj.ExAM__Question_Template__c = key;                        
                        if (typeof enteredAnswerOptions[key] == 'object'){
                            var answer = '';
                            for (var option in enteredAnswerOptions[key]){
                                if (enteredAnswerOptions[key][option] && option != "$$hashKey") {
                                    if (answer.length > 0) {
                                        answer += '~'+option;
                                    }
                                    else {
                                        answer = option;
                                    }
                                }
                            }
                            answerObj.ExAM__Response__c = answer;
                        } else {              
                            answerObj.ExAM__Response__c = enteredAnswerOptions[key];
                        }
                        answerObj.ExAM__Issue_Request__c = managerId;
                        answerObj.ExAM__Questionnaire_Taker_user__c = '{!$User.Id}';
                        decisionTreeanswerList.push(answerObj);
                    }
                    j++;
                }

                if (decisionTreeanswerList.length > 0) {
//console.log(':::decisionTreeanswerList:::',decisionTreeanswerList);
                    ExAM.MultipleInspectionAssessmentViewCtrller.saveDecisionTreeAnswerRecords(decisionTreeanswerList, function(result, event) {
                        if (event.status) {
                            if (result != null && result != '') {

                                var s = JSON.parse(result.replace(/(&quot\;)/g,"\""));
                                if (s.errMsg) {
                                    defer.reject( s.errMsg );
                                }
                                else {

                                    var resultObject = JSON.parse(_.unescape(result));
                                    //Added on 07-07-2016 for Answered icon
                                    for(i=0;i<sectionAndQuestionTemplateObj.length;i++) {
                                        for(j=0;j<sectionAndQuestionTemplateObj[i].questionTemplateRecords.length;j++) {
                                            if(resultObject[sectionAndQuestionTemplateObj[i].questionTemplateRecords[j].quesTemp.Id]) {
                                                sectionAndQuestionTemplateObj[i].questionTemplateRecords[j].isAnswered = true;
                                                delete response[sectionAndQuestionTemplateObj[i].questionTemplateRecords[j].quesTemp.Id];
                                            }
                                        }
                                    }
                                    answerSaveResponse.createdAnswers = resultObject;
                                    answerSaveResponse.sectionAndQuestionTemplateObj = sectionAndQuestionTemplateObj;
                                    answerSaveResponse.response = response;
                                    defer.resolve(answerSaveResponse);
                                }
                            }
                        }
                    }, function(error) {
                        defer.reject(error);
                    });
                }
                return defer.promise;
            }

            //Added on 14-06-2016 to save files uploaded in Decision Tree Result Template
            this.saveUploadedFilesAsAttachments = function(savedAnswers, uploadedImage) {

                var defer = $q.defer();
                var attachmentlist = [];
                var attachmentQuestionId;

                for (var key in uploadedImage) {

                    if (savedAnswers.hasOwnProperty(key)) {
                        attachmentQuestionId = key;
                        var attach = new sforce.SObject("Attachment");
                        attach.Name        = uploadedImage[key].name;
                        attach.ContentType = uploadedImage[key].contenttype;
                        attach.Body        = uploadedImage[key].resultbody;
                        attach.ParentId    = savedAnswers[key];
                        attach.IsPrivate   = false;

                        attachmentlist.push( attach );
                    }
                }
                if ( attachmentlist.length > 0 ) {
                    try {
                        var attachment_result = sforce.connection.create(attachmentlist);
                        defer.resolve('Upload Success');
                    }
                    catch(error){
                        defer.reject( error.message );
                    }
                }
                else {
                    defer.resolve('No Files to Upload');
                }
                return defer.promise;
            }
            /** Decision Tree Functionality Ends **/

            /** Image Question Type Answer Option Finding Service Starts **/
            var optionImage = {};
            var selectedImage = {};
            this.imageTypeQuesAnswer = function(usrSelectImageQuestion, usrSelectImage, $event, imgArr) {
               
                optionImage[usrSelectImageQuestion.Id] = true;

                $.each(imgArr, function() {
                    if (this.url === imgArr[usrSelectImage].url) {
                        $('#'+this["recId"]).css({'border': '1px solid black'});
                    }
                    else {
                        $('#'+this["recId"]).css({'border': 'none'});
                    }
                });                

                var options = [];
                if( angular.isDefined(usrSelectImageQuestion.ExAM__Subquestion_Label__c) ) {
                    options = usrSelectImageQuestion.ExAM__Subquestion_Label__c.split('~');
                }
                selectedImage["optionText"] = options[usrSelectImage];
                selectedImage["optionImage"] = optionImage;
                return selectedImage;
            }
            /** Image Question Type Answer Option Finding Service Ends **/

            /** 
                Added on 23-06-2016 for Implementing Dependent Questions Functionality
                Dependent Questions Functionality Starts
            **/
            this.queryDependentQuestions = function(assessmentTemplateId) {

                var defer = $q.defer();
                var client = new remotetk.Client();
                var imageTypeQuestionIdArr = [];
                var dependentQuestionsObj = {};
                var queryResultObj = {};

                var select_clause = "ExAM__Decision_Tree__c, ExAM__Dependent_Question__c, ExAM__HelpText__c, Id, ExAM__Is_Dependent__c, ExAM__Is_Mandatory__c, Name, ExAM__Next_Question__c, ExAM__Question_Label__c, ExAM__Question_Order_No__c, ExAM__Question_Type__c, ExAM__Section_Question__c, ExAM__Section_Question__r.ExAM__Questionnaire_Section__c, ExAM__Subquestion_Label__c, ExAM__Weight_of_Answer__c,ExAM__Field_Length__c";
                var from_clause = "ExAM__Question_Template__c";
                var where_clause =  "ExAM__Section_Question__r.ExAM__Questionnaire_Section__c = \'"+assessmentTemplateId+"\' AND (ExAM__Is_Dependent__c = true OR (ExAM__Is_Dependent__c = false AND ExAM__Question_Type__c = 'Image'))";
                var order_by_clause = "ExAM__Question_Order_No__c ASC";

                var soql_query_str1 = "SELECT "+select_clause+" FROM "+from_clause+" WHERE "+where_clause+" ORDER BY "+order_by_clause;

                client.query(soql_query_str1, function(dependentQuestions){

                    var dependentQuestionsArr = dependentQuestions.records;
                    for (i = 0; i < dependentQuestionsArr.length; i++) { 

                        if (dependentQuestionsArr[i].ExAM__Is_Dependent__c) {
                            dependentQuestionsObj[dependentQuestionsArr[i].Name] = dependentQuestionsArr[i];
                        }
                        if (dependentQuestionsArr[i].ExAM__Question_Type__c == 'Image') {
                            var qTempId = '\'' + dependentQuestionsArr[i].Id + '\'';
                            imageTypeQuestionIdArr.push( qTempId );
                        }
                    }
                    queryResultObj.dependentQuestionsObj = dependentQuestionsObj
                    queryResultObj.attachmentIds = imageTypeQuestionIdArr;
                    defer.resolve( queryResultObj );

                }, function(error) {
                    defer.reject(error);
                });
                return defer.promise;
            }

            this.queryImageQuestionTypeAttachments = function(questionTemplateIds) {

                var defer = $q.defer();
                var client = new remotetk.Client();
                var attachmentArr = {};

                var select_clause = "ContentType, Id, Name, ParentId";
                var from_clause = "Attachment";
                var where_clause =  "ParentId IN ("+questionTemplateIds+")";
                var order_by_clause = "Name ASC";

                var soql_query_str2 = "SELECT "+select_clause+" FROM "+from_clause+" WHERE "+where_clause+" ORDER BY "+order_by_clause;

                client.query(soql_query_str2, function(queriedAtts){

                    var atts = queriedAtts.records;

                    for(var a=0;a<atts.length;a++) {

                        if ( !isNaN(atts[a].Name) ) {
                            var attachmentObj = {};
                            attachmentObj["recId"] = atts[a].Id;
                            attachmentObj["parentId"] = atts[a].ParentId;
                            attachmentObj["url"] = '/servlet/servlet.FileDownload?file='+atts[a].Id;
                            attachmentObj["label"] = atts[a].Name;
                            if (!attachmentArr[ atts[a].ParentId ]) {
                                attachmentArr[ atts[a].ParentId ] = [];
                            }
                            attachmentArr[ atts[a].ParentId ].push( attachmentObj );
                        }
                    }
                    defer.resolve( attachmentArr );

                },function(error) {
                    defer.reject(error);
                });
                return defer.promise;
            }

            this.returnDependentQuestion = function(forWhichQuestion, selectedAnswer, dependentQuestionsObj) {

                var defer = $q.defer();
                var availableAnswerOptions = [];
                var availableDependentQuestionsOptions = [];
                var answerPosition = -1;

                if ( angular.isDefined(forWhichQuestion.ExAM__Dependent_Question__c) ) {

                    if (forWhichQuestion.ExAM__Dependent_Question__c.indexOf('~') > 0) {
                        availableDependentQuestionsOptions = forWhichQuestion.ExAM__Dependent_Question__c.split('~');
                    }
                    else {
                        availableDependentQuestionsOptions.push( forWhichQuestion.ExAM__Dependent_Question__c );
                    }
                    if ( angular.isDefined(forWhichQuestion.ExAM__Subquestion_Label__c) ) {
                        if (forWhichQuestion.ExAM__Subquestion_Label__c.indexOf('~') > 0) {
                            availableAnswerOptions = forWhichQuestion.ExAM__Subquestion_Label__c.split('~');
                        }
                        else {
                            availableAnswerOptions.push( forWhichQuestion.ExAM__Subquestion_Label__c );
                        }
                    }
                    if (availableAnswerOptions.length > 0) {
                        for(var i=0;i<availableAnswerOptions.length;i++) {
                            if (availableAnswerOptions[i] == selectedAnswer) {
                                answerPosition = i;
                                break;
                            }
                        }
                    }
                    if (availableDependentQuestionsOptions.length > answerPosition &&
                        angular.isDefined( availableDependentQuestionsOptions[answerPosition] ) &&
                        angular.isDefined( dependentQuestionsObj[ availableDependentQuestionsOptions[answerPosition]] )
                    ) {

                        defer.resolve( dependentQuestionsObj[availableDependentQuestionsOptions[answerPosition]] );
                    }
                    else if ( angular.isDefined( availableDependentQuestionsOptions[0] ) &&
                              angular.isDefined( dependentQuestionsObj[ availableDependentQuestionsOptions[0]] )
                    ) {

                        defer.resolve( dependentQuestionsObj[availableDependentQuestionsOptions[0]] );
                    }
                }
                return defer.promise;
            }
            /** Dependent Questions Functionality Ends **/

            /** Added on 23-06-2016 to ensure required fields has value populated and email address, phone number fields are valid **/
            this.doReqdFieldValidation = function(response,isSelectBtn,selectImage, isSubmit,signImage) {

                var defer = $q.defer();
                var selectedAnsOption = '';
                var formattedPhoneNumberObj = {};
                var hasReqdFieldValidationSuccess = true;
                var hasEmailFieldValidationSuccess = true;
                var hasPhoneFieldValidationSuccess = true;
                var hasImageFieldValidationSuccess = true;
                var hasBtnFieldValidationSuccess = true;
                var hasCaseValidateSuccess = true;
                var hasCaseEmailValidationSuccess = true;
                var hasSignImageValidationSuccess = true;
                var hashotspotImageValidationSuccess = true;
                var hasListQTypeValidationSuccess = true;
                
                if (isSubmit) {
                    defer.resolve('Skip Validation');
                }
                else {

                    $('.validatetrue:visible').each(function() {

                        if ($(this).prop('nodeName') != 'DIV') {
                            selectedAnsOption = ($(this).val().trim() != '?') ? $(this).val().trim() : '';
                        }else {
                            $(this).children().children().each(function() {

                                if($(this).hasClass( "ng-touched" )) {
                                    selectedAnsOption = $(this).val();
                                }
                            });
                        }
                        if(selectedAnsOption.length > 0) {
                
                            $(this).parent('div').removeClass('slds-has-error');
                            $(this).parent('div').find('.requiredMessage').css('display','none');
                        } else {

                            $(this).parent('div').addClass('slds-has-error');
                            $(this).parent('div').find('.requiredMessage').css('display','');
                            hasReqdFieldValidationSuccess = false;
                        }
                    });
                    $('.validateEmail:visible').each(function() {

                        var validateResult;
                        var email = $(this).val(); 
                        var regx = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;

                        if(email.length > 0) {
                               
                            validateResult =  regx.test(email);

                            if(validateResult == false ) {
                               
                                $(this).parent('div').addClass('slds-has-error');
                                $(this).parent('div').find('.validateEmailMessage').css('display','');
                                hasEmailFieldValidationSuccess = false;
                            } else {

                                $(this).parent('div').removeClass('slds-has-error');
                                $(this).parent('div').find('.validateEmailMessage').css('display','none');
                            }
                        }
                    });
                    $('.validatePhone:visible').each(function() {
                        
                        var validateResult;
                        var PhNum;
                        var phoneVal = $(this).val(); 
                        var phoneId = $(this).attr('id'); 
                        var phoneRegx = /^((\+)?[1-9]{1,2})?([-\s\.])?((\(\d{1,4}\))|\d{1,4})(([-\s\.])?[0-9]{1,12}){1,2}$/;
                           
                        if(phoneVal.length > 0) { 
                           
                            validateResult =  phoneRegx.test(phoneVal);
                            PhNum  = phoneVal.replace(/[()-\s+]/g,'');
                            formattedPhoneNumberObj[phoneId] = PhNum;

                            if(validateResult == false){
                                $(this).parent('div').addClass('slds-has-error');
                                $(this).parent('div').find('.validatePhNumMessage').css('display','');
                                hasPhoneFieldValidationSuccess = false;
                            } else {
                                $(this).parent('div').removeClass('slds-has-error');
                                $(this).parent('div').find('.validatePhNumMessage').css('display','none');
                            }
                        }
                    });
                    $('.imageValidatetrue:visible').each(function() {
                    
                        var Id = $(this).attr('id'); 
                        if(!angular.isUndefined(selectImage)) {
                            if(selectImage[Id]) {
                                $(this).parent('div').removeClass('slds-has-error');
                                $(this).parent('div').find('.requiredMessage').css('display','none');
                            } else {
                                $(this).parent('div').addClass('slds-has-error');
                                $(this).parent('div').find('.requiredMessage').css('display','');
                                hasImageFieldValidationSuccess = false;
                            }
                        } else {
                            $(this).parent('div').addClass('slds-has-error');
                            $(this).parent('div').find('.requiredMessage').css('display','');
                            hasImageFieldValidationSuccess = false;
                        }
                    });
                    $('.validateBtntrue:visible').each(function() {
                    
                        var Id = $(this).attr('id'); 
                        Id = Id.replace('Btn','');
                        if(isSelectBtn[Id]) {
                            $(this).parent('div').removeClass('slds-has-error');
                            $(this).parent('div').find('.requiredMessage').css('display','none');
                        
                        } else {
                            $(this).parent('div').addClass('slds-has-error');
                            $(this).parent('div').find('.requiredMessage').css('display','');
                            hasBtnFieldValidationSuccess = false;
                        }
                    });
                    //added on 20-09-2016

                    $('.validateSignImagetrue:visible').each(function() {
                        var Id = $(this).find('.validateSign').attr('id'); 
                        Id = Id.replace('sign','');
                        
                        if (!angular.isUndefined(signImage)) {
                            if(!angular.isUndefined(signImage[Id]))  {
                                $(this).removeClass('slds-has-error');
                                $(this).parent('div').find('.requiredMessage').css('display','none');        
                            } else {
                                $(this).addClass('slds-has-error');
                                $(this).parent('div').find('.requiredMessage').css('display','');
                                hasSignImageValidationSuccess = false;
                            }
                        } else {
                            $(this).addClass('slds-has-error');
                            $(this).parent('div').find('.requiredMessage').css('display','');
                            hasSignImageValidationSuccess = false;
                        }
                    });
                    //hotspot image
                    $('.hotspotImagetrue:visible').each(function() {
                        var hotspotQId = $(this).attr('id'); 
                        hotspotQId = hotspotQId.replace('hotspot','');
                       
                        if (!angular.isUndefined(response[hotspotQId])) {
                            $(this).removeClass('slds-has-error');
                            $(this).parent('div').find('.requiredMessage').css('display','none');        
                        } else {
                            $(this).addClass('slds-has-error');
                            $(this).parent('div').find('.requiredMessage').css('display','');
                            hashotspotImageValidationSuccess = false;
                        }
                    });
                    //List Question Type
                    $('.ListQTypetrue:visible').each(function() {
                        var listQTypeQId = $(this).attr('id'); 
                        listQTypeQId = listQTypeQId.replace('ListQType','');
                        
                        if (!angular.isUndefined(response[listQTypeQId])) {
                            $(this).removeClass('slds-has-error');
                            $(this).parent('div').find('.requiredMessage').css('display','none');        
                        } else {
                            $(this).addClass('slds-has-error');
                            $(this).parent('div').find('.requiredMessage').css('display','');
                            hasListQTypeValidationSuccess = false;
                        }
                    });
                    //Case question type code 06-07-2016
                    $('.caseValidatetrue:visible').each(function() {
                    
                       var validateResult;
                       var caseVal = $(this).val(); 
                       
                       if (caseVal.length > 0) {
                            $(this).parent('div').removeClass('slds-has-error');
                            $(this).parent('div').find('.requiredMessage').css('display','none');
                        } else {            
                            $(this).parent('div').addClass('slds-has-error');
                            $(this).parent('div').find('.requiredMessage').css('display','');
                            hasCaseValidateSuccess = false;
                        }
                       
                    });
                    $('.caseEmailValidatetrue:visible').each(function() {
                    
                       var validateResult;
                       var email = $(this).val(); 
                       var regx = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
                       
                       if(email.length > 0) {
                           
                           validateResult =  regx.test(email);

                           if(validateResult == false ){
                           
                                $(this).parent('div').addClass('slds-has-error');
                                $(this).parent('div').find('.requiredEmailMessage').css('display','');
                                hasCaseEmailValidationSuccess = false;
                           } else {
                                
                                $(this).parent('div').removeClass('slds-has-error');
                                $(this).parent('div').find('.requiredEmailMessage').css('display','none');
                                
                          }
                      }
                       
                    });

                    if ( hasReqdFieldValidationSuccess && hasEmailFieldValidationSuccess 
                         && hasPhoneFieldValidationSuccess && hasImageFieldValidationSuccess 
                         && hasBtnFieldValidationSuccess && hasSignImageValidationSuccess && hashotspotImageValidationSuccess
                         && hasCaseEmailValidationSuccess && hasSignImageValidationSuccess 
                         && hashotspotImageValidationSuccess && hasListQTypeValidationSuccess) {

                        defer.resolve( formattedPhoneNumberObj );
                    }
                    else {
                        defer.reject('Validate Not Success');
                    }
                }
                return defer.promise;
            }
            /** Required fields validation ends **/
        });
        app.controller('mainAppCtrller', function($scope, $timeout,mainappservice, $rootScope,_) {
            //Start - new code for Tab or Mobile view 18-07-2016
            $("#dropdownListId").hide();  // large screens here 
            $("#tabId").hide();
            var isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);
            if ($(window).width() < 490 || isMobile) {
                $("#tabId").hide();
                $("#tabId").parent('div').removeClass('slds-tabs--scoped');
                //$("#dropdownListId").removeClass('slds-hide');
                $("#dropdownListId").show();
                $("#secTemplateId").css("width","150px");
    
            } else {
                 $("#dropdownListId").hide();
                 $("#tabId").show();
                 $("#tabId").parent('div').addClass('slds-tabs--scoped');
                 //$("#tabId").removeClass('slds-hide');
            }  
            $(window).resize(function(){

                $scope.$apply(function(){
                    if ($(window).width() < 490 || isMobile) {
                        $("#tabId").hide();
                        $("#tabId").parent('div').removeClass('slds-tabs--scoped');
                        //$("#dropdownListId").removeClass('slds-hide');
                        $("#dropdownListId").show();
                        $("#secTemplateId").css("width","150px");
            
                    } else {
                         $("#dropdownListId").hide();
                         $("#tabId").show();
                         $("#tabId").parent('div').addClass('slds-tabs--scoped');
                         //$("#tabId").removeClass('slds-hide');
                    }  
                });
            });
            //End - new code for Tab or Mobile view 18-07-2016
            $scope.allAnswerObj = {};
            $scope.allAssignmentManagersObj = new Object();
            $scope.sf1 = false;
            $scope.editAnswerObj = false;
            
            $scope.Related_Assessment_Type_1_Template = '';
            $scope.Related_Assessment_Type_2_Template = '';
            $scope.Related_Assessment_Type_3_Template = '';
            $scope.Related_Assessment_Type_4_Template = '';
            $scope.relatedmanager_1_id = '';
            $scope.relatedmanager_2_id = '';
            $scope.relatedmanager_3_id = '';
            $scope.relatedmanager_4_id = '';

            // Added on 01-07-2016
            $scope.showImageUploadIcon = {!showImgIcon};
            $scope.showCommentsIcon = {!showNotesIcon};
            $scope.showClearIcon = {!showRefreshIcon};
            $scope.showQuesNumIcon = {!showQuesNum};    

            if ( (typeof sforce != 'undefined') && (sforce != null) ) {
                $scope.sf1 = true;
            }    
            
            // Added on 25-07-2016
            ExAM.KnowledgeArticleController.returnKnowledgeArticles(function(result, event) {
                if (event.status) {
                    if (result != null && result != '') {
                        var resultObj = JSON.parse(_.unescape(JSON.stringify(result)));
                        if (!resultObj["err"] ) {
                            $scope.articlesObj = resultObj.sObjectRecords;
                            $scope.summaryField = resultObj.summaryField;
                        }
                    }
                }
            });
            
            $scope.callRemoteActionTOQueryAllAnswerRecords = function() {
    
                $('.maskDiv, .slds-spinner--small').show();
                mainappservice.fetchAllAnswerRecords().then(function(data){
                    $scope.allAnswerObj = data;
                    $('.maskDiv, .slds-spinner--small').hide();
                },function(errdata){
    
                    $('.maskDiv, .slds-spinner--small').hide();           
                    $scope.showErrMessage = true;
                    $scope.errMessage = errdata;
                });
            }
            $scope.deleteAnswerRecord = function(answerId, indexval) {
                var confirmMsg = confirm('Are you sure?');
                
                if (confirmMsg) {
                    $scope.allAnswerObj.splice(indexval,1);
                    ExAM.DataManagementController.deleteAnswerRecord(answerId, function(result, event) {
                        if (result != null && result != '') {
                        }
                    });
                }
            }

            $scope.callRemoteActionTOQueryAllAssignmentManagerRecords = function() {
    
                $('.maskDiv, .slds-spinner--small').show();
                mainappservice.fetchAllManagerRecords().then(function(amdata){
    
                    $scope.allAssignmentManagersObj = amdata;
                    $('.maskDiv, .slds-spinner--small').hide();
                },function(errordata){
    
                    $('.maskDiv, .slds-spinner--small').hide();           
                    $scope.showErrMessage = true;
                    $scope.errMessage = 'Remote Method Invocation Failed';
                });
            }

            $scope.callTabViewChangeFn = function(event) {
                $("#menuId").hide();
                $('.maskDiv, .slds-spinner--small').show();
                
                if (event.target.attributes.title.value == '{!$Label.Related_Assessment_Type_1}') {
                    mainappservice.queryQuestionTemplates($scope.Related_Assessment_Type_1_Template, $scope.relatedmanager_1_id).then(function(data2){
                        if (data2.hasActionSuccess === true) {
                            $rootScope.$broadcast('questionListSet1',{param1:data2.inputObj});
                        } else {
                            $('.maskDiv, .slds-spinner--small').hide();
                        }                        
                    });
                    $scope.init();
                } else if (event.target.attributes.title.value == '{!$Label.Related_Assessment_Type_2}') {
                    mainappservice.queryQuestionTemplates($scope.Related_Assessment_Type_2_Template, $scope.relatedmanager_2_id).then(function(data3){
                        if (data3.hasActionSuccess === true) {
                            $rootScope.$broadcast('questionListSet2',{param1:data3.inputObj});
                        } else {
                            $('.maskDiv, .slds-spinner--small').hide();
                        }
                    });
                    $scope.init();
                } else if (event.target.attributes.title.value == '{!$Label.Related_Assessment_Type_3}') {
                    mainappservice.queryQuestionTemplates($scope.Related_Assessment_Type_3_Template, $scope.relatedmanager_3_id).then(function(data4){
                        if (data4.hasActionSuccess === true) {
                            $rootScope.$broadcast('questionListSet3',{param1:data4.inputObj});
                        } else {
                            $('.maskDiv, .slds-spinner--small').hide();
                        }
                    });
                    $scope.init();
                } else if (event.target.attributes.title.value == '{!$Label.Related_Assessment_Type_4}') {
                    mainappservice.queryQuestionTemplates($scope.Related_Assessment_Type_4_Template, $scope.relatedmanager_4_id).then(function(data5){
                        if (data5.hasActionSuccess === true) {
                            $rootScope.$broadcast('questionListSet4',{param1:data5.inputObj});
                        }
                        else {
                            $('.maskDiv, .slds-spinner--small').hide();
                        }
                    });
                    $scope.init();
                } else {
                    $('.maskDiv, .slds-spinner--small').hide();
                    $scope.initOfUnitTab();
                }
                
                //$('.maskDiv, .slds-spinner--small').hide();
                if (event.target.attributes.title.value == 'Data Viewer') {
                    $scope.callRemoteActionTOQueryAllAnswerRecords();
                }
            }
            //Related to Hotspot Image 
            $scope.initOfUnitTab = function() {
                var tempThis = {};
                $timeout(function(){
                    $('.map').maphilight({strokeColor:'808080',strokeWidth:0,fillColor:'00cd27'});
                    //map clicks
                    $(".tabs area").click(function(){
                       var data = $(this).data('maphilight') || {};
                       data.alwaysOn = true;
                       $(this).data('maphilight', data).trigger('alwaysOn.maphilight');
                       data.alwaysOn = false;
                       
                       if(typeof tempThis === "undefined" && tempThis != $(this)){
                           tempThis.data('maphilight', data).trigger('alwaysOn.maphilight'); 
                       }
                       tempThis =  $(this); 
                        
                       //there is also "neverOn" in the docs, but not sure how to get it to work
                                  
                             
                       if ($(this).hasClass("current") == false)
                       {
                           var thisTarget = $(this).attr("href");
                                                                   
                           $(this).parents(".tabs").find('area.current').removeClass('current');
                                    
                           $(this).addClass('current');
                                        
                           $(this).parents(".tabs").nextAll(".tab-content").children(":visible").fadeOut(1, function() {
                               $(thisTarget).fadeIn("fast");
                           });
                    
                       }
                       return false; 
                  }); 
                },750);  
            }
            $scope.init = function () {
                var tempThis = {};
                $timeout(function(){
                    $('.map').maphilight({strokeColor:'808080',strokeWidth:0,fillColor:'00cd27'});
                    //map clicks
                    $(".tabs area").click(function(){
                       
                       //This block is what creates highlighting by trigger the "alwaysOn", 
                       
                       //var data = $(this).data('maphilight') || {};
                       //data.alwaysOn = !data.alwaysOn;
                       // $(this).data('maphilight', data).trigger('alwaysOn.maphilight'); 
                       
                       
                       var data = $(this).data('maphilight') || {};
                       data.alwaysOn = true;
                       $(this).data('maphilight', data).trigger('alwaysOn.maphilight');
                       data.alwaysOn = false;
                       
                       if(typeof tempThis === "undefined" && tempThis != $(this)){
                           tempThis.data('maphilight', data).trigger('alwaysOn.maphilight'); 
                       }
                       tempThis =  $(this); 
                        
                       //there is also "neverOn" in the docs, but not sure how to get it to work
                                  
                             
                       if ($(this).hasClass("current") == false)
                       {
                           var thisTarget = $(this).attr("href");
                                                                   
                           $(this).parents(".tabs").find('area.current').removeClass('current');
                                    
                           $(this).addClass('current');
                                        
                           $(this).parents(".tabs").nextAll(".tab-content").children(":visible").fadeOut(1, function() {
                               $(thisTarget).fadeIn("fast");
                           });
                    
                       }
                       return false; 
                  }); 
                },2000);  
            }        
            $scope.showMenu = function() { //for tab or mobile menu
                $("#menuId").show();
            }
            $scope.openAnswerRecord = function(ansId) {

                window.location.href = '/'+ansId;
            }
            $scope.openAssignmentManagerRecord = function(selectedMngerId) {

                window.location.href = '/'+selectedMngerId;
            }
            $scope.callRemoteActionTOQueryAllAssignmentManagerRecords();
            $scope.callRemoteActionTOQueryAllAnswerRecords();
        });
        app.controller('unitController', function($scope, mainappservice,_,$timeout) {

            $scope.sectionAndQuestionTemplateObj = [];
            $scope.sectionAndQuestionTemplateObjForCurrentASM = [];
            $scope.currentASMIdStr = '{!currentASMId}';
            $scope.currentASMAssesssmentTemplateTdStr = '{!currentASMAssessmentTemplateId}';
            $scope.showASMSection = false;
            $scope.showAccountSection = false;
            $scope.showSectionQuestions = true;
            $scope.showASMTable = false;
            $scope.showAcctTable = false;
            $scope.photoQuestionId = '';
            $scope.selecteQuestionId = '';
            $scope.response = {};
            $scope.comment = {};
            $scope.photo = {};
            $scope.errMessage = '';
            $scope.showPgMessage = false;
            $scope.showErrMessage = false;
            $scope.hasAnswersExistsForUnitTemplate = '{!hasAnswersAvailableForUnitTemplate}';
            $scope.selectedAnswerVal = '';
            $scope.errorFlag = false;
            $scope.setPgMsgColor = 'red';
            $scope.relatedmanagerid = '{!currentASMId}';
            $scope.relatedmanagername = '{!currentASMNameString}';
            
            $scope.decisionTreeStartQuestionId = '';
            
            //$scope.decisionTreeResultTemplate = [];
            
            $scope.unitDetail = true;
            $scope.assessableRecordId = '{!assessableRecordId}';
            $scope.assessableRecordName = '{!JSENCODE(assessableRecordName)}';
            $scope.currentASMAssessmentTemplateName = '{!currentASMAssessmentTemplateName}';
            $scope.decisionTreeResultTemplate = [];
            
            //Added on 14-06-2016 for Related Decision Tree chain functionality
            $scope.createdAnswerRecordIdForResultTemplate = '';

            //Added on 19-07-2016 to store question which launches Decision Tree
            $scope.decisionTreeLaunchedQuestion = {};
            $scope.isCalledFirstTime = false;
            
            
            if ('{!JSENCODE(decisionTreeResultString)}' != null && '{!JSENCODE(decisionTreeResultString)}' != '') {
                $scope.decisionTreeResultTemplate = JSON.parse('{!JSENCODE(decisionTreeResultString)}');
            }
            $scope.primaryAMId = '';
            
            $('.maskDiv, .slds-spinner--small').show();

            /* Set Assessment Template Id and Assignment Manager Id */
            $scope.assessmentTemplateId = $scope.currentASMAssesssmentTemplateTdStr;
            $scope.newASMId = $scope.currentASMIdStr;
            
            /** Variables For Decision Tree Functionality **/
            $scope.DecisionTreeresponse = {};
            $scope.decisionTreeQuestion = {};
            $scope.previousQuestion = {};            
            $scope.questionsList = [];
            $scope.questionNamewithQuestionTemplate = {};
            $scope.resultQuestionNamewithQuestionTemplate = {};
            
            $scope.isRelatedAM = {!isRelatedAM};
            $scope.isLensViewerTemplate = {!isLensViewerTemplate};
            $scope.isLensViewerPage = true;
            $scope.primaryAMList = [];
            if ('{!JSENCODE(primaryAMListStr)}' != null && '{!JSENCODE(primaryAMListStr)}' != '' && '{!JSENCODE(primaryAMListStr)}' != 'null') {
                $scope.primaryAMList = JSON.parse('{!JSENCODE(primaryAMListStr)}');
            }
            $scope.primaryAMcls = false;
            $scope.assessableField_API = '{!assessableField_API}';
            $scope.template_type = '{!template_type}';
            $scope.primaryTemplateId = '{!primaryTemplateId}';
            $scope.isDisable = false;
            
            $scope.selectImage = {};
            
            /** 
                Variable to display error message when there are no section templates below the given
                Assessment template
            **/
            $scope.hasSectionTemplates = true;
            //Selected Button option
            $scope.isSelectBtnOptn = {};
            $scope.fileAttach = {};
            $scope.responseFile = {};
            <!--added on 20-09-2016-->
            var signature;
            $scope.signImage = {};
            $scope.signAnsOption ='';
            $scope.ansFileOption ='';
            $scope.ansFileId ='';
            
            $scope.showQuestionName_on_DecisionTree = {!show_Question_Name_on_Decision_Tree};
            
            $scope.caseResponse = {};
            $scope.decisionTreeQuesIdwithAnswerIdObj = {};
            mainappservice.queryQuestionTemplates($scope.currentASMAssesssmentTemplateTdStr, $scope.currentASMIdStr).then(function(data){

                if (data.hasActionSuccess === true) {

                    $('.maskDiv, .slds-spinner--small').hide();
                    $scope.sectionAndQuestionTemplateObj = data.inputObj;
                    if ( $scope.sectionAndQuestionTemplateObj.length == 0 ) {
                        $scope.hasSectionTemplates = false;
                    }
                } else {
                    $('.maskDiv, .slds-spinner--small').hide();
                }
            },function(errordata){

                $('.maskDiv, .slds-spinner--small').hide();           
                $scope.showErrMessage = true;
                $scope.errMessage = 'Remote Method Invocation Failed';
            });
           
            /**
                Code Below calls the function in service which queries all the question template
                below the section templates under assessment template of current assignment manager
            **/
            mainappservice.queryQuestionTemplatesForCurrentActiveTab($scope.currentASMAssesssmentTemplateTdStr, $scope.decisionTreeResultTemplate).then(function(questionTemplateData){

                if (questionTemplateData.hasActionSuccess === true) {

                    $scope.questionNamewithQuestionTemplate = questionTemplateData.questionNameAndTemplateJsonString;
                    $scope.resultQuestionNamewithQuestionTemplate = questionTemplateData.resultNameAndTemplateJsonString;
                    $scope.resultQuestionIdDefaultVal = questionTemplateData.resultQuestionIdDefaultVal;
                }
            },function(errorData){
                console.log(errorData);
            });
            
            $scope.saveUsrEnteredAnswerOptions = function(isSubmit) {
                mainappservice.doReqdFieldValidation($scope.response,$scope.isSelectBtnOptn,$scope.selectImage,isSubmit,$scope.signImage).then(function(validateSuccessResponse) {

                    if (validateSuccessResponse != 'Skip Validation') {
                        $.each(validateSuccessResponse, function(key, value) {
                            if ($scope.response[key]) {
                                $scope.response[key] = value;
                            }
                        });
                    }

                    $scope.setPgMsgColor = 'red';
                    $('.maskDiv, .slds-spinner--small').show();

                    mainappservice.saveUsrEnteredAnswers($scope.response,$scope.responseFile,$scope.fileAttach, $scope.comment, $scope.photo,$scope.signImage, $scope.currentASMAssesssmentTemplateTdStr, $scope.currentASMIdStr, '{!$Label.Primary_Assessment_Type}', isSubmit, $scope.sectionAndQuestionTemplateObj,$scope.caseResponse,$scope.decisionTreeQuesIdwithAnswerIdObj).then(function(savedResponseData){

                        if (savedResponseData.showErrMessage && !savedResponseData.hasActionSuccess) {

                            $('.maskDiv, .slds-spinner--small').hide();
                            $scope.showErrMessage = savedResponseData.showErrMessage;
                            $scope.errMessage = savedResponseData.errMessage;                            
                        } else if (!savedResponseData.showErrMessage && savedResponseData.hasActionSuccess) {

                            $('.maskDiv, .slds-spinner--small').hide();
                            $scope.setPgMsgColor = 'green';
                            $scope.showErrMessage = true; // setting this variable as true to show success message
                            $scope.errMessage = savedResponseData.errMessage;
                            $scope.showSectionQuestions = savedResponseData.showSectionQuestions;

                            //Added on 01-07-2016 for Answered icon
                            $scope.sectionAndQuestionTemplateObj = savedResponseData.sectionAndQuestionTemplateObj;

                            //clear all variables after answer save happens successfully in backend
                            $scope.response = {};
                            $scope.comment = {};
                            $scope.photo = {};
                            $scope.signImage = {};
                            $scope.nextDependentQuestion = {};
                            $scope.selectImage = {};
                            $scope.isSelectBtnOptn = {};
                            $scope.fileAttach = {};
                            $scope.responseFile = {};
                            angular.element("input[type='file']").val(null);
                            $scope.init();
                            $scope.initOfUnitTab();
                            $scope.caseResponse = {};
                            $scope.decisionTreeQuesIdwithAnswerIdObj = {};
                            $('.liClass').removeClass('slds-is-selected');
                        } 
                    },function(errordata){

                        $('.maskDiv, .slds-spinner--small').hide();
                        $scope.showErrMessage = errordata.showErrMessage;
                        $scope.errMessage = errordata.errMessage;                            
                    });
                    
                },
                function(validateErrorResponse) {
                    return null;
                });
            }

            $scope.splitOptions = function(strOption) {

                return mainappservice.splitAvailableAnswerOptions(strOption);
            }

            $scope.opencomment = function(selQuestionId) {                
                $scope.selecteQuestionId = selQuestionId;
                mainappservice.opencommentBox();
            }
            $scope.closecomment = function() {
                mainappservice.closecommentBox();
            }
            $scope.savecomment = function() {    
                mainappservice.savecommentBox();
            }

            $scope.openPhotoUpload = function(selQuestionId) {
                document.getElementById('fid').value = '';                 
                $scope.photoQuestionId = selQuestionId;
                mainappservice.openPhotoUploadBox();
            }            
            $scope.closePhotoUpload = function() {
                mainappservice.closePhotoUploadBox();
            }
            $scope.savePhoto = function() {
                mainappservice.savePhotoBox();
            }
            $scope.openAssignmentManagerRecord = function() {

                window.location.href = '/'+$scope.relatedmanagerid;
            }
            $scope.resetChosenAnswerForThisQuestionTemplate = function(selQuestionId,type) {

                if (angular.isDefined($scope.response[selQuestionId]) && type != '' && type == 'ListQType') {
                    $('#listQT'+selQuestionId).removeClass('slds-is-selected');
                    delete $scope.response[selQuestionId];
                } else {
                    delete $scope.response[selQuestionId];
                }
            }
            <!--add on 15-09-2016-->
           $scope.openSignatureModal = function(selectQuestionId,option) {
                $scope.chooseQuesId = selectQuestionId;
                if(option){
                    $scope.signAnsOption = option;
                }else{
                    $scope.signAnsOption = 'NoData';
                }
                $scope.tempsignAnsOption = null;
                
                $timeout(function(){
                    mainappservice.openSignModal();
                    var canvas = document.getElementById(selectQuestionId);
                    var context = canvas.getContext('2d');
                    signature = new SignaturePad(canvas, {
                        backgroundColor: 'rgba(255, 255, 255, 0)',
                        penColor: 'rgb(0, 0, 0)'
                    });
                    if($scope.signImage[$scope.chooseQuesId]){
                        var imageObj = new Image();
    
                        imageObj.onload = function() {
                          context.drawImage(imageObj, 0, 0);
                        };
                        imageObj.src = $scope.signImage[$scope.chooseQuesId];
                    }else{
                        $scope.canvasClick = false;
                    }
                },500);
            }
            $scope.closeSign = function(){
                $scope.signAnsOption = null;
                $scope.tempsignAnsOption = null;
                mainappservice.closeSignModal();
            }
            $scope.clearSign = function(){
                signature.clear();
                $scope.tempsignAnsOption = angular.copy($scope.signAnsOption);
                $scope.signAnsOption = null;
            };
            $scope.canvasClickfun1 = function(){
                $scope.canvasClick = true;
                if($scope.tempsignAnsOption){
                    $scope.signAnsOption = $scope.tempsignAnsOption;
                }
            }
            $scope.saveSign = function(){
              
                if($scope.signAnsOption && $scope.canvasClick){
                    $scope.signImage[$scope.chooseQuesId] = signature.toDataURL('image/png');
                    if($scope.signAnsOption == 'NoData'){
                        $scope.response[$scope.chooseQuesId] = '';
                    }else{
                        $scope.response[$scope.chooseQuesId] = $scope.signAnsOption;
                    }
                    
                } else {
                    delete $scope.signImage[$scope.chooseQuesId];
                    delete $scope.response[$scope.chooseQuesId];
                }
                signature.clear();
                mainappservice.closeSignModal();
            };
            
            //This Function related to Hotspot image type question
            $scope.hotspotInit = function(hotspotProperties) {
                if (hotspotProperties != null && hotspotProperties != '') {
                    return JSON.parse(_.unescape(hotspotProperties));
                } else {
                    return null;
                }
            }
            /** Start Decision Tree Functionality Related Method Invocation **/
            $scope.openDecisionTreePopUp = function(usrEnteredAnswerOpt, forWhichQuestion) {
                $scope.DecisionTreeresponse = {};
                if (forWhichQuestion.ExAM__Question_Type__c != 'Result') {
                    $scope.DecisionTreeresponse[forWhichQuestion.Id] = usrEnteredAnswerOpt;
                    if (!$scope.isCalledFirstTime ) {
                        $scope.decisionTreeLaunchedQuestion[forWhichQuestion.Id] = usrEnteredAnswerOpt;
                        $scope.isCalledFirstTime = true;
                    }
                }
                $scope.decisionTreeQuestion = mainappservice.decisionTreeOpenWindow(usrEnteredAnswerOpt, forWhichQuestion, $scope.questionNamewithQuestionTemplate, $scope.resultQuestionNamewithQuestionTemplate);
                $scope.decisionTreeStartQuestionId = forWhichQuestion.Id;

                if ($scope.decisionTreeQuestion.ExAM__Question_Type__c == 'Result' ) {
                    $scope.populateDefaultValuesForResultTemplate( $scope.decisionTreeQuestion.Id );
                }
            }
            $scope.closeDecisionTreePopUp = function() {
                $('.DecisionTree').addClass('slds-modal__close');
                $('.DecisionTree').removeClass('slds-fade-in-open');
                $scope.DecisionTreeresponse = {};
                if (angular.isDefined($scope.response[$scope.decisionTreeStartQuestionId])) {
                    delete $scope.response[$scope.decisionTreeStartQuestionId];
                }
            }
            $scope.renderNextQuestionInDecisionTree = function(usrEnteredAnswerOpt, forWhichQuestion) {
                if (angular.isDefined(usrEnteredAnswerOpt)) {

                    $scope.nextQuestObj = mainappservice.decisionTreeNextQuestion(usrEnteredAnswerOpt, forWhichQuestion, $scope.questionNamewithQuestionTemplate, $scope.resultQuestionNamewithQuestionTemplate, $scope.previousQuestion);
                    if ($scope.nextQuestObj.hasNextQuestion) {

                        $scope.previousQuestion = $scope.nextQuestObj.previousQuestion;
                        $scope.decisionTreeQuestion = $scope.nextQuestObj.decisionTreeQuestion;

                        if ($scope.decisionTreeQuestion.ExAM__Question_Type__c == 'Result' ) {
                            $scope.populateDefaultValuesForResultTemplate( $scope.decisionTreeQuestion.Id );
                        }
                    }
                    else {

                        //Added on 14-06-2016 for Related Decision Tree chain functionality
                        $scope.saveChosenAnswerOptionInDecisionTreeQuestions(forWhichQuestion, 'SAVE');
                    }
                }
            }
            $scope.previousQuestion = function(decisionTree_QuestionName) {
                if ($scope.previousQuestion != null && $scope.previousQuestion[decisionTree_QuestionName] != null) {
                    $scope.decisionTreeQuestion = $scope.previousQuestion[decisionTree_QuestionName];                    
                }
            }
            //Moved Decision Tree Answers save functionality invocation to service on 14-06-2016
            $scope.saveChosenAnswerOptionInDecisionTreeQuestions = function(resultQuestion, isSubmit) {

                $('.DecisionTree').addClass('slds-modal__close');
                $('.DecisionTree').removeClass('slds-fade-in-open');

                mainappservice.saveDecisionTreeAnswersInBackEnd($scope.DecisionTreeresponse, $scope.currentASMIdStr, $scope.createdAnswerRecordIdForResultTemplate, $scope.sectionAndQuestionTemplateObj, $scope.response, $scope.decisionTreeLaunchedQuestion).then(function(answerData) {

                    $scope.sectionAndQuestionTemplateObj = answerData.sectionAndQuestionTemplateObj;
                    $scope.response = answerData.response;
                    $scope.decisionTreeLaunchedQuestion = {};
                    $scope.isCalledFirstTime = false;
                    mainappservice.saveUploadedFilesAsAttachments(answerData.createdAnswers, $scope.photo).then(function(fileUploadResponse) {

                        $scope.DecisionTreeresponse = {};
                        $scope.photo = {};
                        $scope.signImage = {};
                        $scope.decisionTreeQuesIdwithAnswerIdObj = _.extend($scope.decisionTreeQuesIdwithAnswerIdObj, answerData.createdAnswers);
                        //Added on 14-06-2016 for Related Decision Tree chain functionality
                        if ( isSubmit == 'SAVE AND CONTINUE' &&
                             angular.isDefined(resultQuestion.ExAM__Next_Question__c) && 
                             angular.isDefined(answerData.createdAnswers[resultQuestion.Id])
                        ) {
                            $scope.createdAnswerRecordIdForResultTemplate = answerData.createdAnswers[resultQuestion.Id];
                            $scope.openDecisionTreePopUp($scope.createdAnswerRecordIdForResultTemplate, resultQuestion);
                        }
                        else {
                            $scope.createdAnswerRecordIdForResultTemplate = '';
                        }
                    },
                    function(fileUploadError) {
                        console.log(fileUploadError);
                    });
                },
                function(answererror) {
                    $scope.showErrMessage = true;
                    $scope.errMessage = answererror;                            
                }); 
            }
            $scope.populateDefaultValuesForResultTemplate = function(resultTemplateId) {

                /**
                    Below line added on 24-08-2016 to set question template id for DecisionTreeresponse
                    if there is no value given for any of the visible fields in Result Question
                **/
                $scope.DecisionTreeresponse[resultTemplateId+'~~'+'ExAM__Question_Template__c'] = resultTemplateId;

                if (angular.isDefined($scope.resultQuestionIdDefaultVal[resultTemplateId]) ) {
                    angular.forEach($scope.resultQuestionIdDefaultVal[resultTemplateId], function(value, key) {
                        if ( ($scope.DecisionTreeresponse[resultTemplateId+'~~'+key] == '')
                             || ($scope.DecisionTreeresponse[resultTemplateId+'~~'+key] == null)
                             || ($scope.DecisionTreeresponse[resultTemplateId+'~~'+key] == undefined)
                        ) {
                            $scope.DecisionTreeresponse[resultTemplateId+'~~'+key] = value;
                        }
                    });
                }
                //console.log(':::',$scope.DecisionTreeresponse);
            }
            /** End Decision Tree Functionality Related Method Invocation **/

            $scope.openWithPrimaryAM = function(selectedAMVal) {
                $scope.primaryAMcls = false;
                if (selectedAMVal != null && selectedAMVal != '') {
                    window.open('/apex/ExAM__MultipleInspectionAssessmentViewer?amid='+selectedAMVal,'_self');
                } else {
                    $scope.primaryAMcls = true;
                }
                
            }
            $scope.createNewPrimaryAssignmentManager = function (primaryTemplateId, template_type, relatedmanagerid, assessableField_API, assessableRecordId) {
                $scope.isDisable = true;
                $scope.primaryAMCreateErrMsg = '';                            

                ExAM.MultipleInspectionAssessmentViewCtrller.createNewPrimaryAM(primaryTemplateId, template_type, relatedmanagerid, assessableField_API, assessableRecordId,function(result, event) {
                    if (event.status) {
                        var s = JSON.parse(result.replace(/(&quot\;)/g,"\""));
                        if (s.code) {
                            window.open('/apex/ExAM__MultipleInspectionAssessmentViewer?amid='+s.msg,'_self');
                            $scope.isDisable = false;
                        } else {
                            $scope.isDisable = false;
                            $scope.primaryAMCreateErrMsg = s.errMsg;                            
                        }
                    } else {
                        $scope.isDisable = false;
                        console.log (result);
                    }
                });
                
            }
            $scope.imageTypeQues = function(usrSelectImageQuestion, usrSelectImage, $event, imgArr) {

                var option = mainappservice.imageTypeQuesAnswer(usrSelectImageQuestion, usrSelectImage, $event, imgArr);
                
                $scope.response[usrSelectImageQuestion.Id] = option.optionText;
                $scope.selectImage = option.optionImage;
            }

            /**
                Added on 23-06-2016 for Implementing Dependent Questions Functionality
            **/
            $scope.nextDependentQuestion = {};

            /**
                Added on 23-06-2016 for Implementing Dependent Questions Functionality
                Code Below calls the function in service which queries all the dependent question template
                below the section templates under assessment template.
            **/
            mainappservice.queryDependentQuestions($scope.currentASMAssesssmentTemplateTdStr).then(function(data){

                $scope.dependentQuestionsObj = data.dependentQuestionsObj;
                mainappservice.queryImageQuestionTypeAttachments( data.attachmentIds ).then(function(queriedAttData){
                    $scope.dependentQuestionsAttObj = queriedAttData;
                },
                function(attErrData) {
                });

            },function(data){
            });

            /**
                Added on 23-06-2016 for Implementing Dependent Questions Functionality
                Code Below returns the dependent question for current question
            **/
            $scope.returnRelatedDependentQuestion = function(forWhichQuestion, selectedAnswer) {

                mainappservice.returnDependentQuestion( forWhichQuestion, selectedAnswer, $scope.dependentQuestionsObj ).then(function(queriedDependentQuestionData){
                    $scope.nextDependentQuestion[forWhichQuestion.Id] = queriedDependentQuestionData;
                },
                function(dependentQuestionErrData) {
                });
            }
            //Added on 01-07-2016 for Button Question Type Selected Options
            $scope.setSelectedOption = function(forWhichQuestion, selOption, options, fromDecisionTree) {
                $scope.isSelectBtnOptn[forWhichQuestion.Id] = true;
                for(var i=0;i<options.length;i++) {
                    var btnId = i+forWhichQuestion.Id;
                    if (options[i] == selOption) {
                        document.getElementById(btnId).style.border = '1px solid black';
                        document.getElementById(btnId).style.backgroundColor = 'lightblue';
                    }
                    else {
                        document.getElementById(btnId).style.border = 'none';
                        document.getElementById(btnId).style.backgroundColor = '';
                    }
                }
                if(fromDecisionTree || angular.isDefined(forWhichQuestion.ExAM__Next_Question__c)) {
                    $scope.DecisionTreeresponse[forWhichQuestion.Id] = selOption;
                    if (!$scope.isCalledFirstTime ) {
                        $scope.decisionTreeLaunchedQuestion[forWhichQuestion.Id] = selOption;
                        $scope.isCalledFirstTime = true;
                    }
                } else {
                    $scope.response[forWhichQuestion.Id] = selOption;
                }
            }
            //Added on 01-07-2016 for Knowledge article link
            $scope.openLink = function(link) {
                if(link.indexOf('http') > -1 || link.indexOf('https') > -1) {
                    window.open(link,'_blank');
                } else {
                     window.open('https://'+link,'_blank');
                }
                 
            }
            //Added on 26/07/2016 for Question type 'File
            $scope.answerFile  = function(Id,option){
                $scope.ansFileId = Id;
                $scope.ansFileOption = option;
            }
            $scope.fileChanged = function(ele) {
                var files = ele.files;
                var l = files.length; 
                if(l > 0) {
                   $scope.response[$scope.ansFileId] = $scope.ansFileOption;
                }
            }
            
            //Related to hotspot image
            $scope.init = function () {
                var tempThis = {};
                $timeout(function(){
                    $('.map').maphilight({strokeColor:'808080',strokeWidth:0,fillColor:'00cd27'});
                    //map clicks
                    $(".tabs area").click(function(){
                       
                       //This block is what creates highlighting by trigger the "alwaysOn", 
                       
                       //var data = $(this).data('maphilight') || {};
                     //  data.alwaysOn = !data.alwaysOn;
                      // $(this).data('maphilight', data).trigger('alwaysOn.maphilight'); 
                       
                       
                       var data = $(this).data('maphilight') || {};
                       data.alwaysOn = true;
                       $(this).data('maphilight', data).trigger('alwaysOn.maphilight');
                       data.alwaysOn = false;
                       
                       if(typeof tempThis === "undefined" && tempThis != $(this)){
                           tempThis.data('maphilight', data).trigger('alwaysOn.maphilight'); 
                       }
                       tempThis =  $(this); 
                        
                       //there is also "neverOn" in the docs, but not sure how to get it to work
                                  
                             
                       if ($(this).hasClass("current") == false)
                       {
                           var thisTarget = $(this).attr("href");
                                                                   
                           $(this).parents(".tabs").find('area.current').removeClass('current');
                                    
                           $(this).addClass('current');
                                        
                           $(this).parents(".tabs").nextAll(".tab-content").children(":visible").fadeOut(1, function() {
                               $(thisTarget).fadeIn("fast");
                           });
                    
                       }
                       return false; 
                  }); 
                },750);  
            }
            $scope.ListQuestionType = function(option,qId) {
                 
                 $scope.response[qId] = option;
            } 
        });
        app.controller('siteController', function($scope, mainappservice,_,$timeout) {

            $scope.assignmentManagerObj = [];
            $scope.acctObj = [];
            $scope.configRecord = [];
            $scope.inputObj = [];
            $scope.sectionAndQuestionTemplateObj = [];
            $scope.sectionAndQuestionTemplateObjForCurrentASM = [];
            $scope.currentASMIdStr = '{!currentASMId}';
            $scope.currentASMAssesssmentTemplateTdStr = '{!currentASMAssessmentTemplateId}';
            $scope.showASMSection = true;
            $scope.showAccountSection = true;
            $scope.showSectionQuestions = false;
            $scope.showASMTable = true;
            $scope.showAcctTable = true;
            $scope.photoQuestionId = '';
            $scope.selecteQuestionId = '';
            $scope.response = {};
            $scope.comment = {};
            $scope.photo = {};
            $scope.errMessage = '';
            $scope.searchManagerText = '';
            $scope.searchAcctText = '';
            $scope.showPgMessage = false;
            $scope.showErrMessage = false;
            $scope.hasAnswersExistsForUnitTemplate = 'false';
            $scope.selectedAnswerVal = '';
            $scope.errorFlag = false;
            $scope.selectedAcctId = '';
            $scope.checkedManagerId = '';
            $scope.checkedManagerName = '';
            $scope.selectedManagerId = '';
            $scope.thistabname = '{!$Label.Related_Assessment_Type_1}';
            $scope.relatedmanagerid = '';
            $scope.relatedmanagername = '';
            $scope.setPgMsgColor = 'red';
            $scope.assessableObjectList = [];
            if ( '{!JSENCODE(assRecClsListJSON)}' != null && '{!JSENCODE(assRecClsListJSON)}' != '' && '{!JSENCODE(assRecClsListJSON)}' != 'null') {
                $scope.assessableObjectList = JSON.parse('{!JSENCODE(assRecClsListJSON)}');
            }

            /** Variables For Decision Tree Functionality **/
            $scope.DecisionTreeresponse = {};
            $scope.decisionTreeQuestion = {};
            $scope.previousQuestion = {};            
            $scope.questionsList = [];
            $scope.questionNamewithQuestionTemplate = {};
            $scope.resultQuestionNamewithQuestionTemplate = {};
            
            $scope.decisionTreeStartQuestionId = '';
            $scope.decisionTreeResultTemplate = [];
            $scope.unitDetail = false;
            
            //Added on 14-06-2016 for Related Decision Tree chain functionality
            $scope.createdAnswerRecordIdForResultTemplate = '';

            //Added on 19-07-2016 to store question which launches Decision Tree
            $scope.decisionTreeLaunchedQuestion = {};
            $scope.isCalledFirstTime = false;

            /** 
                Variable to display error message when there are no section templates below the given
                Assessment template
            **/
            $scope.hasSectionTemplates = true;
            $scope.isSelectBtnOptn = {};
            $scope.fileAttach = {};
            $scope.responseFile ={};
            
            <!--added on 20-09-2016-->
            var signature;
            $scope.signImage = {};
            $scope.signAnsOption = '';
            $scope.ansFileOption = '';
            $scope.ansFileId = '';
            
            $scope.showQuestionName_on_DecisionTree = {!show_Question_Name_on_Decision_Tree};
            $('.maskDiv, .slds-spinner--small').show();
            $scope.$on('questionListSet1', function(event,arg) {
                
                $scope.sectionAndQuestionTemplateObj = arg.param1;
                $('.maskDiv, .slds-spinner--small').hide();
                $scope.showErrMessage = false;
            });

            $scope.showImageUploadIcon = false;
            $scope.showCommentsIcon = false;
            $scope.showClearIcon = false;
            $scope.showQuesNumIcon = true;
            $scope.caseResponse = {};
            $scope.decisionTreeQuesIdwithAnswerIdObj = {};

            mainappservice.queryReqdInputJS($scope.currentASMIdStr).then(function(data){

                if (data.hasActionSuccess === true) {

                    $('.maskDiv, .slds-spinner--small').hide();
                    $scope.inputObj = data.inputObj;
                    if (angular.isDefined(data.inputObj.ASMListForUnitAssessmentTemplate) && angular.isDefined(data.inputObj.ASMListForUnitAssessmentTemplate[0].ExAM__Related_Assignment_Manager1__c)) {

                        $scope.toggleQuestionNumberAndIconVisibility( data.inputObj.ASMListForUnitAssessmentTemplate[0].ExAM__Related_Assignment_Manager1__r.ExAM__InvestigationType__r );

                        $scope.relatedmanagerid = data.inputObj.ASMListForUnitAssessmentTemplate[0].ExAM__Related_Assignment_Manager1__c;
                        $scope.relatedmanagername = data.inputObj.ASMListForUnitAssessmentTemplate[0].ExAM__Related_Assignment_Manager1__r.Name;
                        $scope.showASMTable = false;
                        $scope.showAccountSection = false;
                        $scope.newASMId = data.inputObj.ASMListForUnitAssessmentTemplate[0].ExAM__Related_Assignment_Manager1__c;
                        $scope.showPgMessage = true;

                        if ($scope.relatedmanagerid != null) {
                            $scope.showSectionQuestions = true;
                            $scope.$parent.Related_Assessment_Type_1_Template = data.inputObj.examConfigurationRecord.ExAM__Related_Assessment_Type_1_Template__c;
                            $scope.$parent.relatedmanager_1_id = $scope.relatedmanagerid;
                        }

                    }
                    $scope.assignmentManagerObj = data.inputObj.ASMListForSiteAssessmentTemplate;
                    $scope.acctObj = data.inputObj.acctList;
                    $scope.configRecord = data.inputObj.examConfigurationRecord;                    

                    if ( angular.isDefined($scope.configRecord) ) {

                        if ( angular.isDefined($scope.configRecord.ExAM__Related_Assessment_Type_1_Template__c) ) {

                            //Code Below sets the configured Result Template Fields for Current Assessment Template
                            mainappservice.callConstructDecisionTreeTemplateActn($scope.configRecord.ExAM__Related_Assessment_Type_1_Template__c).then(function(resultTemplateData){

                                $scope.decisionTreeResultTemplate = resultTemplateData;

                                /**
                                    Code Below calls the function in service which queries all the question template
                                    below the section template of current assessment template
                                **/
                                mainappservice.queryQuestionTemplatesForCurrentActiveTab($scope.configRecord.ExAM__Related_Assessment_Type_1_Template__c, $scope.decisionTreeResultTemplate).then(function(questionTemplateData){

                                    if (questionTemplateData.hasActionSuccess === true) {

                                        $scope.questionNamewithQuestionTemplate = questionTemplateData.questionNameAndTemplateJsonString;
                                        $scope.resultQuestionNamewithQuestionTemplate = questionTemplateData.resultNameAndTemplateJsonString;
                                        $scope.resultQuestionIdDefaultVal = questionTemplateData.resultQuestionIdDefaultVal;
                                    }
                                },function(errorData){
                                    console.log(errorData);
                                });

                            }, function(errorData){
                                console.log(errorData);
                            });

                            /**
                                Added on 23-06-2016 for Implementing Dependent Questions Functionality
                                Code Below calls the function in service which queries all the dependent question template
                                below the section templates under assessment template.
                            **/
                            mainappservice.queryDependentQuestions($scope.configRecord.ExAM__Related_Assessment_Type_1_Template__c).then(function(data){

                                $scope.dependentQuestionsObj = data.dependentQuestionsObj;
                                mainappservice.queryImageQuestionTypeAttachments( data.attachmentIds ).then(function(queriedAttData){
                                    $scope.dependentQuestionsAttObj = queriedAttData;
                                },
                                function(attErrData) {
                                });

                            },function(data){
                            });
                        }
                    }
                } else {
                    $('.maskDiv, .slds-spinner--small').hide();
                    $scope.showErrMessage = true;
                    $scope.errMessage = 'Remote Method Invocation Failed';
                }
            },function(errordata){

                $('.maskDiv, .slds-spinner--small').hide();           
                $scope.showErrMessage = true;
                $scope.errMessage = 'Remote Method Invocation Failed';
            });


            $scope.linkSelectedManager = function() {

                $('.asmIdBox').each(function() {

                    if($(this).prop('checked')) {

                        $scope.checkedManagerId = $(this).val().split('~')[0];
                        $scope.checkedManagerName = $(this).val().split('~')[1];
                        $scope.selectedManagerId = $scope.checkedManagerId;
                    }
                });

                if ($scope.selectedManagerId.length > 0) {

                    $('.maskDiv, .slds-spinner--small').show();
                    mainappservice.linkSelectedManagerJS($scope.currentASMIdStr, $scope.selectedManagerId, '{!$Label.Related_Assessment_Type_1}').then(function(data){
        
                        if (data.showErrMessage && !data.hasActionSuccess) {
        
                            $('.maskDiv, .slds-spinner--small').hide();
                            $scope.showErrMessage = data.showErrMessage;
                            $scope.errMessage = data.errMessage;
                        }
                        else if (data.hasActionSuccess === true) {
        
                            $('.maskDiv, .slds-spinner--small').hide();
                            $scope.showASMTable = data.showASMTable;
                            $scope.showAccountSection = false;
                            if ($scope.checkedManagerId.length > 0 && $scope.checkedManagerName.length > 0) {
                                $scope.relatedmanagerid = $scope.checkedManagerId;
                                $scope.relatedmanagername = $scope.checkedManagerName;
                                $scope.showPgMessage = true;
                                $scope.$parent.Related_Assessment_Type_1_Template = $scope.configRecord.ExAM__Related_Assessment_Type_1_Template__c;
                                $scope.$parent.relatedmanager_1_id = $scope.checkedManagerId;
                            }
                            $scope.showErrMessage = data.showErrMessage;
                            $scope.errMessage = data.errMessage;
                            $scope.searchManagerText = data.searchManagerText;

                            //start of Show questions.
                            $scope.showSectionQuestions = true;
                            mainappservice.queryQuestionTemplates($scope.configRecord.ExAM__Related_Assessment_Type_1_Template__c, $scope.selectedManagerId).then(function(questTemplateData){

                                if (questTemplateData.hasActionSuccess === true) {

                                    $('.maskDiv, .slds-spinner--small').hide();
                                    $scope.sectionAndQuestionTemplateObj = questTemplateData.inputObj;
                                    $scope.newASMId = $scope.relatedmanagerid;
                                    $scope.toggleQuestionNumberAndIconVisibility( questTemplateData.inputObj[0].assessmentTemplateRecord );
                                } else {
                                    $('.maskDiv, .slds-spinner--small').hide();
                                }
                            },function(errrdata2){

                                $('.maskDiv, .slds-spinner--small').hide();           
                                $scope.showErrMessage = true;
                                $scope.errMessage = 'Remote Method Invocation Failed';
                            });
                            //End of Show questions.
                        }
                    },function(errrdata){
        
                        $('.maskDiv, .slds-spinner--small').hide();
                        $scope.showErrMessage = errrdata.showErrMessage;
                        $scope.errMessage = errrdata.errMessage;
                    });
                }
                else {

                    $scope.showErrMessage = true;
                    $scope.errMessage = 'Please select a radio button to proceed';
                }
            }
               
            $scope.createNewASManager = function() {

           
                if ($scope.selectedAcctId.length > 0) {

                    $('.maskDiv, .slds-spinner--small').show();
                    mainappservice.createNewASManagerJS($scope.currentASMIdStr, $scope.selectedAcctId, $scope.configRecord.ExAM__Related_Assessment_Type_1_Template__c, '{!$Label.Related_Assessment_Type_1}').then(function(data){
        
                        if (data.showErrMessage && !data.hasActionSuccess) {
        
                            $('.maskDiv, .slds-spinner--small').hide();
                            $scope.showErrMessage = data.showErrMessage;
                            $scope.errMessage = data.errMessage;
                            $scope.showASMSection = data.showASMSection;
                            $scope.showAccountSection = data.showAccountSection;
                            $scope.showSectionQuestions = data.showSectionQuestions;
                        }
                        else if (data.hasActionSuccess === true) {
        
                            $('.maskDiv, .slds-spinner--small').hide();
                            $scope.sectionAndQuestionTemplateObj = data.questionTemplateObj;
                            if ( $scope.sectionAndQuestionTemplateObj.length == 0 ) {
                                $scope.hasSectionTemplates = false;
                            }
                            $scope.assessmentTemplateId = data.assessmentTemplateId;
                            $scope.newASMId = data.newASMId;
                            $scope.$parent.Related_Assessment_Type_1_Template = $scope.configRecord.ExAM__Related_Assessment_Type_1_Template__c;
                            $scope.$parent.relatedmanager_1_id = data.newASMId;

                            /** Code Below binds newly created Assignment Manager Id and Name to page message **/
                            $scope.relatedmanagerid = data.newASMId;
                            $scope.relatedmanagername = data.newASMName;
                            $scope.showPgMessage = true;
                            $scope.showAcctTable = false;

                            $scope.showASMSection = data.showASMSection;
                            $scope.showAccountSection = data.showAccountSection;
                            $scope.showSectionQuestions = data.showSectionQuestions;
                            $scope.showErrMessage = false;
                            $scope.toggleQuestionNumberAndIconVisibility( data.questionTemplateObj[0].assessmentTemplateRecord );
                            $scope.init();
                        }
                    },function(erordata){
        
                        $('.maskDiv, .slds-spinner--small').hide();
                        $scope.showErrMessage = erordata.showErrMessage;
                        $scope.errMessage = erordata.errMessage;
                        $scope.showASMSection = erordata.showASMSection;
                        $scope.showAccountSection = erordata.showAccountSection;
                        $scope.showSectionQuestions = erordata.showSectionQuestions;
                    });
                }
                else {

                    $scope.showErrMessage = true;
                    $scope.errMessage = 'Please select a accessable record to proceed';
                }
            }

            $scope.saveUsrEnteredAnswerOptions = function(isSubmit) {

                mainappservice.doReqdFieldValidation($scope.response,$scope.isSelectBtnOptn,$scope.selectImage, isSubmit, $scope.signImage).then(function(validateSuccessResponse) {

                    if (validateSuccessResponse != 'Skip Validation') {
                        $.each(validateSuccessResponse, function(key, value) {
                            if ($scope.response[key]) {
                                $scope.response[key] = value;
                            }
                        });
                    }

                    $scope.setPgMsgColor = 'red';
                    $('.maskDiv, .slds-spinner--small').show();

                    mainappservice.saveUsrEnteredAnswers($scope.response,$scope.responseFile,$scope.fileAttach, $scope.comment, $scope.photo,$scope.signImage, $scope.configRecord.ExAM__Related_Assessment_Type_1_Template__c, $scope.newASMId, '{!$Label.Related_Assessment_Type_1}', isSubmit, $scope.sectionAndQuestionTemplateObj,$scope.caseResponse,$scope.decisionTreeQuesIdwithAnswerIdObj).then(function(data){
        
                        if (data.showErrMessage && !data.hasActionSuccess) {

                            $scope.showErrMessage = data.showErrMessage;
                            $scope.errMessage = data.errMessage;                            
                            $('.maskDiv, .slds-spinner--small').hide();
                        } else if (!data.showErrMessage && data.hasActionSuccess) {

                            $('.maskDiv, .slds-spinner--small').hide();
                            $scope.setPgMsgColor = 'green';
                            $scope.showErrMessage = true; // setting this variable as true to show success message
                            $scope.errMessage = data.errMessage;
                            $scope.selectedAcctId = '';
                            $scope.searchAcctText = '';
                            $scope.showSectionQuestions = data.showSectionQuestions;                            
                            $scope.showAcctTable = false;                            

                            //Added on 01-07-2016 for Answered icon
                            $scope.sectionAndQuestionTemplateObj = data.sectionAndQuestionTemplateObj;

                            //clear all variables after answer save happens successfully in backend
                            $scope.response = {};
                            $scope.comment = {};
                            $scope.photo = {};
                            $scope.signImage = {};
                            $scope.nextDependentQuestion = {};
                            $scope.selectImage = {};
                            $scope.isSelectBtnOptn = {};
                            $scope.fileAttach = {};
                            $scope.responseFile = {};
                            angular.element("input[type='file']").val(null);
                            $scope.init();
                            $scope.initOfUnitTab();
                            $scope.caseResponse = {};
                            $scope.decisionTreeQuesIdwithAnswerIdObj = {};
                            $('.liClass').removeClass('slds-is-selected');
                        } 
                    },function(answerSaveError){
                        
                        $('.maskDiv, .slds-spinner--small').hide();
                        $scope.showErrMessage = answerSaveError.showErrMessage;
                        $scope.errMessage = answerSaveError.errMessage;
                    });
                },
                function(validateErrorResponse) {
                    return null;
                });
            }

            /* Render Assignment Manager Table Based on Search text */
            $scope.querySelectedAssignmentManager = function() {
            
                $scope.showErrMessage = false;
                $scope.errMessage = '';

                if ($scope.searchManagerText.length > 0) {
            
                    $scope.showASMTable = true;
                }
                else {

                    $scope.showErrMessage = true;
                    $scope.errMessage = 'Please enter an assignment manager';
                }
            }
            
            /* Render Account Table Based on Search text */
            $scope.querySelectedAccount = function() {
            
                $scope.showErrMessage = false;
                $scope.errMessage = '';

                if ($scope.searchAcctText.length > 0) {
                    $scope.showAcctTable = true;
                }
                else {

                    $scope.showErrMessage = true;
                    $scope.errMessage = 'Please enter a account name';
                }
            }

            /* Reset Search Variable */
            $scope.resetSearchVariable = function(searchWhichEntity) {

                if (searchWhichEntity == 'fromASMSearchBox') {

                    $scope.searchManagerText = '';
                    $scope.showASMTable = false;
                }
                else if (searchWhichEntity == 'fromAccountSearchBox') {

                    $scope.searchAcctText = '';
                    $scope.showAcctTable = false;
                }
            }

            $scope.splitOptions = function(strOption) {

                return mainappservice.splitAvailableAnswerOptions(strOption);
            }

            $scope.opencomment = function(selQuestionId) {                
                $scope.selecteQuestionId = selQuestionId;
                mainappservice.opencommentBox();
            }
            $scope.closecomment = function() {
                mainappservice.closecommentBox();
            }
            $scope.savecomment = function() {    
                mainappservice.savecommentBox();
            }

            $scope.openPhotoUpload = function(selQuestionId) {
                document.getElementById('fid').value = '';                 
                $scope.photoQuestionId = selQuestionId;
                mainappservice.openPhotoUploadBox();
            }            
            $scope.closePhotoUpload = function() {
                mainappservice.closePhotoUploadBox();
            }
            $scope.savePhoto = function() {
                mainappservice.savePhotoBox();
            }
            $scope.openAssignmentManagerRecord = function() {

                window.location.href = '/'+$scope.relatedmanagerid;
            }
            $scope.resetChosenAnswerForThisQuestionTemplate = function(selQuestionId,type) {

                if (angular.isDefined($scope.response[selQuestionId]) && type != '' && type == 'ListQType') {
                    $('#listQT'+selQuestionId).removeClass('slds-is-selected');
                    delete $scope.response[selQuestionId];
                } else {
                    delete $scope.response[selQuestionId];
                }
            }
            <!--added on 20-09-2016-->
            $scope.openSignatureModal = function(selectQuestionId,option) {
                $scope.chooseQuesId = selectQuestionId;
                if(option){
                    $scope.signAnsOption = option;
                }else{
                    $scope.signAnsOption = 'NoData';
                }
                $scope.tempsignAnsOption = null;
                
                $timeout(function(){
                    mainappservice.openSignModal();
                    var canvas = document.getElementById(selectQuestionId);
                    var context = canvas.getContext('2d');
                    signature = new SignaturePad(canvas, {
                        backgroundColor: 'rgba(255, 255, 255, 0)',
                        penColor: 'rgb(0, 0, 0)'
                    });
                    if($scope.signImage[$scope.chooseQuesId]){
                        var imageObj = new Image();
    
                        imageObj.onload = function() {
                          context.drawImage(imageObj, 0, 0);
                        };
                        imageObj.src = $scope.signImage[$scope.chooseQuesId];
                    }else{
                        $scope.canvasClick = false;
                    }
                },500);
            }
            $scope.closeSign = function(){
                $scope.signAnsOption = null;
                $scope.tempsignAnsOption = null;
                mainappservice.closeSignModal();
            }
            $scope.clearSign = function(){
                signature.clear();
                $scope.tempsignAnsOption = angular.copy($scope.signAnsOption);
                $scope.signAnsOption = null;
            };
            $scope.canvasClickfun1 = function(){
                $scope.canvasClick = true;
                if($scope.tempsignAnsOption){
                    $scope.signAnsOption = $scope.tempsignAnsOption;
                }
            }
            $scope.saveSign = function(){
              
                if($scope.signAnsOption && $scope.canvasClick){
                    $scope.signImage[$scope.chooseQuesId] = signature.toDataURL('image/png');
                    if($scope.signAnsOption == 'NoData'){
                        $scope.response[$scope.chooseQuesId] = '';
                    }else{
                        $scope.response[$scope.chooseQuesId] = $scope.signAnsOption;
                    }
                    
                } else {
                    delete $scope.signImage[$scope.chooseQuesId];
                    delete $scope.response[$scope.chooseQuesId];
                }
                signature.clear();
                mainappservice.closeSignModal();
            };
            
            //This Function relared to Hotspot image type question
            $scope.hotspotInit = function(hotspotProperties) {
                if (hotspotProperties != null && hotspotProperties != '') {
                    return JSON.parse(_.unescape(hotspotProperties));
                } else {
                    return null;
                }
            }
            /** Start Decision Tree Functionality Related Method Invocation **/
            $scope.openDecisionTreePopUp = function(usrEnteredAnswerOpt, forWhichQuestion) {
                if (forWhichQuestion.ExAM__Question_Type__c != 'Result') {
                    $scope.DecisionTreeresponse[forWhichQuestion.Id] = usrEnteredAnswerOpt;
                    if (!$scope.isCalledFirstTime ) {
                        $scope.decisionTreeLaunchedQuestion[forWhichQuestion.Id] = usrEnteredAnswerOpt;
                        $scope.isCalledFirstTime = true;
                    }
                }
                $scope.decisionTreeQuestion = mainappservice.decisionTreeOpenWindow(usrEnteredAnswerOpt, forWhichQuestion, $scope.questionNamewithQuestionTemplate, $scope.resultQuestionNamewithQuestionTemplate);
                $scope.decisionTreeStartQuestionId = forWhichQuestion.Id;

                if ($scope.decisionTreeQuestion.ExAM__Question_Type__c == 'Result' ) {
                    $scope.populateDefaultValuesForResultTemplate( $scope.decisionTreeQuestion.Id );
                }
            }
            $scope.closeDecisionTreePopUp = function() {
                $('.DecisionTree').addClass('slds-modal__close');
                $('.DecisionTree').removeClass('slds-fade-in-open');
                $scope.DecisionTreeresponse = {};
                if (angular.isDefined($scope.response[$scope.decisionTreeStartQuestionId])) {
                    delete $scope.response[$scope.decisionTreeStartQuestionId];
                }
            }
            $scope.renderNextQuestionInDecisionTree = function(usrEnteredAnswerOpt, forWhichQuestion) {

                if (angular.isDefined(usrEnteredAnswerOpt)) {

                    $scope.nextQuestObj = mainappservice.decisionTreeNextQuestion(usrEnteredAnswerOpt, forWhichQuestion, $scope.questionNamewithQuestionTemplate, $scope.resultQuestionNamewithQuestionTemplate, $scope.previousQuestion);
                    if ($scope.nextQuestObj.hasNextQuestion) {

                        $scope.previousQuestion = $scope.nextQuestObj.previousQuestion;
                        $scope.decisionTreeQuestion = $scope.nextQuestObj.decisionTreeQuestion;

                        if ($scope.decisionTreeQuestion.ExAM__Question_Type__c == 'Result' ) {
                            $scope.populateDefaultValuesForResultTemplate( $scope.decisionTreeQuestion.Id );
                        }
                    }
                    else {

                        //Added on 14-06-2016 for Related Decision Tree chain functionality
                        $scope.saveChosenAnswerOptionInDecisionTreeQuestions(forWhichQuestion, 'SAVE');
                    }
                }
            }
            $scope.previousQuestion = function(decisionTree_QuestionName) {
                if ($scope.previousQuestion != null && $scope.previousQuestion[decisionTree_QuestionName] != null) {
                    $scope.decisionTreeQuestion = $scope.previousQuestion[decisionTree_QuestionName];                   
                }
            }
            //Moved Decision Tree Answers save functionality invocation to service on 14-06-2016
            $scope.saveChosenAnswerOptionInDecisionTreeQuestions = function(resultQuestion, isSubmit) {

                $('.DecisionTree').addClass('slds-modal__close');
                $('.DecisionTree').removeClass('slds-fade-in-open');

                mainappservice.saveDecisionTreeAnswersInBackEnd($scope.DecisionTreeresponse, $scope.relatedmanagerid, $scope.createdAnswerRecordIdForResultTemplate, $scope.sectionAndQuestionTemplateObj, $scope.response, $scope.decisionTreeLaunchedQuestion).then(function(answerData) {

                    $scope.sectionAndQuestionTemplateObj = answerData.sectionAndQuestionTemplateObj;
                    $scope.response = answerData.response;
                    $scope.decisionTreeLaunchedQuestion = {};
                    $scope.isCalledFirstTime = false;

                    mainappservice.saveUploadedFilesAsAttachments(answerData.createdAnswers, $scope.photo).then(function(fileUploadResponse) {

                        $scope.DecisionTreeresponse = {};
                        $scope.photo = {};
                        $scope.decisionTreeQuesIdwithAnswerIdObj = _.extend($scope.decisionTreeQuesIdwithAnswerIdObj, answerData.createdAnswers);
                        //Added on 14-06-2016 for Related Decision Tree chain functionality
                        if ( isSubmit == 'SAVE AND CONTINUE' &&
                             angular.isDefined(resultQuestion.ExAM__Next_Question__c) && 
                             angular.isDefined(answerData.createdAnswers[resultQuestion.Id])
                        ) {
                            $scope.createdAnswerRecordIdForResultTemplate = answerData.createdAnswers[resultQuestion.Id];
                            $scope.openDecisionTreePopUp($scope.createdAnswerRecordIdForResultTemplate, resultQuestion);
                        }
                        else {
                            $scope.createdAnswerRecordIdForResultTemplate = '';
                        }
                    },
                    function(fileUploadError) {
                        console.log(fileUploadError);
                    });
                },
                function(answererror) {
                    $scope.showErrMessage = true;
                    $scope.errMessage = answererror;                            
                }); 
            }
            $scope.populateDefaultValuesForResultTemplate = function(resultTemplateId) {

                /**
                    Below line added on 24-08-2016 to set question template id for DecisionTreeresponse
                    if there is no value given for any of the visible fields in Result Question
                **/
                $scope.DecisionTreeresponse[resultTemplateId+'~~'+'ExAM__Question_Template__c'] = resultTemplateId;

                if (angular.isDefined($scope.resultQuestionIdDefaultVal[resultTemplateId]) ) {
                    angular.forEach($scope.resultQuestionIdDefaultVal[resultTemplateId], function(value, key) {
                        if ( ($scope.DecisionTreeresponse[resultTemplateId+'~~'+key] == '')
                             || ($scope.DecisionTreeresponse[resultTemplateId+'~~'+key] == null)
                             || ($scope.DecisionTreeresponse[resultTemplateId+'~~'+key] == undefined)
                        ) {
                            $scope.DecisionTreeresponse[resultTemplateId+'~~'+key] = value;
                        }
                    });
                }
                //console.log(':::',$scope.DecisionTreeresponse);
            }
            /** End Decision Tree Functionality Related Method Invocation **/

            $scope.imageTypeQues = function(usrSelectImageQuestion, usrSelectImage, $event, imgArr) {

                var option = mainappservice.imageTypeQuesAnswer(usrSelectImageQuestion, usrSelectImage, $event, imgArr);
                
                $scope.response[usrSelectImageQuestion.Id] = option.optionText;
                $scope.selectImage = option.optionImage;
            }
            /**
                Added on 23-06-2016 for Implementing Dependent Questions Functionality
            **/
            $scope.nextDependentQuestion = {};

            /**
                Added on 23-06-2016 for Implementing Dependent Questions Functionality
                Code Below returns the dependent question for current question
            **/
            $scope.returnRelatedDependentQuestion = function(forWhichQuestion, selectedAnswer) {

                mainappservice.returnDependentQuestion( forWhichQuestion, selectedAnswer, $scope.dependentQuestionsObj ).then(function(queriedDependentQuestionData){
                    $scope.nextDependentQuestion[forWhichQuestion.Id] = queriedDependentQuestionData;
                },
                function(dependentQuestionErrData) {
                });
            }
            //Added on 01-07-2016 for Button Question Type Selected Options
            $scope.setSelectedOption = function(forWhichQuestion, selOption, options, fromDecisionTree) {
                $scope.isSelectBtnOptn[forWhichQuestion.Id] = true;
                for(var i=0;i<options.length;i++) {
                    var btnId = i+forWhichQuestion.Id;
                    if (options[i] == selOption) {
                        document.getElementById(btnId).style.border = '1px solid black';
                        document.getElementById(btnId).style.backgroundColor = 'lightblue';
                    }
                    else {
                        document.getElementById(btnId).style.border = 'none';
                        document.getElementById(btnId).style.backgroundColor = '';
                    }
                }
                if(fromDecisionTree || angular.isDefined(forWhichQuestion.ExAM__Next_Question__c)) {
                    $scope.DecisionTreeresponse[forWhichQuestion.Id] = selOption;
                    if (!$scope.isCalledFirstTime ) {
                        $scope.decisionTreeLaunchedQuestion[forWhichQuestion.Id] = selOption;
                        $scope.isCalledFirstTime = true;
                    }
                } else {
                    $scope.response[forWhichQuestion.Id] = selOption;
                }
            }
            //Added on 01-07-2016 for Knowledge article link
            $scope.openLink = function(link) {
                if(link.indexOf('http') > -1 || link.indexOf('https') > -1) {
                    window.open(link,'_blank');
                } else {
                     window.open('https://'+link,'_blank');
                }
                 
            }
            //Added on 12-07-2016 to control Question Number and Icon visibility
            $scope.toggleQuestionNumberAndIconVisibility = function(template) {
                $scope.showImageUploadIcon = template.ExAM__Show_Image_Upload_Icon__c;
                $scope.showCommentsIcon = template.ExAM__Show_Notes_Icon__c;
                $scope.showClearIcon = template.ExAM__Show_Refresh_Icon__c;
                $scope.showQuesNumIcon = template.ExAM__Show_Question_Number__c;
            }
            //Added on 26/07/2016 for Question type 'File'
            $scope.answerFile  = function(Id,option){
                $scope.ansFileId = Id;
                $scope.ansFileOption = option;
            }
            $scope.fileChanged = function(ele) {
                var files = ele.files;
                var l = files.length; 
                if(l > 0) {
                   $scope.response[$scope.ansFileId] = $scope.ansFileOption;
                }
            }
            $scope.ListQuestionType = function(option,qId) {
                 
                 $scope.response[qId] = option;
            } 
        });
        app.controller('systemsController', function($scope, mainappservice,_,$timeout) {

            $scope.assignmentManagerObj = [];
            $scope.acctObj = [];
            $scope.configRecord = [];
            $scope.inputObj = [];
            $scope.sectionAndQuestionTemplateObj = [];
            $scope.sectionAndQuestionTemplateObjForCurrentASM = [];
            $scope.currentASMIdStr = '{!currentASMId}';
            $scope.currentASMAssesssmentTemplateTdStr = '{!currentASMAssessmentTemplateId}';
            $scope.showASMSection = true;
            $scope.showAccountSection = true;
            $scope.showSectionQuestions = false;
            $scope.showASMTable = true;
            $scope.showAcctTable = false;
            $scope.photoQuestionId = '';
            $scope.selecteQuestionId = '';
            $scope.response = {};
            $scope.comment = {};
            $scope.photo = {};
            $scope.errMessage = '';
            $scope.searchManagerText = '';
            $scope.searchAcctText = '';
            $scope.showPgMessage = false;
            $scope.showErrMessage = false;
            $scope.hasAnswersExistsForUnitTemplate = 'false';
            $scope.selectedAnswerVal = '';
            $scope.errorFlag = false;
            $scope.selectedAcctId = '';
            $scope.checkedManagerId = '';
            $scope.checkedManagerName = '';
            $scope.selectedManagerId = '';
            $scope.thistabname = '{!$Label.Related_Assessment_Type_2}';
            $scope.relatedmanagerid = '';
            $scope.relatedmanagername = '';
            $scope.setPgMsgColor = 'red';
            $scope.assessableObjectList = [];
            if ( '{!JSENCODE(assRecClsListJSON)}' != null && '{!JSENCODE(assRecClsListJSON)}' != '' && '{!JSENCODE(assRecClsListJSON)}' != 'null') {
                $scope.assessableObjectList = JSON.parse('{!JSENCODE(assRecClsListJSON)}');
            }
            /** Variables For Decision Tree Functionality **/
            $scope.DecisionTreeresponse = {};
            $scope.decisionTreeQuestion = {};
            $scope.previousQuestion = {};            
            $scope.questionsList = [];
            $scope.questionNamewithQuestionTemplate = {};
            $scope.resultQuestionNamewithQuestionTemplate = {};
            
            $scope.decisionTreeStartQuestionId = '';
            $scope.$on('questionListSet2', function(event,arg) {
                $scope.sectionAndQuestionTemplateObj = arg.param1;
                $('.maskDiv, .slds-spinner--small').hide();
                $scope.showErrMessage = false;
            });
            
            $scope.decisionTreeResultTemplate = [];
            $scope.unitDetail = false;

            //Added on 14-06-2016 for Related Decision Tree chain functionality
            $scope.createdAnswerRecordIdForResultTemplate = '';

            //Added on 19-07-2016 to store question which launches Decision Tree
            $scope.decisionTreeLaunchedQuestion = {};
            $scope.isCalledFirstTime = false;

            /** 
                Variable to display error message when there are no section templates below the given
                Assessment template
            **/
            $scope.hasSectionTemplates = true;
            $scope.isSelectBtnOptn = {};
            $scope.fileAttach = {};
            $scope.responseFile = {};
            <!--added on 20-09-2016-->
            var signature;
            $scope.signImage = {};
            $scope.signAnsOption = '';
            $scope.ansFileOption ='';
            $scope.ansFileId ='';
            
            $scope.showQuestionName_on_DecisionTree = {!show_Question_Name_on_Decision_Tree};
            
            $('.maskDiv, .slds-spinner--small').show();

            $scope.showImageUploadIcon = false;
            $scope.showCommentsIcon = false;
            $scope.showClearIcon = false;
            $scope.showQuesNumIcon = true;
            $scope.caseResponse = {};
            $scope.decisionTreeQuesIdwithAnswerIdObj = {};
            mainappservice.queryReqdInputJS($scope.currentASMIdStr).then(function(data){

                if (data.hasActionSuccess === true) {

                    $('.maskDiv, .slds-spinner--small').hide();
                    $scope.inputObj = data.inputObj;
                    if (angular.isDefined(data.inputObj.ASMListForUnitAssessmentTemplate) && angular.isDefined(data.inputObj.ASMListForUnitAssessmentTemplate[0].ExAM__Related_Assignment_Manager2__c)) {

                        $scope.toggleQuestionNumberAndIconVisibility( data.inputObj.ASMListForUnitAssessmentTemplate[0].ExAM__Related_Assignment_Manager2__r.ExAM__InvestigationType__r );

                        $scope.relatedmanagerid = data.inputObj.ASMListForUnitAssessmentTemplate[0].ExAM__Related_Assignment_Manager2__c;
                        $scope.relatedmanagername = data.inputObj.ASMListForUnitAssessmentTemplate[0].ExAM__Related_Assignment_Manager2__r.Name;
                        $scope.showASMTable = false;
                        $scope.showAccountSection = false;
                        $scope.newASMId = data.inputObj.ASMListForUnitAssessmentTemplate[0].ExAM__Related_Assignment_Manager2__c;
                        $scope.showPgMessage = true;
                        if ($scope.relatedmanagerid != null) {
                            $scope.showSectionQuestions = true;
                            $scope.$parent.Related_Assessment_Type_2_Template = data.inputObj.examConfigurationRecord.ExAM__Related_Assessment_Type_2_Template__c;
                            $scope.$parent.relatedmanager_2_id = $scope.relatedmanagerid;
                        }
                    }
                    $scope.assignmentManagerObj = data.inputObj.ASMListForSystemsAssessmentTemplate;
                    $scope.acctObj = data.inputObj.acctList;
                    $scope.configRecord = data.inputObj.examConfigurationRecord;                    

                    if ( angular.isDefined($scope.configRecord) ) {

                        if ( angular.isDefined($scope.configRecord.ExAM__Related_Assessment_Type_2_Template__c) ) {

                            //Code Below sets the configured Result Template Fields for Current Assessment Template
                            mainappservice.callConstructDecisionTreeTemplateActn($scope.configRecord.ExAM__Related_Assessment_Type_2_Template__c).then(function(resultTemplateData){

                                $scope.decisionTreeResultTemplate = resultTemplateData;

                                /**
                                    Code Below calls the function in service which queries all the question template
                                    below the section template of current assessment template
                                **/
                                mainappservice.queryQuestionTemplatesForCurrentActiveTab( $scope.configRecord.ExAM__Related_Assessment_Type_2_Template__c, $scope.decisionTreeResultTemplate ).then(function(questionTemplateData){

                                    if (questionTemplateData.hasActionSuccess === true) {

                                        $scope.questionNamewithQuestionTemplate = questionTemplateData.questionNameAndTemplateJsonString;
                                        $scope.resultQuestionNamewithQuestionTemplate = questionTemplateData.resultNameAndTemplateJsonString;
                                        $scope.resultQuestionIdDefaultVal = questionTemplateData.resultQuestionIdDefaultVal;
                                    }
                                },function(errorData){
                                    console.log(errorData);
                                });
                            }, function(data){
                            });

                            /**
                                Added on 23-06-2016 for Implementing Dependent Questions Functionality
                                Code Below calls the function in service which queries all the dependent question template
                                below the section templates under assessment template.
                            **/
                            mainappservice.queryDependentQuestions($scope.configRecord.ExAM__Related_Assessment_Type_2_Template__c).then(function(data){

                                $scope.dependentQuestionsObj = data.dependentQuestionsObj;
                                mainappservice.queryImageQuestionTypeAttachments( data.attachmentIds ).then(function(queriedAttData){
                                    $scope.dependentQuestionsAttObj = queriedAttData;
                                },
                                function(attErrData) {
                                });

                            },function(data){
                            });
                        }
                    }
                } else {
                    $('.maskDiv, .slds-spinner--small').hide();
                    $scope.showErrMessage = true;
                    $scope.errMessage = 'Remote Method Invocation Failed';
                }
            },function(data){

                $('.maskDiv, .slds-spinner--small').hide();           
                $scope.showErrMessage = true;
                $scope.errMessage = 'Remote Method Invocation Failed';
            });

            $scope.linkSelectedManager = function() {

                $('.asmIdBox').each(function() {

                    if($(this).prop('checked')) {

                        $scope.checkedManagerId = $(this).val().split('~')[0];
                        $scope.checkedManagerName = $(this).val().split('~')[1];
                        $scope.selectedManagerId = $scope.checkedManagerId;
                    }
                });

                if ($scope.selectedManagerId.length > 0) {

                    $('.maskDiv, .slds-spinner--small').show();
                    mainappservice.linkSelectedManagerJS($scope.currentASMIdStr, $scope.selectedManagerId, '{!$Label.Related_Assessment_Type_2}').then(function(data){
        
                        if (data.showErrMessage && !data.hasActionSuccess) {
        
                            $('.maskDiv, .slds-spinner--small').hide();
                            $scope.showErrMessage = data.showErrMessage;
                            $scope.errMessage = data.errMessage;
                        }
                        else if (data.hasActionSuccess === true) {
        
                            //$('.maskDiv, .slds-spinner--small').hide();
                            $scope.showASMTable = data.showASMTable;
                            $scope.showAccountSection = false;
                            if ($scope.checkedManagerId.length > 0 && $scope.checkedManagerName.length > 0) {
                                $scope.relatedmanagerid = $scope.checkedManagerId;
                                $scope.relatedmanagername = $scope.checkedManagerName;
                                $scope.showPgMessage = true;
                                $scope.$parent.Related_Assessment_Type_2_Template = $scope.configRecord.ExAM__Related_Assessment_Type_2_Template__c;
                                $scope.$parent.relatedmanager_2_id = $scope.checkedManagerId;
                            }
                            $scope.showErrMessage = data.showErrMessage;
                            $scope.errMessage = data.errMessage;
                            $scope.searchManagerText = data.searchManagerText;

                            //start of Show questions.
                            $scope.showSectionQuestions = true;

                            mainappservice.queryQuestionTemplates($scope.configRecord.ExAM__Related_Assessment_Type_2_Template__c, $scope.selectedManagerId).then(function(data2){

                                if (data2.hasActionSuccess === true) {

                                    $('.maskDiv, .slds-spinner--small').hide();
                                    $scope.sectionAndQuestionTemplateObj = data2.inputObj;
                                    $scope.newASMId = $scope.relatedmanagerid;
                                    $scope.toggleQuestionNumberAndIconVisibility( data2.inputObj[0].assessmentTemplateRecord );
                                } else {
                                    $('.maskDiv, .slds-spinner--small').hide();
                                }
                            },function(data2){

                                $('.maskDiv, .slds-spinner--small').hide();           
                                $scope.showErrMessage = true;
                                $scope.errMessage = 'Remote Method Invocation Failed';
                            });
                            //End of Show questions.
                        }
                    },function(data){
        
                        $('.maskDiv, .slds-spinner--small').hide();
                        $scope.showErrMessage = data.showErrMessage;
                        $scope.errMessage = data.errMessage;
                    });
                }
                else {

                    $scope.showErrMessage = true;
                    $scope.errMessage = 'Please select a radio button to proceed';
                }
            }
               
            $scope.createNewASManager = function() {

                
                if ($scope.selectedAcctId.length > 0) {

                    $('.maskDiv, .slds-spinner--small').show();
                    mainappservice.createNewASManagerJS($scope.currentASMIdStr, $scope.selectedAcctId, $scope.configRecord.ExAM__Related_Assessment_Type_2_Template__c, '{!$Label.Related_Assessment_Type_2}').then(function(data){
        
                        if (data.showErrMessage && !data.hasActionSuccess) {
        
                            $('.maskDiv, .slds-spinner--small').hide();
                            $scope.showErrMessage = data.showErrMessage;
                            $scope.errMessage = data.errMessage;
                            $scope.showASMSection = data.showASMSection;
                            $scope.showAccountSection = data.showAccountSection;
                            $scope.showSectionQuestions = data.showSectionQuestions;
                        }
                        else if (data.hasActionSuccess === true) {
        
                            $('.maskDiv, .slds-spinner--small').hide();
                            $scope.sectionAndQuestionTemplateObj = data.questionTemplateObj;
                            if ( $scope.sectionAndQuestionTemplateObj.length == 0 ) {
                                $scope.hasSectionTemplates = false;
                            }
                            $scope.assessmentTemplateId = data.assessmentTemplateId;
                            $scope.newASMId = data.newASMId;
                            $scope.$parent.Related_Assessment_Type_2_Template = $scope.configRecord.ExAM__Related_Assessment_Type_2_Template__c;
                            $scope.$parent.relatedmanager_2_id = data.newASMId;

                            /** Code Below binds newly created Assignment Manager Id and Name to page message **/
                            $scope.relatedmanagerid = data.newASMId;
                            $scope.relatedmanagername = data.newASMName;
                            $scope.showPgMessage = true;

                            $scope.showAcctTable = false;
                            
                            $scope.showASMSection = data.showASMSection;
                            $scope.showAccountSection = data.showAccountSection;
                            $scope.showSectionQuestions = data.showSectionQuestions;
                            $scope.showErrMessage = false;
                            $scope.toggleQuestionNumberAndIconVisibility( data.questionTemplateObj[0].assessmentTemplateRecord );
                            $scope.init();
                        }
                    },function(data){
        
                        $('.maskDiv, .slds-spinner--small').hide();
                        $scope.showErrMessage = data.showErrMessage;
                        $scope.errMessage = data.errMessage;
                        $scope.showASMSection = data.showASMSection;
                        $scope.showAccountSection = data.showAccountSection;
                        $scope.showSectionQuestions = data.showSectionQuestions;
                    });
                }
                else {

                    $scope.showErrMessage = true;
                    $scope.errMessage = 'Please select a accessable record to proceed';
                }
            }

            $scope.saveUsrEnteredAnswerOptions = function(isSubmit) {

                mainappservice.doReqdFieldValidation($scope.response,$scope.isSelectBtnOptn,$scope.selectImage, isSubmit, $scope.signImage).then(function(validateSuccessResponse) {

                    if (validateSuccessResponse != 'Skip Validation') {
                        $.each(validateSuccessResponse, function(key, value) {
                            if ($scope.response[key]) {
                                $scope.response[key] = value;
                            }
                        });
                    }

                    $scope.setPgMsgColor = 'red';
                    $('.maskDiv, .slds-spinner--small').show();

                    mainappservice.saveUsrEnteredAnswers($scope.response,$scope.responseFile,$scope.fileAttach, $scope.comment, $scope.photo,$scope.signImage, $scope.configRecord.ExAM__Related_Assessment_Type_2_Template__c, $scope.newASMId, '{!$Label.ExAM__Related_Assessment_Type_2}', isSubmit, $scope.sectionAndQuestionTemplateObj,$scope.caseResponse,$scope.decisionTreeQuesIdwithAnswerIdObj,$scope.caseResponse,$scope.decisionTreeQuesIdwithAnswerIdObj).then(function(data){
        
                        if (data.showErrMessage && !data.hasActionSuccess) {

                            $scope.showErrMessage = data.showErrMessage;
                            $scope.errMessage = data.errMessage;                            
                            $('.maskDiv, .slds-spinner--small').hide();
                        } else if (!data.showErrMessage && data.hasActionSuccess) {

                            $('.maskDiv, .slds-spinner--small').hide();
                            $scope.setPgMsgColor = 'green';
                            $scope.showErrMessage = true; // setting this variable as true to show success message
                            $scope.errMessage = data.errMessage;
                            $scope.selectedAcctId = '';
                            $scope.searchAcctText = '';
                            $scope.showSectionQuestions = data.showSectionQuestions;                            
                            $scope.showAcctTable = false;                            

                            //Added on 01-07-2016 for Answered icon
                            $scope.sectionAndQuestionTemplateObj = data.sectionAndQuestionTemplateObj;

                            //clear all variables after answer save happens successfully in backend
                            $scope.response = {};
                            $scope.comment = {};
                            $scope.photo = {};
                            $scope.signImage = {};
                            $scope.nextDependentQuestion = {};
                            $scope.selectImage = {};
                            $scope.isSelectBtnOptn = {};
                            $scope.fileAttach = {};
                            $scope.responseFile = {};
                            angular.element("input[type='file']").val(null);
                            $scope.init();
                            $scope.initOfUnitTab();
                            $scope.caseResponse = {};
                            $scope.decisionTreeQuesIdwithAnswerIdObj = {};
                            $('.liClass').removeClass('slds-is-selected');
                        } 
                    },function(data){
                        
                        $('.maskDiv, .slds-spinner--small').hide();
                        $scope.showErrMessage = data.showErrMessage;
                        $scope.errMessage = data.errMessage;
                    });
                },
                function(validateErrorResponse) {
                    return null;
                });
            }

            /* Render Assignment Manager Table Based on Search text */
            $scope.querySelectedAssignmentManager = function() {
            
                $scope.showErrMessage = false;
                $scope.errMessage = '';

                if ($scope.searchManagerText.length > 0) {
            
                    $scope.showASMTable = true;
                }
                else {

                    $scope.showErrMessage = true;
                    $scope.errMessage = 'Please enter an assignment manager';
                }
            }
            
            /* Render Account Table Based on Search text */
            $scope.querySelectedAccount = function() {
            
                $scope.showErrMessage = false;
                $scope.errMessage = '';

                if ($scope.searchAcctText.length > 0) {
                    $scope.showAcctTable = true;
                }
                else {

                    $scope.showErrMessage = true;
                    $scope.errMessage = 'Please enter a account name';
                }
            }

            /* Reset Search Variable */
            $scope.resetSearchVariable = function(searchWhichEntity) {

                if (searchWhichEntity == 'fromASMSearchBox') {

                    $scope.searchManagerText = '';
                    $scope.showASMTable = false;
                }
                else if (searchWhichEntity == 'fromAccountSearchBox') {

                    $scope.searchAcctText = '';
                    $scope.showAcctTable = false;
                }
            }

            $scope.splitOptions = function(strOption) {

                return mainappservice.splitAvailableAnswerOptions(strOption);
            }

            $scope.opencomment = function(selQuestionId) {                
                $scope.selecteQuestionId = selQuestionId;
                mainappservice.opencommentBox();
            }
            $scope.closecomment = function() {
                mainappservice.closecommentBox();
            }
            $scope.savecomment = function() {    
                mainappservice.savecommentBox();
            }

            $scope.openPhotoUpload = function(selQuestionId) {
                document.getElementById('fid').value = '';                 
                $scope.photoQuestionId = selQuestionId;
                mainappservice.openPhotoUploadBox();
            }            
            $scope.closePhotoUpload = function() {
                mainappservice.closePhotoUploadBox();
            }
            $scope.savePhoto = function() {
                mainappservice.savePhotoBox();
            }
            $scope.openAssignmentManagerRecord = function() {

                window.location.href = '/'+$scope.relatedmanagerid;
            }
            $scope.resetChosenAnswerForThisQuestionTemplate = function(selQuestionId,type) {

                if (angular.isDefined($scope.response[selQuestionId]) && type != '' && type == 'ListQType') {
                    $('#listQT'+selQuestionId).removeClass('slds-is-selected');
                    delete $scope.response[selQuestionId];
                } else {
                    delete $scope.response[selQuestionId];
                }
            }
            
            <!--added on 20-09-2016-->
            $scope.openSignatureModal = function(selectQuestionId,option) {
                $scope.chooseQuesId = selectQuestionId;
                if(option){
                    $scope.signAnsOption = option;
                }else{
                    $scope.signAnsOption = 'NoData';
                }
                $scope.tempsignAnsOption = null;
               
                $timeout(function(){
                    mainappservice.openSignModal();
                    var canvas = document.getElementById(selectQuestionId);
                    var context = canvas.getContext('2d');
                    signature = new SignaturePad(canvas, {
                        backgroundColor: 'rgba(255, 255, 255, 0)',
                        penColor: 'rgb(0, 0, 0)'
                    });
                    if($scope.signImage[$scope.chooseQuesId]){
                        var imageObj = new Image();
    
                        imageObj.onload = function() {
                          context.drawImage(imageObj, 0, 0);
                        };
                        imageObj.src = $scope.signImage[$scope.chooseQuesId];
                    }else{
                        $scope.canvasClick = false;
                    }
                },500);
            }
            $scope.closeSign = function(){
                $scope.signAnsOption = null;
                $scope.tempsignAnsOption = null;
                mainappservice.closeSignModal();
            }
            $scope.clearSign = function(){
                signature.clear();
                $scope.tempsignAnsOption = angular.copy($scope.signAnsOption);
                $scope.signAnsOption = null;
            };
            $scope.canvasClickfun1 = function(){
                $scope.canvasClick = true;
                if($scope.tempsignAnsOption){
                    $scope.signAnsOption = $scope.tempsignAnsOption;
                }
            }
            $scope.saveSign = function(){
              
                if($scope.signAnsOption && $scope.canvasClick){
                    $scope.signImage[$scope.chooseQuesId] = signature.toDataURL('image/png');
                    if($scope.signAnsOption == 'NoData'){
                        $scope.response[$scope.chooseQuesId] = '';
                    }else{
                        $scope.response[$scope.chooseQuesId] = $scope.signAnsOption;
                    }
                    
                } else {
                    delete $scope.signImage[$scope.chooseQuesId];
                    delete $scope.response[$scope.chooseQuesId];
                }
                signature.clear();
                mainappservice.closeSignModal();
                
            };
            
            //This Function relared to Hotspot image type question
            $scope.hotspotInit = function(hotspotProperties) {
                if (hotspotProperties != null && hotspotProperties != '') {
                    return JSON.parse(_.unescape(hotspotProperties));
                } else {
                    return null;
                }
            }
            /** Start Decision Tree Functionality Related Method Invocation **/
            $scope.openDecisionTreePopUp = function(usrEnteredAnswerOpt, forWhichQuestion) {
                $scope.DecisionTreeresponse = {};
                if (forWhichQuestion.ExAM__Question_Type__c != 'Result') {
                    if ( !$scope.DecisionTreeresponse[forWhichQuestion.Id] ) {
                        $scope.DecisionTreeresponse[forWhichQuestion.Id] = usrEnteredAnswerOpt;
                    }
                    if (!$scope.isCalledFirstTime ) {
                        $scope.decisionTreeLaunchedQuestion[forWhichQuestion.Id] = usrEnteredAnswerOpt;
                        $scope.isCalledFirstTime = true;
                    }
                }
                $scope.decisionTreeQuestion = mainappservice.decisionTreeOpenWindow(usrEnteredAnswerOpt, forWhichQuestion, $scope.questionNamewithQuestionTemplate, $scope.resultQuestionNamewithQuestionTemplate);
                $scope.decisionTreeStartQuestionId = forWhichQuestion.Id;

                if ($scope.decisionTreeQuestion.ExAM__Question_Type__c == 'Result' ) {
                    $scope.populateDefaultValuesForResultTemplate( $scope.decisionTreeQuestion.Id );
                }
            }
            $scope.closeDecisionTreePopUp = function() {
                $('.DecisionTree').addClass('slds-modal__close');
                $('.DecisionTree').removeClass('slds-fade-in-open');
                //$scope.DecisionTreeresponse = {};
                if (angular.isDefined($scope.response[$scope.decisionTreeStartQuestionId])) {
                    delete $scope.response[$scope.decisionTreeStartQuestionId];
                }
            }
            $scope.renderNextQuestionInDecisionTree = function(usrEnteredAnswerOpt, forWhichQuestion) {

                if (angular.isDefined(usrEnteredAnswerOpt)) {

                    $scope.nextQuestObj =mainappservice.decisionTreeNextQuestion(usrEnteredAnswerOpt, forWhichQuestion, $scope.questionNamewithQuestionTemplate, $scope.resultQuestionNamewithQuestionTemplate, $scope.previousQuestion);
                    if ($scope.nextQuestObj.hasNextQuestion) {

                        $scope.previousQuestion = $scope.nextQuestObj.previousQuestion;
                        $scope.decisionTreeQuestion = $scope.nextQuestObj.decisionTreeQuestion;

                        if ($scope.decisionTreeQuestion.ExAM__Question_Type__c == 'Result' ) {
                            $scope.populateDefaultValuesForResultTemplate( $scope.decisionTreeQuestion.Id );
                        }
                    }
                    else {

                        //Added on 14-06-2016 for Related Decision Tree chain functionality
                        $scope.saveChosenAnswerOptionInDecisionTreeQuestions(forWhichQuestion, 'SAVE');
                    }

                }
            }
            $scope.previousQuestion = function(decisionTree_QuestionName) {
                if ($scope.previousQuestion != null && $scope.previousQuestion[decisionTree_QuestionName] != null) {
                    $scope.decisionTreeQuestion = $scope.previousQuestion[decisionTree_QuestionName];
                }
            }
            //Moved Decision Tree Answers save functionality invocation to service on 14-06-2016
            $scope.saveChosenAnswerOptionInDecisionTreeQuestions = function(resultQuestion, isSubmit) {

                $('.DecisionTree').addClass('slds-modal__close');
                $('.DecisionTree').removeClass('slds-fade-in-open');

                mainappservice.saveDecisionTreeAnswersInBackEnd($scope.DecisionTreeresponse, $scope.relatedmanagerid, $scope.createdAnswerRecordIdForResultTemplate, $scope.sectionAndQuestionTemplateObj, $scope.response, $scope.decisionTreeLaunchedQuestion).then(function(answerData) {

                    $scope.sectionAndQuestionTemplateObj = answerData.sectionAndQuestionTemplateObj;
                    $scope.response = answerData.response;
                    $scope.decisionTreeLaunchedQuestion = {};
                    $scope.isCalledFirstTime = false;

                    mainappservice.saveUploadedFilesAsAttachments(answerData.createdAnswers, $scope.photo).then(function(fileUploadResponse) {

                        $scope.DecisionTreeresponse = {};
                        $scope.photo = {};
                        $scope.decisionTreeQuesIdwithAnswerIdObj = _.extend($scope.decisionTreeQuesIdwithAnswerIdObj, answerData.createdAnswers);
                        //Added on 14-06-2016 for Related Decision Tree chain functionality
                        if ( isSubmit == 'SAVE AND CONTINUE' &&
                             angular.isDefined(resultQuestion.ExAM__Next_Question__c) && 
                             angular.isDefined(answerData.createdAnswers[resultQuestion.Id])
                        ) {
                            $scope.createdAnswerRecordIdForResultTemplate = answerData.createdAnswers[resultQuestion.Id];
                            $scope.openDecisionTreePopUp($scope.createdAnswerRecordIdForResultTemplate, resultQuestion);
                        }
                        else {
                            $scope.createdAnswerRecordIdForResultTemplate = '';
                        }
                    },
                    function(fileUploadError) {
                        console.log(fileUploadError);
                    });
                },
                function(answererror) {
                    $scope.showErrMessage = true;
                    $scope.errMessage = answererror;                            
                });
            }
            $scope.populateDefaultValuesForResultTemplate = function(resultTemplateId) {

                /**
                    Below line added on 24-08-2016 to set question template id for DecisionTreeresponse
                    if there is no value given for any of the visible fields in Result Question
                **/
                $scope.DecisionTreeresponse[resultTemplateId+'~~'+'ExAM__Question_Template__c'] = resultTemplateId;

                if (angular.isDefined($scope.resultQuestionIdDefaultVal[resultTemplateId]) ) {
                    angular.forEach($scope.resultQuestionIdDefaultVal[resultTemplateId], function(value, key) {
                        if ( ($scope.DecisionTreeresponse[resultTemplateId+'~~'+key] == '')
                             || ($scope.DecisionTreeresponse[resultTemplateId+'~~'+key] == null)
                             || ($scope.DecisionTreeresponse[resultTemplateId+'~~'+key] == undefined)
                        ) {
                            $scope.DecisionTreeresponse[resultTemplateId+'~~'+key] = value;
                        }
                    });
                }
                
            }
            /** End Decision Tree Functionality Related Method Invocation **/

            $scope.imageTypeQues = function(usrSelectImageQuestion, usrSelectImage, $event, imgArr) {

                var option = mainappservice.imageTypeQuesAnswer(usrSelectImageQuestion, usrSelectImage, $event, imgArr);
                
                $scope.response[usrSelectImageQuestion.Id] = option.optionText;
                $scope.selectImage = option.optionImage;
            }
            /**
                Added on 23-06-2016 for Implementing Dependent Questions Functionality
            **/
            $scope.nextDependentQuestion = {};

            /**
                Added on 23-06-2016 for Implementing Dependent Questions Functionality
                Code Below returns the dependent question for current question
            **/
            $scope.returnRelatedDependentQuestion = function(forWhichQuestion, selectedAnswer) {

                mainappservice.returnDependentQuestion( forWhichQuestion, selectedAnswer, $scope.dependentQuestionsObj ).then(function(queriedDependentQuestionData){
                    $scope.nextDependentQuestion[forWhichQuestion.Id] = queriedDependentQuestionData;
                },
                function(dependentQuestionErrData) {
                });
            }
            //Added on 01-07-2016 for Button Question Type Selected Options
            $scope.setSelectedOption = function(forWhichQuestion, selOption, options, fromDecisionTree) {
                $scope.isSelectBtnOptn[forWhichQuestion.Id] = true;
                for(var i=0;i<options.length;i++) {
                    var btnId = i+forWhichQuestion.Id;
                    if (options[i] == selOption) {
                        document.getElementById(btnId).style.border = '1px solid black';
                        document.getElementById(btnId).style.backgroundColor = 'lightblue';
                    }
                    else {
                        document.getElementById(btnId).style.border = 'none';
                        document.getElementById(btnId).style.backgroundColor = '';
                    }
                }
                if(fromDecisionTree || angular.isDefined(forWhichQuestion.ExAM__Next_Question__c)) {
                    $scope.DecisionTreeresponse[forWhichQuestion.Id] = selOption;
                    if (!$scope.isCalledFirstTime ) {
                        $scope.decisionTreeLaunchedQuestion[forWhichQuestion.Id] = selOption;
                        $scope.isCalledFirstTime = true;
                    }
                } else {
                    $scope.response[forWhichQuestion.Id] = selOption;
                }
            }
            //Added on 01-07-2016 for Knowledge article link
            $scope.openLink = function(link) {
                if(link.indexOf('http') > -1 || link.indexOf('https') > -1) {
                    window.open(link,'_blank');
                } else {
                     window.open('https://'+link,'_blank');
                }
                 
            }
            //Added on 12-07-2016 to control Question Number and Icon visibility
            $scope.toggleQuestionNumberAndIconVisibility = function(template) {
                $scope.showImageUploadIcon = template.ExAM__Show_Image_Upload_Icon__c;
                $scope.showCommentsIcon = template.ExAM__Show_Notes_Icon__c;
                $scope.showClearIcon = template.ExAM__Show_Refresh_Icon__c;
                $scope.showQuesNumIcon = template.ExAM__Show_Question_Number__c;
            }
            //Added on 26/07/2016 for Question type 'File'
            $scope.answerFile  = function(Id,option){
                $scope.ansFileId = Id;
                $scope.ansFileOption = option;
            }
            $scope.fileChanged = function(ele) {
                var files = ele.files;
                var l = files.length; 
                if(l > 0) {
                   $scope.response[$scope.ansFileId] = $scope.ansFileOption;
                }
            }
            $scope.ListQuestionType = function(option,qId) {
                 
                 $scope.response[qId] = option;
            } 
        });
        app.controller('commonareacontroller', function($scope, mainappservice,_,$timeout) {

            $scope.assignmentManagerObj = [];
            $scope.acctObj = [];
            $scope.configRecord = [];
            $scope.inputObj = [];
            $scope.sectionAndQuestionTemplateObj = [];
            $scope.sectionAndQuestionTemplateObjForCurrentASM = [];
            $scope.currentASMIdStr = '{!currentASMId}';
            $scope.currentASMAssesssmentTemplateTdStr = '{!currentASMAssessmentTemplateId}';
            $scope.showASMSection = true;
            $scope.showAccountSection = true;
            $scope.showSectionQuestions = false;
            $scope.showASMTable = true;
            $scope.showAcctTable = false;
            $scope.photoQuestionId = '';
            $scope.selecteQuestionId = '';
            $scope.response = {};
            $scope.comment = {};
            $scope.photo = {};
            $scope.errMessage = '';
            $scope.searchManagerText = '';
            $scope.searchAcctText = '';
            $scope.showPgMessage = false;
            $scope.showErrMessage = false;
            $scope.hasAnswersExistsForUnitTemplate = 'false';
            $scope.selectedAnswerVal = '';
            $scope.errorFlag = false;
            $scope.selectedAcctId = '';
            $scope.checkedManagerId = '';
            $scope.checkedManagerName = '';
            $scope.selectedManagerId = '';
            $scope.thistabname = '{!$Label.Related_Assessment_Type_3}';
            $scope.relatedmanagerid = '';
            $scope.relatedmanagername = '';
            $scope.setPgMsgColor = 'red';
            $scope.assessableObjectList = [];
            if ( '{!JSENCODE(assRecClsListJSON)}' != null && '{!JSENCODE(assRecClsListJSON)}' != '' && '{!JSENCODE(assRecClsListJSON)}' != 'null') {
                $scope.assessableObjectList = JSON.parse('{!JSENCODE(assRecClsListJSON)}');
            }
            /** Variables For Decision Tree Functionality **/
            $scope.DecisionTreeresponse = {};
            $scope.decisionTreeQuestion = {};
            $scope.previousQuestion = {};            
            $scope.questionsList = [];
            $scope.questionNamewithQuestionTemplate = {};
            $scope.resultQuestionNamewithQuestionTemplate = {};

            $scope.decisionTreeStartQuestionId = '';
            $scope.unitDetail = false;

            //Added on 14-06-2016 for Related Decision Tree chain functionality
            $scope.createdAnswerRecordIdForResultTemplate = '';

            //Added on 19-07-2016 to store question which launches Decision Tree
            $scope.decisionTreeLaunchedQuestion = {};
            $scope.isCalledFirstTime = false;

            /** 
                Variable to display error message when there are no section templates below the given
                Assessment template
            **/
            $scope.hasSectionTemplates = true;
            $scope.isSelectBtnOptn = {};
            $scope.fileAttach = {};
            $scope.responseFile = {};
            
            <!--added on 15-09-2016-->
            var signature;
            $scope.signImage = {};
            $scope.signAnsOption = '';
            $scope.ansFileOption ='';
            $scope.ansFileId ='';
            
            $scope.showQuestionName_on_DecisionTree = {!show_Question_Name_on_Decision_Tree};
            
            $scope.$on('questionListSet3', function(event,arg) {
                $scope.sectionAndQuestionTemplateObj = arg.param1;
                $('.maskDiv, .slds-spinner--small').hide();
                $scope.showErrMessage = false;
            });
            
            $scope.decisionTreeResultTemplate = [];
            $scope.unitDetail = false;

            $('.maskDiv, .slds-spinner--small').show();

            $scope.showImageUploadIcon = false;
            $scope.showCommentsIcon = false;
            $scope.showClearIcon = false;
            $scope.showQuesNumIcon = true;
            $scope.caseResponse = {};
            $scope.decisionTreeQuesIdwithAnswerIdObj = {};
            mainappservice.queryReqdInputJS($scope.currentASMIdStr).then(function(data){

                if (data.hasActionSuccess === true) {

                    $('.maskDiv, .slds-spinner--small').hide();
                    $scope.inputObj = data.inputObj;
                    if (angular.isDefined(data.inputObj.ASMListForUnitAssessmentTemplate) && angular.isDefined(data.inputObj.ASMListForUnitAssessmentTemplate[0].ExAM__Related_Assignment_Manager3__c)) {

                        $scope.toggleQuestionNumberAndIconVisibility( data.inputObj.ASMListForUnitAssessmentTemplate[0].ExAM__Related_Assignment_Manager3__r.ExAM__InvestigationType__r );

                        $scope.relatedmanagerid = data.inputObj.ASMListForUnitAssessmentTemplate[0].ExAM__Related_Assignment_Manager3__c;
                        $scope.relatedmanagername = data.inputObj.ASMListForUnitAssessmentTemplate[0].ExAM__Related_Assignment_Manager3__r.Name;
                        $scope.showASMTable = false;
                        $scope.showAccountSection = false;
                        $scope.newASMId = data.inputObj.ASMListForUnitAssessmentTemplate[0].ExAM__Related_Assignment_Manager3__c;
                        $scope.showPgMessage = true;
                        if ($scope.relatedmanagerid != null) {
                            $scope.showSectionQuestions = true;
                            $scope.$parent.Related_Assessment_Type_3_Template = data.inputObj.examConfigurationRecord.ExAM__Related_Assessment_Type_3_Template__c;
                            $scope.$parent.relatedmanager_3_id = $scope.relatedmanagerid;
                        }
                    }
                    $scope.assignmentManagerObj = data.inputObj.ASMListForCommonAreasAssessmentTemplate;
                    $scope.acctObj = data.inputObj.acctList;
                    $scope.configRecord = data.inputObj.examConfigurationRecord;                    

                    if ( angular.isDefined($scope.configRecord) ) {

                        if ( angular.isDefined($scope.configRecord.ExAM__Related_Assessment_Type_3_Template__c) ) {

                            //Code Below sets the configured Result Template Fields for Current Assessment Template
                            mainappservice.callConstructDecisionTreeTemplateActn($scope.configRecord.ExAM__Related_Assessment_Type_3_Template__c).then(function(resultTemplateData){

                                $scope.decisionTreeResultTemplate = resultTemplateData;

                                /**
                                    Code Below calls the function in service which queries all the question template
                                    below the section template of current assessment template
                                **/
                                mainappservice.queryQuestionTemplatesForCurrentActiveTab( $scope.configRecord.ExAM__Related_Assessment_Type_3_Template__c, $scope.decisionTreeResultTemplate ).then(function(questionTemplateData){

                                    if (questionTemplateData.hasActionSuccess === true) {

                                        $scope.questionNamewithQuestionTemplate = questionTemplateData.questionNameAndTemplateJsonString;
                                        $scope.resultQuestionNamewithQuestionTemplate = questionTemplateData.resultNameAndTemplateJsonString;
                                        $scope.resultQuestionIdDefaultVal = questionTemplateData.resultQuestionIdDefaultVal;
                                    }
                                },function(errorData){
                                    console.log(errorData);
                                });
                            }, function(data){
                            });

                            /**
                                Added on 23-06-2016 for Implementing Dependent Questions Functionality
                                Code Below calls the function in service which queries all the dependent question template
                                below the section templates under assessment template.
                            **/
                            mainappservice.queryDependentQuestions($scope.configRecord.ExAM__Related_Assessment_Type_3_Template__c).then(function(data){

                                $scope.dependentQuestionsObj = data.dependentQuestionsObj;
                                mainappservice.queryImageQuestionTypeAttachments( data.attachmentIds ).then(function(queriedAttData){
                                    $scope.dependentQuestionsAttObj = queriedAttData;
                                },
                                function(attErrData) {
                                });

                            },function(data){
                            });
                        }
                    }
                } else {
                    $('.maskDiv, .slds-spinner--small').hide();
                    $scope.showErrMessage = true;
                    $scope.errMessage = 'Remote Method Invocation Failed';
                }
            },function(data){

                $('.maskDiv, .slds-spinner--small').hide();           
                $scope.showErrMessage = true;
                $scope.errMessage = 'Remote Method Invocation Failed';
            });

            $scope.linkSelectedManager = function() {

                $('.asmIdBox').each(function() {

                    if($(this).prop('checked')) {

                        $scope.checkedManagerId = $(this).val().split('~')[0];
                        $scope.checkedManagerName = $(this).val().split('~')[1];
                        $scope.selectedManagerId = $scope.checkedManagerId;
                    }
                });

                if ($scope.selectedManagerId.length > 0) {

                    $('.maskDiv, .slds-spinner--small').show();
                    mainappservice.linkSelectedManagerJS($scope.currentASMIdStr, $scope.selectedManagerId, '{!$Label.ExAM__Related_Assessment_Type_3}').then(function(data){
        
                        if (data.showErrMessage && !data.hasActionSuccess) {
        
                            $('.maskDiv, .slds-spinner--small').hide();
                            $scope.showErrMessage = data.showErrMessage;
                            $scope.errMessage = data.errMessage;
                        }
                        else if (data.hasActionSuccess === true) {
        
                            $('.maskDiv, .slds-spinner--small').hide();
                            $scope.showASMTable = data.showASMTable;
                            $scope.showAccountSection = false;                            
                            if ($scope.checkedManagerId.length > 0 && $scope.checkedManagerName.length > 0) {
                                $scope.relatedmanagerid = $scope.checkedManagerId;
                                $scope.relatedmanagername = $scope.checkedManagerName;
                                $scope.showPgMessage = true;
                                $scope.$parent.Related_Assessment_Type_3_Template = $scope.configRecord.ExAM__Related_Assessment_Type_3_Template__c;
                                $scope.$parent.relatedmanager_3_id = $scope.checkedManagerId;
                            }
                            $scope.showErrMessage = data.showErrMessage;
                            $scope.errMessage = data.errMessage;
                            $scope.searchManagerText = data.searchManagerText;

                            //start of Show questions.
                            $scope.showSectionQuestions = true;
                            mainappservice.queryQuestionTemplates($scope.configRecord.ExAM__Related_Assessment_Type_3_Template__c, $scope.selectedManagerId).then(function(data2){

                                if (data2.hasActionSuccess === true) {

                                    $('.maskDiv, .slds-spinner--small').hide();
                                    $scope.sectionAndQuestionTemplateObj = data2.inputObj;
                                    $scope.newASMId = $scope.relatedmanagerid;
                                    $scope.toggleQuestionNumberAndIconVisibility( data2.inputObj[0].assessmentTemplateRecord );
                                } else {
                                    $('.maskDiv, .slds-spinner--small').hide();
                                }
                            },function(errdata2){

                                $('.maskDiv, .slds-spinner--small').hide();           
                                $scope.showErrMessage = true;
                                $scope.errMessage = 'Remote Method Invocation Failed';
                            });
                            //End of Show questions.
                        }
                    },function(data){
        
                        $('.maskDiv, .slds-spinner--small').hide();
                        $scope.showErrMessage = data.showErrMessage;
                        $scope.errMessage = data.errMessage;
                    });
                }
                else {

                    $scope.showErrMessage = true;
                    $scope.errMessage = 'Please select a radio button to proceed';
                }
            }
               
            $scope.createNewASManager = function() {

                
                if ($scope.selectedAcctId.length > 0) {

                    $('.maskDiv, .slds-spinner--small').show();
                    mainappservice.createNewASManagerJS($scope.currentASMIdStr, $scope.selectedAcctId, $scope.configRecord.ExAM__Related_Assessment_Type_3_Template__c, '{!$Label.Related_Assessment_Type_3}').then(function(data){
        
                        if (data.showErrMessage && !data.hasActionSuccess) {
        
                            $('.maskDiv, .slds-spinner--small').hide();
                            $scope.showErrMessage = data.showErrMessage;
                            $scope.errMessage = data.errMessage;
                            $scope.showASMSection = data.showASMSection;
                            $scope.showAccountSection = data.showAccountSection;
                            $scope.showSectionQuestions = data.showSectionQuestions;
                        }
                        else if (data.hasActionSuccess === true) {
        
                            $('.maskDiv, .slds-spinner--small').hide();
                            $scope.sectionAndQuestionTemplateObj = data.questionTemplateObj;
                            if ( $scope.sectionAndQuestionTemplateObj.length == 0 ) {
                                $scope.hasSectionTemplates = false;
                            }
                            $scope.assessmentTemplateId = data.assessmentTemplateId;
                            $scope.newASMId = data.newASMId;
                            
                            $scope.$parent.Related_Assessment_Type_3_Template = $scope.configRecord.ExAM__Related_Assessment_Type_3_Template__c;
                            $scope.$parent.relatedmanager_3_id = data.newASMId;

                            /** Code Below binds newly created Assignment Manager Id and Name to page message **/
                            $scope.relatedmanagerid = data.newASMId;
                            $scope.relatedmanagername = data.newASMName;
                            $scope.showPgMessage = true;

                            $scope.showAcctTable = false;
                            $scope.showASMSection = data.showASMSection;
                            $scope.showAccountSection = data.showAccountSection;
                            $scope.showSectionQuestions = data.showSectionQuestions;
                            $scope.showErrMessage = false;
                            $scope.toggleQuestionNumberAndIconVisibility( data.questionTemplateObj[0].assessmentTemplateRecord );
                            $scope.init();
                        }
                    },function(data){
        
                        $('.maskDiv, .slds-spinner--small').hide();
                        $scope.showErrMessage = data.showErrMessage;
                        $scope.errMessage = data.errMessage;
                        $scope.showASMSection = data.showASMSection;
                        $scope.showAccountSection = data.showAccountSection;
                        $scope.showSectionQuestions = data.showSectionQuestions;
                    });
                }
                else {

                    $scope.showErrMessage = true;
                    $scope.errMessage = 'Please select a accessable record to proceed';
                }
            }

            $scope.saveUsrEnteredAnswerOptions = function(isSubmit) {

                mainappservice.doReqdFieldValidation($scope.response,$scope.isSelectBtnOptn,$scope.selectImage, isSubmit,$scope.signImage).then(function(validateSuccessResponse) {

                    if (validateSuccessResponse != 'Skip Validation') {
                        $.each(validateSuccessResponse, function(key, value) {
                            if ($scope.response[key]) {
                                $scope.response[key] = value;
                            }
                        });
                    }

                    $scope.setPgMsgColor = 'red';
                    $('.maskDiv, .slds-spinner--small').show();

                    mainappservice.saveUsrEnteredAnswers($scope.response,$scope.responseFile,$scope.fileAttach, $scope.comment, $scope.photo,$scope.signImage, $scope.configRecord.ExAM__Related_Assessment_Type_3_Template__c, $scope.newASMId, '{!$Label.Related_Assessment_Type_3}', isSubmit, $scope.sectionAndQuestionTemplateObj,$scope.caseResponse,$scope.decisionTreeQuesIdwithAnswerIdObj).then(function(data){
        
                        if (data.showErrMessage && !data.hasActionSuccess) {

                            $scope.showErrMessage = data.showErrMessage;
                            $scope.errMessage = data.errMessage;                            
                            $('.maskDiv, .slds-spinner--small').hide();
                        } else if (!data.showErrMessage && data.hasActionSuccess) {

                            $('.maskDiv, .slds-spinner--small').hide();
                            $scope.setPgMsgColor = 'green';
                            $scope.showErrMessage = true; // setting this variable as true to show success message
                            $scope.errMessage = data.errMessage;
                            $scope.selectedAcctId = '';
                            $scope.searchAcctText = '';
                            $scope.showSectionQuestions = data.showSectionQuestions;                            
                            $scope.showAcctTable = false;                            

                            //Added on 01-07-2016 for Answered icon
                            $scope.sectionAndQuestionTemplateObj = data.sectionAndQuestionTemplateObj;
                            //clear all variables after answer save happens successfully in backend
                            $scope.response = {};
                            $scope.comment = {};
                            $scope.photo = {};
                            $scope.signImage = {};
                            $scope.nextDependentQuestion = {};
                            $scope.selectImage = {};
                            $scope.isSelectBtnOptn = {};
                            $scope.fileAttach = {};
                            $scope.responseFile = {};
                            angular.element("input[type='file']").val(null);
                            $scope.init();
                            $scope.initOfUnitTab();
                            $scope.caseResponse = {};
                            $scope.decisionTreeQuesIdwithAnswerIdObj = {};
                            $('.liClass').removeClass('slds-is-selected');
                        } 
                    },function(data){
                        
                        $('.maskDiv, .slds-spinner--small').hide();
                        $scope.showErrMessage = data.showErrMessage;
                        $scope.errMessage = data.errMessage;
                    });
                },
                function(validateErrorResponse) {
                    return null;
                });
            }

            /* Render Assignment Manager Table Based on Search text */
            $scope.querySelectedAssignmentManager = function() {
            
                $scope.showErrMessage = false;
                $scope.errMessage = '';

                if ($scope.searchManagerText.length > 0) {
            
                    $scope.showASMTable = true;
                }
                else {

                    $scope.showErrMessage = true;
                    $scope.errMessage = 'Please enter an assignment manager';
                }
            }
            
            /* Render Account Table Based on Search text */
            $scope.querySelectedAccount = function() {
            
                $scope.showErrMessage = false;
                $scope.errMessage = '';

                if ($scope.searchAcctText.length > 0) {
                    $scope.showAcctTable = true;
                }
                else {

                    $scope.showErrMessage = true;
                    $scope.errMessage = 'Please enter a account name';
                }
            }

            /* Reset Search Variable */
            $scope.resetSearchVariable = function(searchWhichEntity) {

                if (searchWhichEntity == 'fromASMSearchBox') {

                    $scope.searchManagerText = '';
                    $scope.showASMTable = false;
                }
                else if (searchWhichEntity == 'fromAccountSearchBox') {

                    $scope.searchAcctText = '';
                    $scope.showAcctTable = false;
                }
            }

            $scope.splitOptions = function(strOption) {

                return mainappservice.splitAvailableAnswerOptions(strOption);
            }

            $scope.opencomment = function(selQuestionId) {                
                $scope.selecteQuestionId = selQuestionId;
                mainappservice.opencommentBox();
            }
            $scope.closecomment = function() {
                mainappservice.closecommentBox();
            }
            $scope.savecomment = function() {    
                mainappservice.savecommentBox();
            }

            $scope.openPhotoUpload = function(selQuestionId) {
                document.getElementById('fid').value = '';                 
                $scope.photoQuestionId = selQuestionId;
                mainappservice.openPhotoUploadBox();
            }            
            $scope.closePhotoUpload = function() {
                mainappservice.closePhotoUploadBox();
            }
            $scope.savePhoto = function() {
                mainappservice.savePhotoBox();
            }
            $scope.openAssignmentManagerRecord = function() {

                window.location.href = '/'+$scope.relatedmanagerid;
            }
            $scope.resetChosenAnswerForThisQuestionTemplate = function(selQuestionId,type) {

                if (angular.isDefined($scope.response[selQuestionId]) && type != '' && type == 'ListQType') {
                    $('#listQT'+selQuestionId).removeClass('slds-is-selected');
                    delete $scope.response[selQuestionId];
                } else {
                    delete $scope.response[selQuestionId];
                }
            }
            
            <!--added on 20-09-2016-->
            $scope.openSignatureModal = function(selectQuestionId,option) {
                $scope.chooseQuesId = selectQuestionId;
                if(option){
                    $scope.signAnsOption = option;
                }else{
                    $scope.signAnsOption = 'NoData';
                }
                $scope.tempsignAnsOption = null;
                
                $timeout(function(){
                    mainappservice.openSignModal();
                    var canvas = document.getElementById(selectQuestionId);
                    var context = canvas.getContext('2d');
                    signature = new SignaturePad(canvas, {
                        backgroundColor: 'rgba(255, 255, 255, 0)',
                        penColor: 'rgb(0, 0, 0)'
                    });
                    if($scope.signImage[$scope.chooseQuesId]){
                        var imageObj = new Image();
    
                        imageObj.onload = function() {
                          context.drawImage(imageObj, 0, 0);
                        };
                        imageObj.src = $scope.signImage[$scope.chooseQuesId];
                    }else{
                        $scope.canvasClick = false;
                    }
                },500);
            }
            $scope.closeSign = function(){
                $scope.signAnsOption = null;
                $scope.tempsignAnsOption = null;
                mainappservice.closeSignModal();
            }
            $scope.clearSign = function(){
                signature.clear();
                $scope.tempsignAnsOption = angular.copy($scope.signAnsOption);
                $scope.signAnsOption = null;
            };
            $scope.canvasClickfun1 = function(){
                $scope.canvasClick = true;
                if($scope.tempsignAnsOption){
                    $scope.signAnsOption = $scope.tempsignAnsOption;
                }
            }
            $scope.saveSign = function(){
              
                if($scope.signAnsOption && $scope.canvasClick){
                    $scope.signImage[$scope.chooseQuesId] = signature.toDataURL('image/png');
                    if($scope.signAnsOption == 'NoData'){
                        $scope.response[$scope.chooseQuesId] = '';
                    }else{
                        $scope.response[$scope.chooseQuesId] = $scope.signAnsOption;
                    }
                    
                } else {
                    delete $scope.signImage[$scope.chooseQuesId];
                    delete $scope.response[$scope.chooseQuesId];
                }
                signature.clear();
                mainappservice.closeSignModal();
            };
            
            //This Function relared to Hotspot image type question
            $scope.hotspotInit = function(hotspotProperties) {
                if (hotspotProperties != null && hotspotProperties != '') {
                    return JSON.parse(_.unescape(hotspotProperties));
                } else {
                    return null;
                }
            }
            /** Start Decision Tree Functionality Related Method Invocation **/
            $scope.openDecisionTreePopUp = function(usrEnteredAnswerOpt, forWhichQuestion) {
                $scope.DecisionTreeresponse = {};
                if (forWhichQuestion.ExAM__Question_Type__c != 'Result') {
                    if ( !$scope.DecisionTreeresponse[forWhichQuestion.Id] ) {
                        $scope.DecisionTreeresponse[forWhichQuestion.Id] = usrEnteredAnswerOpt;
                    }
                    if (!$scope.isCalledFirstTime ) {
                        $scope.decisionTreeLaunchedQuestion[forWhichQuestion.Id] = usrEnteredAnswerOpt;
                        $scope.isCalledFirstTime = true;
                    }
                }
                $scope.decisionTreeQuestion = mainappservice.decisionTreeOpenWindow(usrEnteredAnswerOpt, forWhichQuestion, $scope.questionNamewithQuestionTemplate, $scope.resultQuestionNamewithQuestionTemplate);
                $scope.decisionTreeStartQuestionId = forWhichQuestion.Id;

                if ($scope.decisionTreeQuestion.ExAM__Question_Type__c == 'Result' ) {
                    $scope.populateDefaultValuesForResultTemplate( $scope.decisionTreeQuestion.Id );
                }
            }
            $scope.closeDecisionTreePopUp = function() {
                $('.DecisionTree').addClass('slds-modal__close');
                $('.DecisionTree').removeClass('slds-fade-in-open');
                $scope.DecisionTreeresponse = {};
                if (angular.isDefined($scope.response[$scope.decisionTreeStartQuestionId])) {
                    delete $scope.response[$scope.decisionTreeStartQuestionId];
                }
            }
            $scope.renderNextQuestionInDecisionTree = function(usrEnteredAnswerOpt, forWhichQuestion) {

                if (angular.isDefined(usrEnteredAnswerOpt)) {

                    $scope.nextQuestObj = mainappservice.decisionTreeNextQuestion(usrEnteredAnswerOpt, forWhichQuestion, $scope.questionNamewithQuestionTemplate, $scope.resultQuestionNamewithQuestionTemplate, $scope.previousQuestion);
                    if ($scope.nextQuestObj.hasNextQuestion) {

                        $scope.previousQuestion = $scope.nextQuestObj.previousQuestion;
                        $scope.decisionTreeQuestion = $scope.nextQuestObj.decisionTreeQuestion;

                        if ($scope.decisionTreeQuestion.ExAM__Question_Type__c == 'Result' ) {
                            $scope.populateDefaultValuesForResultTemplate( $scope.decisionTreeQuestion.Id );
                        }
                    }
                    else {

                        //Added on 14-06-2016 for Related Decision Tree chain functionality
                        $scope.saveChosenAnswerOptionInDecisionTreeQuestions(forWhichQuestion, 'SAVE');
                    }
                }
            }
            $scope.previousQuestion = function(decisionTree_QuestionName) {
                if ($scope.previousQuestion != null && $scope.previousQuestion[decisionTree_QuestionName] != null) {
                    $scope.decisionTreeQuestion = $scope.previousQuestion[decisionTree_QuestionName];
                }
            }
            //Moved Decision Tree Answers save functionality invocation to service on 14-06-2016
            $scope.saveChosenAnswerOptionInDecisionTreeQuestions = function(resultQuestion, isSubmit) {

                $('.DecisionTree').addClass('slds-modal__close');
                $('.DecisionTree').removeClass('slds-fade-in-open');

                mainappservice.saveDecisionTreeAnswersInBackEnd($scope.DecisionTreeresponse, $scope.relatedmanagerid, $scope.createdAnswerRecordIdForResultTemplate, $scope.sectionAndQuestionTemplateObj, $scope.response, $scope.decisionTreeLaunchedQuestion).then(function(answerData) {

                    $scope.sectionAndQuestionTemplateObj = answerData.sectionAndQuestionTemplateObj;
                    $scope.response = answerData.response;
                    $scope.decisionTreeLaunchedQuestion = {};
                    $scope.isCalledFirstTime = false;

                    mainappservice.saveUploadedFilesAsAttachments(answerData.createdAnswers, $scope.photo).then(function(fileUploadResponse) {

                        $scope.DecisionTreeresponse = {};
                        $scope.photo = {};
                        $scope.decisionTreeQuesIdwithAnswerIdObj = _.extend($scope.decisionTreeQuesIdwithAnswerIdObj, answerData.createdAnswers);

                        //Added on 14-06-2016 for Related Decision Tree chain functionality
                        if ( isSubmit == 'SAVE AND CONTINUE' &&
                             angular.isDefined(resultQuestion.ExAM__Next_Question__c) && 
                             angular.isDefined(answerData.createdAnswers[resultQuestion.Id])
                        ) {
                            $scope.createdAnswerRecordIdForResultTemplate = answerData.createdAnswers[resultQuestion.Id];
                            $scope.openDecisionTreePopUp($scope.createdAnswerRecordIdForResultTemplate, resultQuestion);
                        }
                        else {
                            $scope.createdAnswerRecordIdForResultTemplate = '';
                        }
                    },
                    function(fileUploadError) {
                        console.log(fileUploadError);
                    });
                },
                function(answererror) {
                    $scope.showErrMessage = true;
                    $scope.errMessage = answererror;                            
                }); 
            }
            $scope.populateDefaultValuesForResultTemplate = function(resultTemplateId) {

                /**
                    Below line added on 24-08-2016 to set question template id for DecisionTreeresponse
                    if there is no value given for any of the visible fields in Result Question
                **/
                $scope.DecisionTreeresponse[resultTemplateId+'~~'+'ExAM__Question_Template__c'] = resultTemplateId;

                if (angular.isDefined($scope.resultQuestionIdDefaultVal[resultTemplateId]) ) {
                    angular.forEach($scope.resultQuestionIdDefaultVal[resultTemplateId], function(value, key) {
                        if ( ($scope.DecisionTreeresponse[resultTemplateId+'~~'+key] == '')
                             || ($scope.DecisionTreeresponse[resultTemplateId+'~~'+key] == null)
                             || ($scope.DecisionTreeresponse[resultTemplateId+'~~'+key] == undefined)
                        ) {
                            $scope.DecisionTreeresponse[resultTemplateId+'~~'+key] = value;
                        }
                    });
                }

            }
            /** End Decision Tree Functionality Related Method Invocation **/

            $scope.imageTypeQues = function(usrSelectImageQuestion, usrSelectImage, $event, imgArr) {

                var option = mainappservice.imageTypeQuesAnswer(usrSelectImageQuestion, usrSelectImage, $event, imgArr);
                
                $scope.response[usrSelectImageQuestion.Id] = option.optionText;
                $scope.selectImage = option.optionImage;
            }
            /**
                Added on 23-06-2016 for Implementing Dependent Questions Functionality
            **/
            $scope.nextDependentQuestion = {};

            /**
                Added on 23-06-2016 for Implementing Dependent Questions Functionality
                Code Below returns the dependent question for current question
            **/
            $scope.returnRelatedDependentQuestion = function(forWhichQuestion, selectedAnswer) {

                mainappservice.returnDependentQuestion( forWhichQuestion, selectedAnswer, $scope.dependentQuestionsObj ).then(function(queriedDependentQuestionData){
                    $scope.nextDependentQuestion[forWhichQuestion.Id] = queriedDependentQuestionData;
                },
                function(dependentQuestionErrData) {
                });
            }
            //Added on 01-07-2016 for Button Question Type Selected Options
            $scope.setSelectedOption = function(forWhichQuestion, selOption, options, fromDecisionTree) {
                $scope.isSelectBtnOptn[forWhichQuestion.Id] = true;
                for(var i=0;i<options.length;i++) {
                    var btnId = i+forWhichQuestion.Id;
                    if (options[i] == selOption) {
                        document.getElementById(btnId).style.border = '1px solid black';
                        document.getElementById(btnId).style.backgroundColor = 'lightblue';
                    }
                    else {
                        document.getElementById(btnId).style.border = 'none';
                        document.getElementById(btnId).style.backgroundColor = '';
                    }
                }
                if(fromDecisionTree || angular.isDefined(forWhichQuestion.ExAM__Next_Question__c)) {
                    $scope.DecisionTreeresponse[forWhichQuestion.Id] = selOption;
                    if (!$scope.isCalledFirstTime ) {
                        $scope.decisionTreeLaunchedQuestion[forWhichQuestion.Id] = selOption;
                        $scope.isCalledFirstTime = true;
                    }
                } else {
                    $scope.response[forWhichQuestion.Id] = selOption;
                }
            }
            //Added on 01-07-2016 for Knowledge article link
            $scope.openLink = function(link) {
                if(link.indexOf('http') > -1 || link.indexOf('https') > -1) {
                    window.open(link,'_blank');
                } else {
                     window.open('https://'+link,'_blank');
                }
                 
            }
            //Added on 12-07-2016 to control Question Number and Icon visibility
            $scope.toggleQuestionNumberAndIconVisibility = function(template) {
                $scope.showImageUploadIcon = template.ExAM__Show_Image_Upload_Icon__c;
                $scope.showCommentsIcon = template.ExAM__Show_Notes_Icon__c;
                $scope.showClearIcon = template.ExAM__Show_Refresh_Icon__c;
                $scope.showQuesNumIcon = template.ExAM__Show_Question_Number__c;
            }
            //Added on 26/07/2016 for Question type 'File'
            $scope.answerFile  = function(Id,option){
                $scope.ansFileId = Id;
                $scope.ansFileOption = option;
            }
            $scope.fileChanged = function(ele) {
                var files = ele.files;
                var l = files.length; 
                if(l > 0) {
                   $scope.response[$scope.ansFileId] = $scope.ansFileOption;
                }
            }
            $scope.ListQuestionType = function(option,qId) {
                 
                 $scope.response[qId] = option;
            } 
        });
        app.controller('exteriorcontroller', function($scope, mainappservice,_,$timeout) {

            $scope.assignmentManagerObj = [];
            $scope.acctObj = [];
            $scope.configRecord = [];
            $scope.inputObj = [];
            $scope.sectionAndQuestionTemplateObj = [];
            $scope.sectionAndQuestionTemplateObjForCurrentASM = [];
            $scope.currentASMIdStr = '{!currentASMId}';
            $scope.currentASMAssesssmentTemplateTdStr = '{!currentASMAssessmentTemplateId}';
            $scope.showASMSection = true;
            $scope.showAccountSection = true;
            $scope.showSectionQuestions = false;
            $scope.showASMTable = true;
            $scope.showAcctTable = false;
            $scope.photoQuestionId = '';
            $scope.selecteQuestionId = '';
            $scope.response = {};
            $scope.comment = {};
            $scope.photo = {};
            $scope.errMessage = '';
            $scope.searchManagerText = '';
            $scope.searchAcctText = '';
            $scope.showPgMessage = false;
            $scope.showErrMessage = false;
            $scope.hasAnswersExistsForUnitTemplate = 'false';
            $scope.selectedAnswerVal = '';
            $scope.errorFlag = false;
            $scope.selectedAcctId = '';
            $scope.checkedManagerId = '';
            $scope.checkedManagerName = '';
            $scope.selectedManagerId = '';
            $scope.thistabname = '{!$Label.Related_Assessment_Type_4}';
            $scope.relatedmanagerid = '';
            $scope.relatedmanagername = '';
            $scope.setPgMsgColor = 'red';
            $scope.assessableObjectList = [];
            if ( '{!JSENCODE(assRecClsListJSON)}' != null && '{!JSENCODE(assRecClsListJSON)}' != '' && '{!JSENCODE(assRecClsListJSON)}' != 'null') {
                $scope.assessableObjectList = JSON.parse('{!JSENCODE(assRecClsListJSON)}');
            }
            /** Variables For Decision Tree Functionality **/
            $scope.DecisionTreeresponse = {};
            $scope.decisionTreeQuestion = {};
            $scope.previousQuestion = {};            
            $scope.questionsList = [];
            $scope.questionNamewithQuestionTemplate = {};
            $scope.resultQuestionNamewithQuestionTemplate = {};

            $scope.decisionTreeStartQuestionId = '';
            $scope.unitDetail = false;

            //Added on 14-06-2016 for Related Decision Tree chain functionality
            $scope.createdAnswerRecordIdForResultTemplate = '';

            //Added on 19-07-2016 to store question which launches Decision Tree
            $scope.decisionTreeLaunchedQuestion = {};
            $scope.isCalledFirstTime = false;

            /** 
                Variable to display error message when there are no section templates below the given
                Assessment template
            **/
            $scope.hasSectionTemplates = true;
            $scope.isSelectBtnOptn = {};
            $scope.fileAttach = {};
            $scope.responseFile = {};
            
            <!--added on 20-09-2016-->
            var signature;
            $scope.signImage = {};
            $scope.signAnsOption = '';
            $scope.ansFileOption ='';
            $scope.ansFileId ='';
            
            $scope.showQuestionName_on_DecisionTree = {!show_Question_Name_on_Decision_Tree};
            $scope.$on('questionListSet4', function(event,arg) {
                $scope.sectionAndQuestionTemplateObj = arg.param1;
                $('.maskDiv, .slds-spinner--small').hide();
                $scope.showErrMessage = false;
            });
            
            $scope.decisionTreeResultTemplate = [];
            $scope.unitDetail = false;

            $('.maskDiv, .slds-spinner--small').show();

            $scope.showImageUploadIcon = false;
            $scope.showCommentsIcon = false;
            $scope.showClearIcon = false;
            $scope.showQuesNumIcon = true;
            $scope.caseResponse = {};
            $scope.decisionTreeQuesIdwithAnswerIdObj = {};
            mainappservice.queryReqdInputJS($scope.currentASMIdStr).then(function(data){

                if (data.hasActionSuccess === true) {

                    $('.maskDiv, .slds-spinner--small').hide();
                    $scope.inputObj = data.inputObj;
                    if (angular.isDefined(data.inputObj.ASMListForUnitAssessmentTemplate) && angular.isDefined(data.inputObj.ASMListForUnitAssessmentTemplate[0].ExAM__Related_Assignment_Manager4__c)) {

                        $scope.toggleQuestionNumberAndIconVisibility( data.inputObj.ASMListForUnitAssessmentTemplate[0].ExAM__Related_Assignment_Manager4__r.ExAM__InvestigationType__r );

                        $scope.relatedmanagerid = data.inputObj.ASMListForUnitAssessmentTemplate[0].ExAM__Related_Assignment_Manager4__c;
                        $scope.relatedmanagername = data.inputObj.ASMListForUnitAssessmentTemplate[0].ExAM__Related_Assignment_Manager4__r.Name;
                        $scope.showASMTable = false;
                        $scope.showAccountSection = false;
                        $scope.newASMId = data.inputObj.ASMListForUnitAssessmentTemplate[0].ExAM__Related_Assignment_Manager4__c;
                        $scope.showPgMessage = true;
                        if ($scope.relatedmanagerid != null) {
                            $scope.showSectionQuestions = true;
                            $scope.$parent.Related_Assessment_Type_4_Template = data.inputObj.examConfigurationRecord.ExAM__Related_Assessment_Type_4_Template__c;
                            $scope.$parent.relatedmanager_4_id = $scope.relatedmanagerid;
                        }
                    }
                    $scope.assignmentManagerObj = data.inputObj.ASMListForExteriorAssessmentTemplate;
                    $scope.acctObj = data.inputObj.acctList;
                    $scope.configRecord = data.inputObj.examConfigurationRecord;                    

                    if ( angular.isDefined($scope.configRecord) ) {

                        if ( angular.isDefined($scope.configRecord.ExAM__Related_Assessment_Type_4_Template__c) ) {

                            //Code Below sets the configured Result Template Fields for Current Assessment Template
                            mainappservice.callConstructDecisionTreeTemplateActn($scope.configRecord.ExAM__Related_Assessment_Type_4_Template__c).then(function(resultTemplateData){

                                $scope.decisionTreeResultTemplate = resultTemplateData;
                                /**
                                    Code Below calls the function in service which queries all the question template
                                    below the section template of current assessment template
                                **/
                                mainappservice.queryQuestionTemplatesForCurrentActiveTab( $scope.configRecord.ExAM__Related_Assessment_Type_4_Template__c, $scope.decisionTreeResultTemplate ).then(function(questionTemplateData){

                                    if (questionTemplateData.hasActionSuccess === true) {

                                        $scope.questionNamewithQuestionTemplate = questionTemplateData.questionNameAndTemplateJsonString;
                                        $scope.resultQuestionNamewithQuestionTemplate = questionTemplateData.resultNameAndTemplateJsonString;
                                        $scope.resultQuestionIdDefaultVal = questionTemplateData.resultQuestionIdDefaultVal;
                                    }
                                },function(errorData){
                                    console.log(errorData);
                                });
                            }, function(data){
                            });

                            /**
                                Added on 23-06-2016 for Implementing Dependent Questions Functionality
                                Code Below calls the function in service which queries all the dependent question template
                                below the section templates under assessment template.
                            **/
                            mainappservice.queryDependentQuestions($scope.configRecord.ExAM__Related_Assessment_Type_4_Template__c).then(function(data){

                                $scope.dependentQuestionsObj = data.dependentQuestionsObj;
                                mainappservice.queryImageQuestionTypeAttachments( data.attachmentIds ).then(function(queriedAttData){
                                    $scope.dependentQuestionsAttObj = queriedAttData;
                                },
                                function(attErrData) {
                                });

                            },function(data){
                            });
                        }
                    }
                } else {
                    $('.maskDiv, .slds-spinner--small').hide();
                    $scope.showErrMessage = true;
                    $scope.errMessage = 'Remote Method Invocation Failed';
                }
            },function(data){

                $('.maskDiv, .slds-spinner--small').hide();           
                $scope.showErrMessage = true;
                $scope.errMessage = 'Remote Method Invocation Failed';
            });

            $scope.linkSelectedManager = function() {

                $('.asmIdBox').each(function() {

                    if($(this).prop('checked')) {

                        $scope.checkedManagerId = $(this).val().split('~')[0];
                        $scope.checkedManagerName = $(this).val().split('~')[1];
                        $scope.selectedManagerId = $scope.checkedManagerId;
                    }
                });

                if ($scope.selectedManagerId.length > 0) {

                    $('.maskDiv, .slds-spinner--small').show();
                    mainappservice.linkSelectedManagerJS($scope.currentASMIdStr, $scope.selectedManagerId, '{!$Label.ExAM__Related_Assessment_Type_4}').then(function(data){
        
                        if (data.showErrMessage && !data.hasActionSuccess) {
        
                            $('.maskDiv, .slds-spinner--small').hide();
                            $scope.showErrMessage = data.showErrMessage;
                            $scope.errMessage = data.errMessage;
                        }
                        else if (data.hasActionSuccess === true) {
        
                            $('.maskDiv, .slds-spinner--small').hide();
                            $scope.showASMTable = data.showASMTable;
                            $scope.showAccountSection = false;                            
                            if ($scope.checkedManagerId.length > 0 && $scope.checkedManagerName.length > 0) {
                                $scope.relatedmanagerid = $scope.checkedManagerId;
                                $scope.relatedmanagername = $scope.checkedManagerName;
                                $scope.showPgMessage = true;
                                $scope.$parent.Related_Assessment_Type_4_Template = $scope.configRecord.ExAM__Related_Assessment_Type_4_Template__c;
                                $scope.$parent.relatedmanager_4_id = $scope.checkedManagerId;
                            }
                            $scope.showErrMessage = data.showErrMessage;
                            $scope.errMessage = data.errMessage;
                            $scope.searchManagerText = data.searchManagerText;

                            //start of Show questions.
                            $scope.showSectionQuestions = true;
                            mainappservice.queryQuestionTemplates($scope.configRecord.ExAM__Related_Assessment_Type_4_Template__c, $scope.selectedManagerId).then(function(data2){

                                if (data2.hasActionSuccess === true) {

                                    $('.maskDiv, .slds-spinner--small').hide();
                                    $scope.sectionAndQuestionTemplateObj = data2.inputObj;
                                    $scope.newASMId = $scope.relatedmanagerid;
                                    $scope.toggleQuestionNumberAndIconVisibility( data2.inputObj[0].assessmentTemplateRecord );
                                } else {
                                    $('.maskDiv, .slds-spinner--small').hide();
                                }
                            },function(errdata2){

                                $('.maskDiv, .slds-spinner--small').hide();           
                                $scope.showErrMessage = true;
                                $scope.errMessage = 'Remote Method Invocation Failed';
                            });
                            //End of Show questions.
                        }
                    },function(data){
        
                        $('.maskDiv, .slds-spinner--small').hide();
                        $scope.showErrMessage = data.showErrMessage;
                        $scope.errMessage = data.errMessage;
                    });
                }
                else {

                    $scope.showErrMessage = true;
                    $scope.errMessage = 'Please select a radio button to proceed';
                }
            }
               
            $scope.createNewASManager = function() {

                
                if ($scope.selectedAcctId.length > 0) {

                    $('.maskDiv, .slds-spinner--small').show();
                    mainappservice.createNewASManagerJS($scope.currentASMIdStr, $scope.selectedAcctId, $scope.configRecord.ExAM__Related_Assessment_Type_4_Template__c, '{!$Label.Related_Assessment_Type_4}').then(function(data){
        
                        if (data.showErrMessage && !data.hasActionSuccess) {
        
                            $('.maskDiv, .slds-spinner--small').hide();
                            $scope.showErrMessage = data.showErrMessage;
                            $scope.errMessage = data.errMessage;
                            $scope.showASMSection = data.showASMSection;
                            $scope.showAccountSection = data.showAccountSection;
                            $scope.showSectionQuestions = data.showSectionQuestions;
                        }
                        else if (data.hasActionSuccess === true) {
        
                            $('.maskDiv, .slds-spinner--small').hide();
                            $scope.sectionAndQuestionTemplateObj = data.questionTemplateObj;
                            if ( $scope.sectionAndQuestionTemplateObj.length == 0 ) {
                                $scope.hasSectionTemplates = false;
                            }
                            $scope.assessmentTemplateId = data.assessmentTemplateId;
                            $scope.newASMId = data.newASMId;
                            
                            $scope.$parent.Related_Assessment_Type_4_Template = $scope.configRecord.ExAM__Related_Assessment_Type_4_Template__c;
                            $scope.$parent.relatedmanager_4_id = data.newASMId;

                            /** Code Below binds newly created Assignment Manager Id and Name to page message **/
                            $scope.relatedmanagerid = data.newASMId;
                            $scope.relatedmanagername = data.newASMName;
                            $scope.showPgMessage = true;

                            $scope.showAcctTable = false;
                            $scope.showASMSection = data.showASMSection;
                            $scope.showAccountSection = data.showAccountSection;
                            $scope.showSectionQuestions = data.showSectionQuestions;
                            $scope.showErrMessage = false;
                            $scope.toggleQuestionNumberAndIconVisibility( data.questionTemplateObj[0].assessmentTemplateRecord );
                            $scope.init();
                        }
                    },function(data){
        
                        $('.maskDiv, .slds-spinner--small').hide();
                        $scope.showErrMessage = data.showErrMessage;
                        $scope.errMessage = data.errMessage;
                        $scope.showASMSection = data.showASMSection;
                        $scope.showAccountSection = data.showAccountSection;
                        $scope.showSectionQuestions = data.showSectionQuestions;
                    });
                }
                else {

                    $scope.showErrMessage = true;
                    $scope.errMessage = 'Please select a accessable record to proceed';
                }
            }

            $scope.saveUsrEnteredAnswerOptions = function(isSubmit) {

                mainappservice.doReqdFieldValidation($scope.response,$scope.isSelectBtnOptn,$scope.selectImage, isSubmit,$scope.signImage).then(function(validateSuccessResponse) {

                    if (validateSuccessResponse != 'Skip Validation') {
                        $.each(validateSuccessResponse, function(key, value) {
                            if ($scope.response[key]) {
                                $scope.response[key] = value;
                            }
                        });
                    }

                    $scope.setPgMsgColor = 'red';
                    $('.maskDiv, .slds-spinner--small').show();

                    mainappservice.saveUsrEnteredAnswers($scope.response,$scope.responseFile,$scope.fileAttach, $scope.comment, $scope.photo,$scope.signImage, $scope.configRecord.ExAM__Related_Assessment_Type_4_Template__c, $scope.newASMId, '{!$Label.Related_Assessment_Type_4}', isSubmit, $scope.sectionAndQuestionTemplateObj,$scope.caseResponse,$scope.decisionTreeQuesIdwithAnswerIdObj).then(function(data){
        
                        if (data.showErrMessage && !data.hasActionSuccess) {

                            $scope.showErrMessage = data.showErrMessage;
                            $scope.errMessage = data.errMessage;                            
                            $('.maskDiv, .slds-spinner--small').hide();
                        } else if (!data.showErrMessage && data.hasActionSuccess) {

                            $('.maskDiv, .slds-spinner--small').hide();
                            $scope.setPgMsgColor = 'green';
                            $scope.showErrMessage = true; // setting this variable as true to show success message
                            $scope.errMessage = data.errMessage;
                            $scope.selectedAcctId = '';
                            $scope.searchAcctText = '';
                            $scope.showSectionQuestions = data.showSectionQuestions;                            
                            $scope.showAcctTable = false;                            

                            //Added on 01-07-2016 for Answered icon
                            $scope.sectionAndQuestionTemplateObj = data.sectionAndQuestionTemplateObj;
                            //clear all variables after answer save happens successfully in backend
                            $scope.response = {};
                            $scope.comment = {};
                            $scope.photo = {};
                            $scope.signImage = {};
                            $scope.nextDependentQuestion = {};
                            $scope.selectImage = {};
                            $scope.isSelectBtnOptn = {};
                            $scope.fileAttach = {};
                            $scope.responseFile = {};
                            angular.element("input[type='file']").val(null);
                            $scope.init();
                            $scope.initOfUnitTab();
                            $scope.caseResponse = {};
                            $scope.decisionTreeQuesIdwithAnswerIdObj = {};
                            $('.liClass').removeClass('slds-is-selected');
                        } 
                    },function(data){
                        
                        $('.maskDiv, .slds-spinner--small').hide();
                        $scope.showErrMessage = data.showErrMessage;
                        $scope.errMessage = data.errMessage;
                    });
                },
                function(validateErrorResponse) {
                    return null;
                });
            }

            /* Render Assignment Manager Table Based on Search text */
            $scope.querySelectedAssignmentManager = function() {
            
                $scope.showErrMessage = false;
                $scope.errMessage = '';

                if ($scope.searchManagerText.length > 0) {
            
                    $scope.showASMTable = true;
                }
                else {

                    $scope.showErrMessage = true;
                    $scope.errMessage = 'Please enter an assignment manager';
                }
            }
            
            /* Render Account Table Based on Search text */
            $scope.querySelectedAccount = function() {
            
                $scope.showErrMessage = false;
                $scope.errMessage = '';

                if ($scope.searchAcctText.length > 0) {
                    $scope.showAcctTable = true;
                }
                else {

                    $scope.showErrMessage = true;
                    $scope.errMessage = 'Please enter a account name';
                }
            }

            /* Reset Search Variable */
            $scope.resetSearchVariable = function(searchWhichEntity) {

                if (searchWhichEntity == 'fromASMSearchBox') {

                    $scope.searchManagerText = '';
                    $scope.showASMTable = false;
                }
                else if (searchWhichEntity == 'fromAccountSearchBox') {

                    $scope.searchAcctText = '';
                    $scope.showAcctTable = false;
                }
            }

            $scope.splitOptions = function(strOption) {

                return mainappservice.splitAvailableAnswerOptions(strOption);
            }

            $scope.opencomment = function(selQuestionId) {                
                $scope.selecteQuestionId = selQuestionId;
                mainappservice.opencommentBox();
            }
            $scope.closecomment = function() {
                mainappservice.closecommentBox();
            }
            $scope.savecomment = function() {    
                mainappservice.savecommentBox();
            }

            $scope.openPhotoUpload = function(selQuestionId) {
                document.getElementById('fid').value = '';                 
                $scope.photoQuestionId = selQuestionId;
                mainappservice.openPhotoUploadBox();
            }            
            $scope.closePhotoUpload = function() {
                mainappservice.closePhotoUploadBox();
            }
            $scope.savePhoto = function() {
                mainappservice.savePhotoBox();
            }
            $scope.openAssignmentManagerRecord = function() {

                window.location.href = '/'+$scope.relatedmanagerid;
            }
            $scope.resetChosenAnswerForThisQuestionTemplate = function(selQuestionId,type) {

                if (angular.isDefined($scope.response[selQuestionId]) && type != '' && type == 'ListQType') {
                    $('#listQT'+selQuestionId).removeClass('slds-is-selected');
                    delete $scope.response[selQuestionId];
                } else {
                    delete $scope.response[selQuestionId];
                }
            }
            
            <!--added on 20-09-2016-->
            $scope.openSignatureModal = function(selectQuestionId,option) {
                $scope.chooseQuesId = selectQuestionId;
                if(option){
                    $scope.signAnsOption = option;
                }else{
                    $scope.signAnsOption = 'NoData';
                }
                $scope.tempsignAnsOption = null;
                
                $timeout(function(){
                    mainappservice.openSignModal();
                    var canvas = document.getElementById(selectQuestionId);
                    var context = canvas.getContext('2d');
                    signature = new SignaturePad(canvas, {
                        backgroundColor: 'rgba(255, 255, 255, 0)',
                        penColor: 'rgb(0, 0, 0)'
                    });
                    if($scope.signImage[$scope.chooseQuesId]){
                        var imageObj = new Image();
    
                        imageObj.onload = function() {
                          context.drawImage(imageObj, 0, 0);
                        };
                        imageObj.src = $scope.signImage[$scope.chooseQuesId];
                    }else{
                        $scope.canvasClick = false;
                    }
                },500);
            }
            $scope.closeSign = function(){
                $scope.signAnsOption = null;
                $scope.tempsignAnsOption = null;
                mainappservice.closeSignModal();
            }
            $scope.clearSign = function(){
                signature.clear();
                $scope.tempsignAnsOption = angular.copy($scope.signAnsOption);
                $scope.signAnsOption = null;
            };
            $scope.canvasClickfun1 = function(){
                $scope.canvasClick = true;
                if($scope.tempsignAnsOption){
                    $scope.signAnsOption = $scope.tempsignAnsOption;
                }
            }
            $scope.saveSign = function(){
              
                if($scope.signAnsOption && $scope.canvasClick){
                    $scope.signImage[$scope.chooseQuesId] = signature.toDataURL('image/png');
                    if($scope.signAnsOption == 'NoData'){
                        $scope.response[$scope.chooseQuesId] = '';
                    }else{
                        $scope.response[$scope.chooseQuesId] = $scope.signAnsOption;
                    }
                    
                } else {
                    delete $scope.signImage[$scope.chooseQuesId];
                    delete $scope.response[$scope.chooseQuesId];
                }
                signature.clear();
                mainappservice.closeSignModal();
            };
            //This Function relared to Hotspot image type question
            $scope.hotspotInit = function(hotspotProperties) {
                if (hotspotProperties != null && hotspotProperties != '') {
                    return JSON.parse(_.unescape(hotspotProperties));
                } else {
                    return null;
                }
            }
            /** Start Decision Tree Functionality Related Method Invocation **/
            $scope.openDecisionTreePopUp = function(usrEnteredAnswerOpt, forWhichQuestion) {
                $scope.DecisionTreeresponse = {};
                if (forWhichQuestion.ExAM__Question_Type__c != 'Result') {
                    if ( !$scope.DecisionTreeresponse[forWhichQuestion.Id] ) {
                        $scope.DecisionTreeresponse[forWhichQuestion.Id] = usrEnteredAnswerOpt;
                    }
                    if (!$scope.isCalledFirstTime ) {
                        $scope.decisionTreeLaunchedQuestion[forWhichQuestion.Id] = usrEnteredAnswerOpt;
                        $scope.isCalledFirstTime = true;
                    }
                }
                $scope.decisionTreeQuestion = mainappservice.decisionTreeOpenWindow(usrEnteredAnswerOpt, forWhichQuestion, $scope.questionNamewithQuestionTemplate, $scope.resultQuestionNamewithQuestionTemplate);
                $scope.decisionTreeStartQuestionId = forWhichQuestion.Id;

                if ($scope.decisionTreeQuestion.ExAM__Question_Type__c == 'Result' ) {
                    $scope.populateDefaultValuesForResultTemplate( $scope.decisionTreeQuestion.Id );
                }
            }
            $scope.closeDecisionTreePopUp = function() {
                $('.DecisionTree').addClass('slds-modal__close');
                $('.DecisionTree').removeClass('slds-fade-in-open');
                $scope.DecisionTreeresponse = {};
                if (angular.isDefined($scope.response[$scope.decisionTreeStartQuestionId])) {
                    delete $scope.response[$scope.decisionTreeStartQuestionId];
                }
            }
            $scope.renderNextQuestionInDecisionTree = function(usrEnteredAnswerOpt, forWhichQuestion) {

                if (angular.isDefined(usrEnteredAnswerOpt)) {

                    $scope.nextQuestObj = mainappservice.decisionTreeNextQuestion(usrEnteredAnswerOpt, forWhichQuestion, $scope.questionNamewithQuestionTemplate, $scope.resultQuestionNamewithQuestionTemplate, $scope.previousQuestion);
                    if ($scope.nextQuestObj.hasNextQuestion) {

                        $scope.previousQuestion = $scope.nextQuestObj.previousQuestion;
                        $scope.decisionTreeQuestion = $scope.nextQuestObj.decisionTreeQuestion;

                        if ($scope.decisionTreeQuestion.ExAM__Question_Type__c == 'Result' ) {
                            $scope.populateDefaultValuesForResultTemplate( $scope.decisionTreeQuestion.Id );
                        }
                    }
                    else {

                        //Added on 14-06-2016 for Related Decision Tree chain functionality
                        $scope.saveChosenAnswerOptionInDecisionTreeQuestions(forWhichQuestion, 'SAVE');
                    }
                }
            }
            $scope.previousQuestion = function(decisionTree_QuestionName) {
                if ($scope.previousQuestion != null && $scope.previousQuestion[decisionTree_QuestionName] != null) {
                    $scope.decisionTreeQuestion = $scope.previousQuestion[decisionTree_QuestionName];
                }
            }
            //Moved Decision Tree Answers save functionality invocation to service on 14-06-2016
            $scope.saveChosenAnswerOptionInDecisionTreeQuestions = function(resultQuestion, isSubmit) {

                $('.DecisionTree').addClass('slds-modal__close');
                $('.DecisionTree').removeClass('slds-fade-in-open');

                mainappservice.saveDecisionTreeAnswersInBackEnd($scope.DecisionTreeresponse, $scope.relatedmanagerid, $scope.createdAnswerRecordIdForResultTemplate, $scope.sectionAndQuestionTemplateObj, $scope.response, $scope.decisionTreeLaunchedQuestion).then(function(answerData) {

                    $scope.sectionAndQuestionTemplateObj = answerData.sectionAndQuestionTemplateObj;
                    $scope.response = answerData.response;
                    $scope.decisionTreeLaunchedQuestion = {};
                    $scope.isCalledFirstTime = false;

                    mainappservice.saveUploadedFilesAsAttachments(answerData.createdAnswers, $scope.photo).then(function(fileUploadResponse) {

                        $scope.DecisionTreeresponse = {};
                        $scope.photo = {};
                        $scope.decisionTreeQuesIdwithAnswerIdObj = _.extend($scope.decisionTreeQuesIdwithAnswerIdObj, answerData.createdAnswers);

                        //Added on 14-06-2016 for Related Decision Tree chain functionality
                        if ( isSubmit == 'SAVE AND CONTINUE' &&
                             angular.isDefined(resultQuestion.ExAM__Next_Question__c) && 
                             angular.isDefined(answerData.createdAnswers[resultQuestion.Id])
                        ) {
                            $scope.createdAnswerRecordIdForResultTemplate = answerData.createdAnswers[resultQuestion.Id];
                            $scope.openDecisionTreePopUp($scope.createdAnswerRecordIdForResultTemplate, resultQuestion);
                        }
                        else {
                            $scope.createdAnswerRecordIdForResultTemplate = '';
                        }
                    },
                    function(fileUploadError) {
                        console.log(fileUploadError);
                    });
                },
                function(answererror) {
                    $scope.showErrMessage = true;
                    $scope.errMessage = answererror;                            
                }); 
            }
            $scope.populateDefaultValuesForResultTemplate = function(resultTemplateId) {

                /**
                    Below line added on 24-08-2016 to set question template id for DecisionTreeresponse
                    if there is no value given for any of the visible fields in Result Question
                **/
                $scope.DecisionTreeresponse[resultTemplateId+'~~'+'ExAM__Question_Template__c'] = resultTemplateId;

                if (angular.isDefined($scope.resultQuestionIdDefaultVal[resultTemplateId]) ) {
                    angular.forEach($scope.resultQuestionIdDefaultVal[resultTemplateId], function(value, key) {
                        if ( ($scope.DecisionTreeresponse[resultTemplateId+'~~'+key] == '')
                             || ($scope.DecisionTreeresponse[resultTemplateId+'~~'+key] == null)
                             || ($scope.DecisionTreeresponse[resultTemplateId+'~~'+key] == undefined)
                        ) {
                            $scope.DecisionTreeresponse[resultTemplateId+'~~'+key] = value;
                        }
                    });
                }
            }
            /** End Decision Tree Functionality Related Method Invocation **/

            $scope.imageTypeQues = function(usrSelectImageQuestion, usrSelectImage, $event, imgArr) {

                var option = mainappservice.imageTypeQuesAnswer(usrSelectImageQuestion, usrSelectImage, $event, imgArr);
                
                $scope.response[usrSelectImageQuestion.Id] = option.optionText;
                $scope.selectImage = option.optionImage;
            }
            /**
                Added on 23-06-2016 for Implementing Dependent Questions Functionality
            **/
            $scope.nextDependentQuestion = {};

            /**
                Added on 23-06-2016 for Implementing Dependent Questions Functionality
                Code Below returns the dependent question for current question
            **/
            $scope.returnRelatedDependentQuestion = function(forWhichQuestion, selectedAnswer) {

                mainappservice.returnDependentQuestion( forWhichQuestion, selectedAnswer, $scope.dependentQuestionsObj ).then(function(queriedDependentQuestionData){
                    $scope.nextDependentQuestion[forWhichQuestion.Id] = queriedDependentQuestionData;
                },
                function(dependentQuestionErrData) {
                });
            }
            //Added on 01-07-2016 for Button Question Type Selected Options
            $scope.setSelectedOption = function(forWhichQuestion, selOption, options, fromDecisionTree) {
                $scope.isSelectBtnOptn[forWhichQuestion.Id] = true;
                for(var i=0;i<options.length;i++) {
                    var btnId = i+forWhichQuestion.Id;
                    if (options[i] == selOption) {
                        document.getElementById(btnId).style.border = '1px solid black';
                        document.getElementById(btnId).style.backgroundColor = 'lightblue';
                    }
                    else {
                        document.getElementById(btnId).style.border = 'none';
                        document.getElementById(btnId).style.backgroundColor = '';
                    }
                }
                if(fromDecisionTree || angular.isDefined(forWhichQuestion.ExAM__Next_Question__c)) {
                    $scope.DecisionTreeresponse[forWhichQuestion.Id] = selOption;
                    if (!$scope.isCalledFirstTime ) {
                        $scope.decisionTreeLaunchedQuestion[forWhichQuestion.Id] = selOption;
                        $scope.isCalledFirstTime = true;
                    }
                } else {
                    $scope.response[forWhichQuestion.Id] = selOption;
                }
            }
            //Added on 01-07-2016 for Knowledge article link
            $scope.openLink = function(link) {
                if(link.indexOf('http') > -1 || link.indexOf('https') > -1) {
                    window.open(link,'_blank');
                } else {
                     window.open('https://'+link,'_blank');
                }
                 
            }
            //Added on 12-07-2016 to control Question Number and Icon visibility
            $scope.toggleQuestionNumberAndIconVisibility = function(template) {
                $scope.showImageUploadIcon = template.ExAM__Show_Image_Upload_Icon__c;
                $scope.showCommentsIcon = template.ExAM__Show_Notes_Icon__c;
                $scope.showClearIcon = template.ExAM__Show_Refresh_Icon__c;
                $scope.showQuesNumIcon = template.ExAM__Show_Question_Number__c;
            }
            //Added on 26/07/2016 for Question type 'File'
            $scope.answerFile  = function(Id,option){
                $scope.ansFileId = Id;
                $scope.ansFileOption = option;
            }
            $scope.fileChanged = function(ele) {
                var files = ele.files;
                var l = files.length; 
                if(l > 0) {
                   $scope.response[$scope.ansFileId] = $scope.ansFileOption;
                }
            }
            $scope.ListQuestionType = function(option,qId) {
                 
                 $scope.response[qId] = option;
            } 
        });
        $( document ).ready(function() {

            if ('{!JSENCODE($CurrentPage.parameters.launchtab)}' == 'dataviewer') {
                $('li.slds-tabs__item').each(function() {
                    if($(this).hasClass('slds-active')) {
    
                        activeComponentId = $(this).attr('id');
                        activeComponentIndex = activeComponentId.substring(activeComponentId.length-1, activeComponentId.length);
                        $(this).removeClass('slds-active');
                        $('#tabpanel'+activeComponentIndex).removeClass('slds-show');
                    }
                });
                $('#tab6').addClass('slds-active');
                $('#tabpanel6').addClass('slds-show');
            }
        });

    </script>
</apex:page>