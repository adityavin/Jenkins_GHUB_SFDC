<apex:page controller="ExAM.AssessableFieldQuestionMappingController" standardStylesheets="false" docType="html-5.0">
    <apex:includeScript value="{!URLFOR($Resource.ExAM__UnderscoreAndAngularJS,'UnderscoreAndAngularJS/angular.min.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.ExAM__UnderscoreAndAngularJS,'UnderscoreAndAngularJS/underscore-min.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.ExAM__Datepicker,'Datepicker/jquery-1.10.2.js')}"/>
    <html xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
        <head>
            <title>Assessable And Question field Mapping</title>
            <meta http-equiv="X-UA-Compatible" content="IE=Edge"/>
            <apex:stylesheet value="{!URLFOR($Resource.ExAM__SLDS052, '/assets/styles/salesforce-lightning-design-system-vf.css')}" />
        </head>
        <script type="text/javascript">
            var __sfdcSessionId = '{!GETSESSIONID()}';
        </script>
        
        <script src="../../soap/ajax/35.0/connection.js" type="text/javascript"></script>
        <script src="../../soap/ajax/35.0/apex.js" type="text/javascript"></script>
        <apex:includeScript value="{!$Resource.ExAM__svgxuse}"/>
        
        <div class="slds" ng-app="FieldMappingApp" ng-controller="FieldMappingAppCtrl">
            <form class="slds-form--inline">
                <!-- Processing Image Code -->
                <div style="background-color: rgba(0, 0, 0, 0.6); width: 100%; height: 100%; z-index: 1000; position: fixed; left: 0; top: 0; overflow: hidden; text-align: center; vertical-align: middle;display:none;" class="maskDiv">
                    <img src="{!URLFOR($Resource.SLDS052, '/assets/images/spinners/slds_spinner.gif')}" alt="Loading..." class="slds-spinner--small" style=" z-index: 10001; background-color: white; width: 80px; height: 80px; padding: 15px; border-radius: 4px; text-align: left; position: relative; top: 30%;"/>
                </div>
                <!--End Processing Image Code -->
                <div class="slds-notify_container">
                    <div class="slds-notify slds-notify--alert slds-theme--success slds-theme--alert-texture" role="alert" style="display:none">
                        <button class="slds-button slds-button--icon-inverse slds-notify__close" ng-click="closeNotification(true);">
                            <svg aria-hidden="true" class="slds-button__icon">
                                <use xlink:href="{!URLFOR($Resource.SLDS052, '/assets/icons/utility-sprite/svg/symbols.svg#close')}"></use>
                            </svg>
                            <span class="slds-assistive-text">Close</span>
                        </button>
                        <span class="slds-assistive-text">Success</span>
                        <h2 class="successMsg">
                            
                        </h2>
                    </div>
                    <div class="slds-notify slds-notify--alert slds-theme--error slds-theme--alert-texture" role="alert" style="display:none">
                        <button class="slds-button slds-button--icon-inverse slds-notify__close" ng-click="closeNotification(false);">
                            <svg aria-hidden="true" class="slds-button__icon">
                                <use xlink:href="{!URLFOR($Resource.SLDS052, '/assets/icons/utility-sprite/svg/symbols.svg#close')}"></use>
                            </svg>
                            <span class="slds-assistive-text">Close</span>
                        </button>
                            <span class="slds-assistive-text">Error</span>
                        <h2 class="errorMsg" style="color:white">
                            Error :      
                        </h2>
                    </div>
                </div>
                <div class="slds-card slds-m-top--x-small slds-m-bottom--x-large">
                    <div class="slds-card__header slds-grid">
                        <div class="slds-media slds-media--center slds-has-flexi-truncate">
                            <div class="slds-media__body">
                                <h2 class="slds-text-heading--small slds-truncate" style="font-weight: bold;">
                                    Field Mapping
                                </h2>
                            </div>
                        </div>
                    </div>
                    <div class="slds-card__body slds-grid slds-wrap slds-size--23-of-24 slds-p-around--small slds-theme--default  slds-m-left--x-small slds-m-bottom--x-small slds-m-top--x-small slds-m-right--x-small">
                        <div class="slds-col--padded slds-size--1-of-2">
                            <label class="slds-form-element__label  slds-size--6-of-12" for="text-input-01">Assessable Object</label>
                            <select class="slds-select slds-size--9-of-12" id="assessableId" ng-model="selectedObject" ng-change="objectChange()" ng-options="ass.objectApi as ass.objectLabel for ass in assessableObjects">
                            </select>
                        </div>
                        <div class="slds-col--padded slds-size--1-of-2">
                            <label class="slds-form-element__label  slds-size--6-of-12" for="text-input-01">Assessment Template</label>
                            <select class="slds-select slds-size--9-of-12" id="assessmentTempId" ng-model="selectedTemplate" ng-change="tempChange()" ng-options="assTemp.Id as assTemp.ExAM__Template_name__c for assTemp in assessmentTemplate">
                            </select>
                        </div>  
                            
                         <!-- main content--> 
                        <br/>
                        <div ng-show="selectedObject != null && selectedObject != '' && selectedTemplate != null && selectedTemplate != ''" class="slds-text-heading--medium slds-p-around--small">Mapping</div>     <br/><br/>  
                        <div ng-repeat="ass in assMappingResponseList track by $index" class="slds-grid slds-wrap slds-size--1-of-1 slds-p-around--small">
                            <div class="slds-size--3-of-12" ng-if="selectedObject != null && selectedObject != '' && selectedTemplate != null && selectedTemplate != ''">
                                <select class="slds-select slds-size--3-of-4" id="assessableFieldApi" ng-model="ass.assessableFieldsApi" ng-change="fieldChange();onAssessableObjectFieldChange(ass, $index);" ng-options="assfield.fieldApi as assfield.fieldLabel for assfield in filterFields(assessableFields,ass.assessableFieldsApi)">
                                </select>
                            </div>
                            <div class="slds-size--3-of-12" ng-if="selectedObject != null && selectedObject != '' && selectedTemplate != null && selectedTemplate != ''">       
                                <select class="slds-select slds-size--3-of-4" id="mappedFromObj" ng-model="ass.mappedFrom" ng-options="eachOptn.fieldApi as eachOptn.fieldLabel for eachOptn in mappedFromOptions">     
                                </select>       
                            </div>      
                            <div class="slds-size--5-of-12" ng-if="selectedObject != null && selectedObject != '' && selectedTemplate != null && selectedTemplate != '' && ass.mappedFrom == 'Assignment Manager'">
                                <select class="slds-select slds-size--3-of-4" id="managerFieldAPI" ng-model="ass.amFieldAPI" ng-options="amField.fieldApi as amField.fieldLabel for amField in amFields" ng-change="validateFieldType(assessableFields, ass.assessableFieldsApi, amFields, ass.amFieldAPI, $index);">
                                </select>
                                <br/>       
                                <span style="color:red;display:none" id="typeErrMsg{{$index}}"></span>      
                            </div>
                            <div class="slds-size--3-of-12" ng-if="selectedObject != null && selectedObject != '' && selectedTemplate != null && selectedTemplate != '' && ass.mappedFrom != 'Assignment Manager'">
                                <select class="slds-select slds-size--3-of-4" id="questionTempId" ng-model="ass.questionId" ng-options="questionTemp.Id as questionTemp.ExAM__Section_Question__r.ExAM__Section_label__c+' - '+questionTemp.ExAM__Question_Label__c for questionTemp in filterQuestion(questionTemplate, ass.questionId,ass.assessableFieldsApi)">
                                </select>
                            </div>
                            <div class="slds-size--2-of-12" ng-if="selectedObject != null && selectedObject != '' && selectedTemplate != null && selectedTemplate != '' && ass.mappedFrom != 'Assignment Manager'">
                                <select class="slds-select slds-size--5-of-6" id="storedType{{$index}}" ng-model="ass.storeAnswerResponseOrWeight" ng-options="eachOptn.fieldApi as eachOptn.fieldLabel for eachOptn in availableOptions" ng-change="validateType(ass, $index)">
                                </select>
                                <br/>
                                <span style="color:red;display:none" id="errMsg{{$index}}">Selected assessable field does not hold numeric value</span>
                            </div>
                            <div class="slds-size--1-of-12" ng-if="selectedObject != null && selectedObject != '' && selectedTemplate != null && selectedTemplate != ''" ng-click="removeMapping($index)">
                                <span class="slds-icon_container">
                                    <svg aria-hidden="true" class="slds-icon icon-utility-delete slds-icon-text-default">
                                        <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="{!URLFOR($Resource.SLDS052, '/assets/icons/utility-sprite/svg/symbols.svg#delete')}">
                                        </use>
                                    </svg>
                                </span>
                            </div>
                        </div>
                    </div> 
                    <div class="slds-card__footer slds-grid slds-wrap slds-size--1-of-1"  ng-show="selectedObject != null && selectedObject != '' && selectedTemplate != null && selectedTemplate != ''">
                        <div class="slds-size--1-of-1 slds-p-around--small" style="display:inline-block;">
                            <div class="slds-size--1-of-2">
                                <span class="slds-icon__container slds-icon__container--circle slds-icon-action-new" ng-click="addMappingFields();">
                                    <svg aria-hidden="true" class="slds-icon slds-icon-action-new slds-icon--small ">
                                        <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="{!URLFOR($Resource.SLDS052, '/assets/icons/action-sprite/svg/symbols.svg#new')}">
                                        </use>
                                    </svg>
                                </span>
                            </div>
                        </div>
                    
                        <div class="slds-size--1-of-2" style="display:inline-block;text-align: right;">
                            <button class="slds-button slds-button--neutral" ng-click="cancelMapping()" type="button">Cancel</button>
                            <button class="slds-button slds-button--brand" type="button" ng-click="saveMapping();">Save</button>
                        </div>
                    </div> 
                       
                </div>
                <!--Start Case field Mapping -->
                <div class="slds-card slds-m-top--x-small slds-m-bottom--x-large">
                    <div class="slds-card__header slds-grid">
                        <div class="slds-media slds-media--center slds-has-flexi-truncate">
                            <div class="slds-media__body">
                                <h2 class="slds-text-heading--small slds-truncate" style="font-weight: bold;">
                                    Case Field Mapping
                                </h2>
                            </div>
                        </div>
                    </div>
                    <div class="slds-card__body slds-grid slds-wrap slds-size--23-of-24 slds-p-around--small slds-theme--default  slds-m-left--x-small slds-m-bottom--x-small slds-m-top--x-small slds-m-right--x-small">
                        <!--<div class="slds-col--padded slds-size--1-of-2">
                            <label class="slds-form-element__label  slds-size--6-of-12" for="text-input-01">Assessable Object</label>
                            
                            <select class="slds-select slds-size--9-of-12" id="assessableId" ng-model="caseSelectedObject" ng-change="objectChange()" ng-options="ass.objectApi as ass.objectLabel for ass in assessableObjects">
                            </select>
                        </div>-->
                        <div class="slds-col--padded slds-size--1-of-1 slds-grid slds-grid--align-center">
                            <label class="slds-form-element__label  slds-size--2-of-12 slds-align-middle" for="text-input-01" style="text-align:right;">Assessment Template</label>
                            <select class="slds-select slds-size--5-of-12" id="assessmentTempId" ng-model="selectedTemplate2" ng-change="tempChange2()" ng-options="assTemp.Id as assTemp.ExAM__Template_name__c for assTemp in assessmentTemplate">
                            </select>
                            
                        </div>  
                            
                         <!-- main content--> 
                        <br/>
                        <div ng-show="caseSelectedObject != null && caseSelectedObject != '' && selectedTemplate2 != null && selectedTemplate2 != ''" class="slds-text-heading--medium slds-p-around--small">Mapping</div>     <br/><br/>  
                        <div ng-repeat="ass in assMappingResponseList2 track by $index" class="slds-grid slds-wrap slds-size--1-of-1 slds-p-around--small">
                            <div class="slds-size--5-of-12" ng-show="caseSelectedObject != null && caseSelectedObject != '' && selectedTemplate2 != null && selectedTemplate2 != ''">
                                <!--<label class="slds-form-element__label slds-size--6-of-12" for="text-input-02">Assessable Fields </label>-->
                                <select class="slds-select slds-size--9-of-12" id="sectionTempId" ng-model="ass.assessableFieldsApi" ng-change="fieldChange()" ng-options="assfield.fieldApi as assfield.fieldLabel for assfield in filterFields2(assessableFields2,ass.assessableFieldsApi)">
                                </select>
                            </div>
                            <div class="slds-size--5-of-12" ng-show="caseSelectedObject != null && caseSelectedObject != '' && selectedTemplate2 != null && selectedTemplate2 != ''">
                                <!--<label class="slds-form-element__label  slds-size--6-of-12">Question Template</label>-->
                                <select class="slds-select slds-size--9-of-12" id="questionTempId" ng-model="ass.questionId" ng-options="questionTemp.Id as questionTemp.ExAM__Section_Question__r.ExAM__Section_label__c+' - '+questionTemp.ExAM__Question_Label__c for questionTemp in filterQuestion(questionTemplate2, ass.questionId,ass.assessableFieldsApi)">
                                </select>
                            </div>
                            <div class="slds-size--2-of-12">
                                <span ng-show="caseSelectedObject != null && caseSelectedObject != '' && selectedTemplate2 != null && selectedTemplate2 != ''" class="slds-icon_container" ng-click="removeMapping2($index)">
                                    <svg aria-hidden="true" class="slds-icon icon-utility-delete slds-icon-text-default">
                                        <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="{!URLFOR($Resource.SLDS052, '/assets/icons/utility-sprite/svg/symbols.svg#delete')}">
                                        </use>
                                    </svg>
                                </span>
                            </div>
                           
                            
                        </div>
                                     
                    </div> 
                    <div class="slds-card__footer slds-grid slds-wrap slds-size--1-of-1"  ng-show="caseSelectedObject != null && caseSelectedObject != '' && selectedTemplate2 != null && selectedTemplate2 != ''">
                        <div class="slds-size--1-of-1 slds-p-around--small" style="display:inline-block;">
                            <div class="slds-size--1-of-2">
                                <span class="slds-icon__container slds-icon__container--circle slds-icon-action-new" ng-click="addMappingFields2();">
                                    <svg aria-hidden="true" class="slds-icon slds-icon-action-new slds-icon--small ">
                                        <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="{!URLFOR($Resource.SLDS052, '/assets/icons/action-sprite/svg/symbols.svg#new')}">
                                        </use>
                                    </svg>
                                </span>
                            </div>
                        </div>
                    
                        <div class="slds-size--2-of-3" style="display:inline-block;text-align: right;">
                            <button class="slds-button slds-button--neutral" ng-click="cancelMapping2()" type="button">Cancel</button>
                            <button class="slds-button slds-button--brand" type="button" ng-click="saveMapping2();">Save Case Field Mapping </button>
                        </div>
                    </div> 
                       
                </div><br/>
                <!--End Case field Mapping -->
                <div class="slds-col--padded">
                    <a href="/apex/AdminConfig"> Back to admin configuration page </a>
                </div>
            </form>        
        </div>
        <script type="text/javascript">
            
            var underscore = angular.module('underscore', []);
            underscore.factory('_', ['$window', function($window) {
                return $window._; // assumes underscore has already been loaded on the page
            }]);
            
            var app = angular.module('FieldMappingApp', ['underscore']);
            app.controller('FieldMappingAppCtrl', function($scope, filterFilter,_) {
                
                $scope.assessableObjects = [];
                $scope.selectedObject = '';
                
                $scope.caseSelectedObject = 'Case';
                $scope.assessableFields = [];
                $scope.assessableFields2 = [];
                
                $scope.fldApiwithAssessableFieldsMap = {};
                $scope.fldApiwithAssessableFieldsMap2 = {};
                
                $scope.assessmentTemplate = [];
                $scope.selectedTemplate = '';
                $scope.selectedTemplate2 = '';
                
                
                $scope.sectionTemplate = [];
                $scope.selectedSection = '';
                
                $scope.questionTemplate = [];
                $scope.questionTemplate2 = [];
                
                $scope.assMappingResponseList = {!assMappingResponseListJSON};
                $scope.assMappingResponseList2 = {!assMappingResponseListJSON};
                $scope.finalAssMappingResponseList = [];
                $scope.finalAssMappingResponseList2 = [];

                $scope.mappedFromOptions = [{'fieldLabel': 'Answer', 'fieldApi': 'Answer'}, {'fieldLabel': 'Assignment Manager', 'fieldApi': 'Assignment Manager'}];
                $scope.availableOptions = [{'fieldLabel': 'Response', 'fieldApi': 'Response'}, {'fieldLabel': 'Score', 'fieldApi': 'Score'}];

                $scope.HasErrorInAMFieldMapping = false;

                $('.maskDiv').hide();
                $('.slds-notify--alert.slds-theme--success').hide();
                $('.slds-notify--alert.slds-theme--error').hide();
                //console.log('::::$scope.assMappingResponseList :::',$scope.assMappingResponseList );
                
                
                if ('{!JSENCODE(assessableObjectJSON)}' != null && '{!JSENCODE(assessableObjectJSON)}' != '' && '{!JSENCODE(assessableObjectJSON)}' != 'null') {
                    $scope.assessableObjects = JSON.parse('{!JSENCODE(assessableObjectJSON)}');
                }
                //console.log('$scope.assessableObjects::::',$scope.assessableObjects);
                
                if ('{!JSENCODE(assessmentTemplateJSON)}' != null && '{!JSENCODE(assessmentTemplateJSON)}' != '' && '{!JSENCODE(assessmentTemplateJSON)}' != 'null') {
                    $scope.assessmentTemplate = JSON.parse('{!JSENCODE(assessmentTemplateJSON)}');
                    var assTemp = new Object();
                    assTemp.Id = '';
                    assTemp.ExAM__Template_name__c = '--None--';
                    $scope.assessmentTemplate.splice(0,0,assTemp);
                }

                if ('{!JSENCODE(amFieldsListJSON)}' != null && '{!JSENCODE(amFieldsListJSON)}' != '' && '{!JSENCODE(amFieldsListJSON)}' != 'null') {        
                    $scope.amFields = JSON.parse('{!JSENCODE(amFieldsListJSON)}');      
                }

                $scope.objectChange = function() {
                    //console.log('::selected object:::',$scope.selectedObject);
                    $scope.assMappingResponseList = [];
                    $('.maskDiv').show();
                    $('.slds-notify--alert.slds-theme--error').hide();
                    if ($scope.selectedObject != '') {
                        ExAM.AssessableFieldQuestionMappingController.assessableFields($scope.selectedObject, function(result, event) {
                            if (event.status) {
                                //console.log('::::result:::',result);
                                if (result != null && result != '') {
                                    //console.log('::::result2 ::::',typeof(result));
                                    result = result.replace("&#39;","'");
                                    $scope.assessableFields = JSON.parse(_.unescape((result)));   
                                    //console.log(':::: $scope.assessableFields:::2::::',$scope.assessableFields);                                
                                    for (var count = 0 ; count <= $scope.assessableFields.length; count++) {
                                        if (angular.isDefined($scope.assessableFields[count]) && angular.isDefined($scope.assessableFields[count].fieldApi) && $scope.assessableFields[count].fieldApi != '') {
                                            
                                            $scope.fldApiwithAssessableFieldsMap[$scope.assessableFields[count].fieldApi] = $scope.assessableFields[count];
                                        }
                                    }
                                    //console.log(':::::$scope.fldApiwithAssessableFieldsMap:::',$scope.fldApiwithAssessableFieldsMap);
                                    //$scope.assMappingResponseList.push();
                                    if ($scope.selectedTemplate != null && $scope.selectedTemplate != '') {
                                        $scope.existingFieldMapping($scope.selectedObject, $scope.selectedTemplate );
                                    }
                                    
                                } else {
                                    //alert('No Mapping fields found');
                                    $('.errorMsg').text('Error: No Mapping fields found');
                                    $('.slds-notify--alert.slds-theme--error').show();
                                }  
                                $('.maskDiv').hide();              
                                $scope.$apply();            
                            } else {
                                $('.maskDiv').hide();
                                $('.errorMsg').text('Error: No Mapping fields found');
                                $('.slds-notify--alert.slds-theme--error').show();
                                
                            }
                        });
                    } else {
                        $('.maskDiv').hide();
                    }
                }
                //Start case change 06-07-2016
                ExAM.AssessableFieldQuestionMappingController.assessableFields('Case', function(result, event) {
                    if (event.status) {
                        //console.log('::::result:::',result);
                        if (result != null && result != '') {
                            //console.log('::::result2 ::::',typeof(result));
                            result = result.replace("&#39;","'");
                            $scope.assessableFields2 = JSON.parse(_.unescape((result)));   
                            //console.log(':::: $scope.assessableFields2:::2::::',$scope.assessableFields2);                                
                            for (var count = 0 ; count <= $scope.assessableFields2.length; count++) {
                                if (angular.isDefined($scope.assessableFields2[count]) && angular.isDefined($scope.assessableFields2[count].fieldApi) && $scope.assessableFields2[count].fieldApi != '') {
                                    //console.log(':$scope.assessableFields2[count]:::::',$scope.assessableFields2[count].fieldApi);
                                    $scope.fldApiwithAssessableFieldsMap2[$scope.assessableFields2[count].fieldApi] = $scope.assessableFields2[count];
                                }
                            }
                            //console.log(':::::$scope.fldApiwithAssessableFieldsMap2:::',$scope.fldApiwithAssessableFieldsMap2);
                            //$scope.assMappingResponseList.push();
                            if ($scope.selectedTemplate2 != null && $scope.selectedTemplate2 != '') {
                                $scope.existingFieldMapping2($scope.caseSelectedObject, $scope.selectedTemplate2 );
                            }
                            
                        } else {
                            //alert('No Mapping fields found');
                            $('.errorMsg').text('Error: No Mapping fields found');
                            $('.slds-notify--alert.slds-theme--error').show();
                        }  
                        $('.maskDiv').hide();              
                        $scope.$apply();            
                    } else {
                        $('.maskDiv').hide();
                        $('.errorMsg').text('Error: No Mapping fields found');
                        $('.slds-notify--alert.slds-theme--error').show();
                        
                    }
                });
                
                $scope.tempChange2 = function() {
                    //console.log(':::selectedTemplate2::::',$scope.selectedTemplate2);
                    //$scope.sectionTemplate = [];
                    $scope.assMappingResponseList2 = [];
                    $('.maskDiv').show();
                    $('.slds-notify--alert.slds-theme--error').hide();
                    if ($scope.selectedTemplate2 != '') {
                        ExAM.AssessableFieldQuestionMappingController.getQuestionRecords($scope.selectedTemplate2, function(result, event) {
                            if (event.status) {
                                
                                if (result != null && result != '') {
                                    result = result.replace(/&#39;/g,"'");
                                    //console.log('::::result:case:::',result);
                                    $scope.questionTemplate2 = JSON.parse(_.unescape(result));
                                    if ($scope.questionTemplate2 == null || $scope.questionTemplate2.length == 0) {
                                        $('.errorMsg').text('Error: No question template found');
                                        $('.slds-notify--alert.slds-theme--error').show();
                                    } else {
                                        if ($scope.caseSelectedObject != null && $scope.caseSelectedObject != '') {
                                            $scope.existingFieldMapping2($scope.caseSelectedObject, $scope.selectedTemplate2 );
                                        }
                                    }
                                    //console.log('::::questionTemplate2:::',$scope.questionTemplate2);
                                    $('.maskDiv').hide();
                                    $scope.$apply();
                                } else {
                                    $('.errorMsg').text('Error: No question template found');
                                    $('.slds-notify--alert.slds-theme--error').show();
                                    
                                }
                                $('.maskDiv').hide();
                            } else {
                                $('.errorMsg').text('Error: No question template found');
                                $('.slds-notify--alert.slds-theme--error').show();
                            
                                $('.maskDiv').hide();
                            }
                        });
                    } else {
                        $('.maskDiv').hide();
                    }
                }
                //End case change 06-07-2016
                $scope.tempChange = function() {
                    //console.log(':::selectedTemplate::::',$scope.selectedTemplate);
                    //$scope.sectionTemplate = [];
                    $scope.assMappingResponseList = [];
                    $('.maskDiv').show();
                    $('.slds-notify--alert.slds-theme--error').hide();
                    if ($scope.selectedTemplate != '') {
                        ExAM.AssessableFieldQuestionMappingController.getQuestionRecords($scope.selectedTemplate, function(result, event) {
                            if (event.status) {
                                
                                if (result != null && result != '') {
                                    result = result.replace(/&#39;/g,"'");
                                    $scope.questionTemplate = JSON.parse(_.unescape(result));
                                    if ($scope.questionTemplate == null || $scope.questionTemplate.length == 0) {
                                        $('.errorMsg').text('Error: No question template found');
                                        $('.slds-notify--alert.slds-theme--error').show();
                                    } else {
                                        if ($scope.selectedObject != null && $scope.selectedObject != '') {
                                            $scope.existingFieldMapping($scope.selectedObject, $scope.selectedTemplate );
                                        }
                                    }
                                    //console.log('::::questionTemplate:::',$scope.questionTemplate);
                                    $('.maskDiv').hide();
                                    $scope.$apply();
                                } else {
                                    $('.errorMsg').text('Error: No question template found');
                                    $('.slds-notify--alert.slds-theme--error').show();
                                    
                                }
                                $('.maskDiv').hide();
                            } else {
                                $('.errorMsg').text('Error: No question template found');
                                $('.slds-notify--alert.slds-theme--error').show();
                            
                                $('.maskDiv').hide();
                            }
                        });
                    } else {
                        $('.maskDiv').hide();
                    }
                }
                
                $scope.existingFieldMapping = function(selectedobj, selectedTemp) {
                    ExAM.AssessableFieldQuestionMappingController.existingFieldMapping(selectedobj, selectedTemp, false, function(result, event) {
                        if (result != null && result != '' && result.length > 0) {
                            $scope.assMappingResponseList = JSON.parse(_.unescape(result));
                        } else {
                            $scope.assMappingResponseList.push({assessableFieldsApi: '',mappedFrom: 'Answer',amFieldAPI:'',questionId: '',storeAnswerResponseOrWeight: 'Response'});
                        }
                        $scope.$apply();
                    });
                }
                
                $scope.existingFieldMapping2 = function(selectedobj, selectedTemp) {
                    ExAM.AssessableFieldQuestionMappingController.existingFieldMapping(selectedobj, selectedTemp, true, function(result, event) {
                        if (result != null && result != '' && result.length > 0) {
                            $scope.assMappingResponseList2 = JSON.parse(_.unescape(result));
                        } else {
                            $scope.assMappingResponseList2.push({assessableFieldsApi: '',questionId: ''});
                        }
                        $scope.$apply();
                    });
                }
                
                $scope.addMappingFields = function() {
                    if (!$scope.HasErrorInOtherObjFieldMapping && !$scope.HasErrorInAMFieldMapping && $scope.assMappingResponseList.length < $scope.assessableFields.length) {
                        $scope.assMappingResponseList.push({assessableFieldsApi: '',mappedFrom: 'Answer',amFieldAPI:'',questionId: '',storeAnswerResponseOrWeight: 'Response'});
                    }
                } 
                $scope.addMappingFields2 = function() {
                    //console.log(':::$scope.assessableFields2::::',$scope.assessableFields2);
                    if ($scope.assMappingResponseList2.length < $scope.assessableFields2.length) {
                        
                        $scope.assMappingResponseList2.push({assessableFieldsApi: '',questionId: ''});
                    }
                }               
                
                $scope.filterQuestion = function(questionTemplate, selectedQuestion, fieldapi) {
                    //console.log(':::fieldapi::::',fieldapi);
                    var question = [];
                    for (var i = 0; i < questionTemplate.length; i++) {
                        var isAddedQuestion = false;
                        for (var j = 0; j < $scope.assMappingResponseList.length; j++) {
                            //console.log('::::questionTemplate[i].Id::::'+questionTemplate[i].Id+'::::$scope.assMappingResponseList[j].questionId::::'+$scope.assMappingResponseList[j].questionId);
                            if (questionTemplate[i].Id == $scope.assMappingResponseList[j].questionId && questionTemplate[i].Id != selectedQuestion) {
                                //isAddedQuestion = true;
                                //console.log('::::istrue::::');
                            } else if (angular.isDefined($scope.fldApiwithAssessableFieldsMap) 
                                        && angular.isDefined($scope.fldApiwithAssessableFieldsMap[fieldapi])) {
                                
                                if ( ($scope.fldApiwithAssessableFieldsMap[fieldapi].fieldType == 'DATETIME' 
                                            || $scope.fldApiwithAssessableFieldsMap[fieldapi].fieldType == 'DATE')
                                      && questionTemplate[i].ExAM__Question_Type__c != 'Date'
                                            ) {
                                    isAddedQuestion = true;
                                } else if ($scope.fldApiwithAssessableFieldsMap[fieldapi].fieldType == 'PICKLIST'
                                            && questionTemplate[i].ExAM__Question_Type__c != 'RadioPicklist'
                                            &&  questionTemplate[i].ExAM__Question_Type__c != 'Dropdown Picklist') {
                                        
                                    isAddedQuestion = true;
                                }
                            }
                        } 
                        if (!isAddedQuestion) {
                            question.push(questionTemplate[i]);
                        }
                    }
                    
                    return question;
                }
                
                $scope.filterFields = function(fieldList, selectedField) {
                    var fieldArray = [];
                    for (var i = 0; i < fieldList.length; i++) {
                        var isAddedField = false;
                        for (var j = 0; j < $scope.assMappingResponseList.length; j++) {
                            if (fieldList[i].fieldApi == $scope.assMappingResponseList[j].assessableFieldsApi && fieldList[i].fieldApi != selectedField) {
                                isAddedField = true;
                                //console.log('::::istrue::::');
                            }
                        } 
                        if (!isAddedField) {
                            fieldArray.push(fieldList[i]);
                        }
                    }
                    //console.log('::::result:::::fieldArray:::::',fieldArray);
                    return fieldArray;
                }
                
                $scope.filterFields2 = function(fieldList, selectedField) {
                    var fieldArray = [];
                    for (var i = 0; i < fieldList.length; i++) {
                        var isAddedField = false;
                        for (var j = 0; j < $scope.assMappingResponseList2.length; j++) {
                            if (fieldList[i].fieldApi == $scope.assMappingResponseList2[j].assessableFieldsApi && fieldList[i].fieldApi != selectedField) {
                                isAddedField = true;
                                //console.log('::::istrue::::');
                            }
                        } 
                        if (!isAddedField) {
                            fieldArray.push(fieldList[i]);
                        }
                    }
                    //console.log('::::result:::::fieldArray:::::',fieldArray);
                    return fieldArray;
                }
                
                $scope.removeMapping = function(indexVal) {
                    //console.log('::::indexVal:::',$scope.assMappingResponseList[indexVal]);
                    
                    if ($scope.assMappingResponseList[indexVal].MappingRecordId != null &&
                        $scope.assMappingResponseList[indexVal].MappingRecordId != '') {
                        var deleteMappingId = $scope.assMappingResponseList[indexVal].MappingRecordId;
                        $scope.assMappingResponseList.splice(indexVal,1);
                        ExAM.AssessableFieldQuestionMappingController.deleteMappingRecord(deleteMappingId, function(result, event) {
                            if (event.status) {
                                console.log('successfully deleted the record:'+deleteMappingId);
                                
                            } else {
                                alert(event.message);
                            }
                        });
                    } else {
                        $scope.assMappingResponseList.splice(indexVal,1);
                    }
                }
                
                $scope.removeMapping2 = function(indexVal) {
                    //console.log('::::indexVal:::',$scope.assMappingResponseList2[indexVal]);
                    
                    if ($scope.assMappingResponseList2[indexVal].MappingRecordId != null &&
                        $scope.assMappingResponseList2[indexVal].MappingRecordId != '') {
                        var deleteMappingId = $scope.assMappingResponseList2[indexVal].MappingRecordId;
                        $scope.assMappingResponseList2.splice(indexVal,1);
                        ExAM.AssessableFieldQuestionMappingController.deleteMappingRecord(deleteMappingId, function(result, event) {
                            if (event.status) {
                                console.log('successfully deleted the record:'+deleteMappingId);                                
                            } else {
                                alert(event.message);
                            }
                        });
                    } else {
                        $scope.assMappingResponseList2.splice(indexVal,1);
                    }
                }
                
                $scope.cancelMapping = function() {
                    $scope.selectedObject = '';
                    $scope.assessableFields = [];
                    
                    $scope.selectedTemplate = '';
                    $scope.questionTemplate = [];
                    $scope.assMappingResponseList = {!assMappingResponseListJSON};
                    $('.slds-notify--alert.slds-theme--success').hide();
                    $('.slds-notify--alert.slds-theme--error').hide();
                }
                $scope.cancelMapping2 = function() {
                    $scope.caseSelectedObject = '';
                    $scope.assessableFields2 = [];
                    
                    $scope.selectedTemplate2 = '';
                    
                    $scope.questionTemplate2 = [];
                    $scope.assMappingResponseList2 = {!assMappingResponseListJSON};
                    $('.slds-notify--alert.slds-theme--success').hide();
                    $('.slds-notify--alert.slds-theme--error').hide();
                }
                $scope.saveMapping = function() {
                    $('.slds-notify--alert.slds-theme--success').hide();
                    $('.slds-notify--alert.slds-theme--error').hide();
                    
                    $('.errorMsg').text('Error: ');
                    $scope.finalAssMappingResponseList = [];
                    if ($scope.selectedObject != null && $scope.selectedObject != '' && 
                        $scope.assMappingResponseList != null && $scope.assMappingResponseList.length > 0) {                        

                        var errBoxId = '';
                        var hasError = false;
                        for (var i = 0; i < $scope.assMappingResponseList.length; i++) {
                            errBoxId = ($scope.assMappingResponseList[i].mappedFrom == 'Answer') ? 'errMsg'+i : 'typeErrMsg'+i;
                            hasError = $('#'+errBoxId).is(":visible");
                            if (hasError) {
                                break;
                            }
                        }

                        if (!hasError) {

                            for (var i = 0; i < $scope.assMappingResponseList.length; i++) {
                                if (($scope.assMappingResponseList[i].assessableFieldsApi != null && $scope.assMappingResponseList[i].assessableFieldsApi != '')
                                    && (($scope.assMappingResponseList[i].mappedFrom == 'Answer' && $scope.assMappingResponseList[i].questionId != null && $scope.assMappingResponseList[i].questionId != '')
                                        ||($scope.assMappingResponseList[i].mappedFrom == 'Assignment Manager' && $scope.assMappingResponseList[i].amFieldAPI != null && $scope.assMappingResponseList[i].amFieldAPI != '')     
                                )){
                                    $scope.finalAssMappingResponseList.push($scope.assMappingResponseList[i]);    
                                }
                            }
                        
                            if ($scope.finalAssMappingResponseList.length > 0) {
                                //console.log(':::$scope.assMappingResponseList::::',$scope.assMappingResponseList);
                                //console.log('::::::$scope.finalAssMappingResponseList::::',$scope.finalAssMappingResponseList);
                                ExAM.AssessableFieldQuestionMappingController.saveFieldMapping($scope.selectedObject, $scope.finalAssMappingResponseList, $scope.selectedTemplate, false, function(result, event) {
                                    if (event.status) {
                                        var result1 = JSON.parse(_.unescape(result));
                                        if (result1 != null && result1.status) {
                                            $('.successMsg').text(result1.resultMsg);
                                            $scope.assMappingResponseList = result1.assMappingList;
                                            $('.slds-notify--alert.slds-theme--success').show();
                                            //console.log(':::$scope.assMappingResponseList::::',$scope.assMappingResponseList);
                                            $scope.$apply();
                                        } else {
                                            $('.errorMsg').text('Error: '+result1.resultMsg);
                                            $('.slds-notify--alert.slds-theme--error').show();
                                        }
                                    } else {
                                        $('.errorMsg').text('Error: '+result1.resultMsg);
                                        $('.slds-notify--alert.slds-theme--error').show();
                                    }
                                });
                            }
                        }
                    }
                }
                $scope.saveMapping2 = function() {
                    $('.slds-notify--alert.slds-theme--success').hide();
                    $('.slds-notify--alert.slds-theme--error').hide();
                    
                    $('.errorMsg').text('Error: ');
                    $scope.finalAssMappingResponseList2 = [];
                    console.log('::::save case::::',$scope.caseSelectedObject);
                    console.log('::::save case:2:::',$scope.assMappingResponseList2);
                    if ($scope.caseSelectedObject != null && $scope.caseSelectedObject != '' && 
                        $scope.assMappingResponseList2 != null && $scope.assMappingResponseList2.length > 0) {
                        
                        for (var i = 0; i < $scope.assMappingResponseList2.length; i++) {
                            if ($scope.assMappingResponseList2[i].assessableFieldsApi != null && $scope.assMappingResponseList2[i].assessableFieldsApi != '' &&
                                $scope.assMappingResponseList2[i].questionId != null && $scope.assMappingResponseList2[i].questionId != '') {
                                    
                                $scope.finalAssMappingResponseList2.push($scope.assMappingResponseList2[i]);    
                            }
                        }
                        console.log('::::::$scope.assMappingResponseList2:::',$scope.assMappingResponseList2);
                        if ($scope.finalAssMappingResponseList2.length > 0) {
                            console.log(':::$scope.assMappingResponseList2::::',$scope.assMappingResponseList2);
                            console.log('::::::$scope.finalAssMappingResponseList2::::',$scope.finalAssMappingResponseList2);
                            ExAM.AssessableFieldQuestionMappingController.saveFieldMapping($scope.caseSelectedObject, $scope.finalAssMappingResponseList2, $scope.selectedTemplate2, true, function(result, event) {
                                if (event.status) {
                                    console.log('::::result::::',result);
                                    var result1 = JSON.parse(_.unescape(result));
                                    if (result1 != null && result1.status) {
                                        $('.successMsg').text(result1.resultMsg);
                                        $scope.assMappingResponseList2 = result1.assMappingList;
                                        $('.slds-notify--alert.slds-theme--success').show();
                                        //console.log(':::$scope.assMappingResponseList::::',$scope.assMappingResponseList);
                                        $scope.$apply();
                                    } else {
                                        $('.errorMsg').text('Error: '+result1.resultMsg);
                                        $('.slds-notify--alert.slds-theme--error').show();
                                    }
                                } else {
                                    $('.errorMsg').text('Error: '+result1.resultMsg);
                                    $('.slds-notify--alert.slds-theme--error').show();
                                }
                            });
                        }
                        
                    }
                }
                $scope.closeNotification = function(isSuccess) {
                    if (isSuccess) {
                        $('.slds-notify--alert.slds-theme--success').hide();
                    } else {
                        $('.slds-notify--alert.slds-theme--error').hide();
                    }
                }
                $scope.validateType = function(obj, position) {
                    var objId = 'errMsg'+position;
                    var fieldsArray = $scope.assessableFields;
                    $('#'+objId).hide();
                    $scope.HasErrorInOtherObjFieldMapping = false;
                    $.each(fieldsArray, function(key, eachField) {
                        if ((eachField.fieldApi == obj.assessableFieldsApi)
                            && (obj.storeAnswerResponseOrWeight == 'Score')
                            && (eachField.fieldType != 'DOUBLE')
                        ) {
                            $('#'+objId).show();
                            $scope.HasErrorInOtherObjFieldMapping = true;
                        }
                    });
                }
                $scope.validateFieldType = function(assessableObjectFields, selectedAssessableObjField, amFields, selectedAMField, position) {      
                    var objFieldType, amFieldType;
                    var typeArray = ['DATE','DATETIME','DOUBLE'];
                    var boxId = 'typeErrMsg'+position;      
                    $scope.HasErrorInAMFieldMapping = false;        
                    $('#'+boxId).hide();        
                    for(var i=0;i< assessableObjectFields.length;i++) {     
                        if ( selectedAssessableObjField == assessableObjectFields[i].fieldApi ) {       
                            objFieldType = assessableObjectFields[i].fieldType;     
                            break;      
                        }       
                    }       
                    for(var j=0;j< amFields.length;j++) {       
                        if ( selectedAMField == amFields[j].fieldApi ) {        
                            amFieldType = amFields[j].fieldType;        
                            break;      
                        }       
                    }
                    if ( (objFieldType == 'STRING' && typeArray.indexOf(amFieldType) >= 0)
                         || (objFieldType == 'TEXTAREA' && typeArray.indexOf(amFieldType) >= 0)
                         || (objFieldType == 'PICKLIST' && amFieldType != 'PICKLIST')
                         || (objFieldType != amFieldType && (typeArray.indexOf(objFieldType) >= 0 || typeArray.indexOf(amFieldType) >= 0))
                    ) {     
                        var msg = 'Selected assessable field does not hold '+amFieldType.toLowerCase()+' value';        
                        $('#'+boxId).html( msg );       
                        $('#'+boxId).show();        
                        $scope.HasErrorInAMFieldMapping = true;     
                    }       
                }       
                $scope.onAssessableObjectFieldChange = function(configuredRecord, position) {       
                    if (configuredRecord.mappedFrom == 'Answer') {      
                        $scope.validateType(configuredRecord, position);        
                    }       
                    else if (configuredRecord.mappedFrom == 'Assignment Manager') {     
                        $scope.validateFieldType($scope.assessableFields, configuredRecord.assessableFieldsApi, $scope.amFields, configuredRecord.amFieldAPI, position);        
                    }       
                }
            });
        </script>
    </html>
</apex:page>