<apex:page >    
    <div xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
        <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.5/angular.min.js"></script>
        <apex:includeScript value="{!URLFOR($Resource.ExAM__Datepicker,'Datepicker/jquery-1.10.2.js')}"/>
        
         <script type="text/javascript">
            var __sfdcSessionId = '{!GETSESSIONID()}';
        </script>
        <script src="../../soap/ajax/35.0/connection.js" type="text/javascript"></script>
        <script src="../../soap/ajax/35.0/apex.js" type="text/javascript"></script>
        <head>
            <title>Upload Hotspot Image</title>
            <meta http-equiv="X-UA-Compatible" content="IE=Edge"/>
            <apex:stylesheet value="{!URLFOR($Resource.ExAM__SLDS052, '/assets/styles/salesforce-lightning-design-system-vf.css')}" />
        </head>
        <body>
            <div class="slds" ng-app="hotspotUploadQuesImageApp" ng-controller="hotspotUploadQuesImageCtrl">
                <div class="slds-notify_container" ng-show ="failedFlag" style="display:none">
                    <div class="slds-notify slds-notify--alert slds-theme--error slds-theme--alert-texture" role="alert" >
                        <h2>Upload Failed</h2>
                    </div>
                </div>
                <form class="slds-form">
                    <div class="slds-card slds-m-top--x-small slds-m-bottom--x-large">
                        <div class="slds-card__header slds-grid">
                            <div class="slds-media slds-media--center slds-has-flexi-truncate">
                                <div class="slds-media__body">
                                    <h2 class="slds-text-heading--small slds-truncate" style="font-size: x-large;font-weight: 300;">Upload Hotspot Image</h2>
                                </div>
                            </div>
                        </div>
                        <div class="slds-card__body" style="background-color:white;">
                            <div class="slds-form-element__help errorSelect" ng-show ="ErrorFlag" style="color:red;font-size:15px;padding-left:30px;"> Please choose a valid Image File </div>
                            <div class="slds-grid slds-wrap slds-p-around--small" style="padding-left:30px;">
                                <table>
                                    <tr>
                                        <td>
                                            <input type="file" onchange="angular.element(this).scope().changefile1()" class="inputfile" data-file="imageUpload" ng-model="imageUpload" accept="image/*"/>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td>
                                            <label style="font-size:12px;font-style:italic"> Recommended image size 240 x 320</label>
                                        </td>
                                    </tr>
                                </table>
                                
                            </div>
                        </div>  
                        <!--<div class="slds-size--4-of-12" style="padding:1%">
                            <select ng-options="item.value as item.label for item in selectionPickList" ng-model="selectedPickList" class="slds-input"/>
                        </div>-->
                        
                        <!--<div class="slds-size--1-of-1 slds-grid" ng-show="isLoadedImage">
                            <div class="slds-size--1-of-4">
                                <div class="slds-size--1-of-2"> <label> Width :</label> </div><div class="slds-size--1-of-2"><input type="number" class="slds-input" ng-model="hotspotImgProp.imageWidth"/></div>
                            </div>
                            <div class="slds-size--1-of-4">
                                <div class="slds-size--1-of-2">Height : </div><div class="slds-size--1-of-2"><input type="number" class="slds-input" ng-model="hotspotImgProp.imageHeight"/></div>
                            </div>
                            <div class="slds-size--2-of-4"></div>
                        </div>-->
                        <div class="slds-size--1-of-1 slds-grid" ng-show="isLoadedImage">
                            
                            <div class="slds-size--1-of-3 slds-m-around--x-small">
                                <canvas id="canvas1"  width="{{hotspotImgProp.imageWidth}}" height="{{hotspotImgProp.imageHeight}}" onclick="angular.element(this).scope().doClick(event);" onmousedown="angular.element(this).scope().startMouseDown(event);" onmouseup="angular.element(this).scope().EndMouseUp(event);"/>
                            </div>
                            <div class="slds-size--2-of-3">
                            
                                
                                <div class="slds-size--1-of-1 slds-grid">
                                    
                                    <div class="slds-size--3-of-12 slds-m-around--x-small">
                                        <strong> Shape </strong>
                                    </div>
                                    <div class="slds-size--3-of-12 slds-m-around--x-small">
                                        <strong> Answer Option </strong>
                                    </div>
                                    <div class="slds-size--3-of-12 slds-m-around--x-small slds-wrap">
                                        <strong> coords </strong>
                                    </div>
                                    
                                    <div class="slds-size--3-of-12 slds-m-around--x-small">
                                        <strong> Action </strong>
                                    </div>
                                    
                                </div>
                                
                                <div class="slds-size--1-of-1 slds-grid" ng-repeat="area in hotspotImgProp.area">
                                    
                                    <div class="slds-size--3-of-12 slds-m-around--x-small">
                                        <select ng-options="item.value as item.label for item in selectionPickList" ng-model="area.shape" ng-change="shapeChange($index);" class="slds-select shape{{$index}}" ng-disabled="$index != 0"/><br/>
                                        <div class="slds-form-element__help" style="display:none"> Please select shape </div>
                                    </div>
                                    <div class="slds-size--3-of-12 slds-m-around--x-small">
                                        <input type="text" class="slds-input hotspot{{$index}}" placeholder="Hotspot Value" ng-model="area.areaValue"/><br/>
                                        <div class="slds-form-element__help" style="display:none"> Please give hotspot value </div>
                                    </div>
                                    <div class="slds-size--3-of-12 slds-m-around--x-small slds-wrap">
                                        <label class="coords{{$index}}" > {{area.coords}}</label><br/>
                                        <div class="slds-form-element__help" style="display:none"> Please select coords in image </div>                                                                  
                                    </div>
                                    
                                    <div class="slds-col--padded slds-size--3-of-12">
                                        <span class="slds-icon__container slds-icon__container--circle slds-icon-action-new" ng-click="newSelection($index);" ng-show="$index == 0">
                                            <svg aria-hidden="true" class="slds-icon slds-icon--x-small" style="width:12px;height:12px;">
                                                <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="{!URLFOR($Resource.SLDS052, '/assets/icons/action-sprite/svg/symbols.svg#new')}">
                                                </use>
                                            </svg>
                                        </span>
                                        <span class="slds-icon__container slds-icon-action-delete slds-icon__container--circle" ng-click="removeShape($index);">
                                            <svg aria-hidden="true" class="slds-icon slds-icon--small" style="width: 12px;height: 12px;">
                                                <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="{!URLFOR($Resource.SLDS052, '/assets/icons/action-sprite/svg/symbols.svg#delete')}">
                                                </use>
                                            </svg>
                                        </span>
                                    </div>
                                    
                                </div>
                            </div>
                        </div>
                        
                        <div class="slds-card__footer" style="background-color:white;padding-left: 100px;">
                            <button class="slds-button slds-button--neutral" type="button" ng-click="uploadImage()" style="background-color: #0070D2;color:white;">Upload</button>
                            <button class="slds-button slds-button--neutral" type="button" ng-click="uploadCancel()" style="background-color: #0070D2;color:white;">Cancel</button>
                        </div> 
                        <!--<div class="slds-card__footer" style="background-color:white;padding-left: 100px;">
                            <button class="slds-button slds-button--neutral" type="button" ng-click="newSelection()" style="background-color: #0070D2;color:white;">New Selection</button>
                        </div>-->
                    </div>
                    
                </form>
            </div>    
        </body>
        <script>
            var app = angular.module('hotspotUploadQuesImageApp', []);
            app.directive('file', function() {
                return {
                    require: 'ngModel',
                    scope: {
                        file: '='
                    },
                    link: function(scope, el, attrs){
                        el.bind('change', function(event){
                            var files = event.target.files;
                            var file = files[0];
                            var reader = new FileReader();
                            reader.onload = loaded;
                            reader.onerror = errorHandler;
                            reader.readAsDataURL(file);
                            
                            function loaded(evt){
                                scope.file = {};
                                var fileContent = String(evt.target.result);
                                fileContent = fileContent.substr(fileContent.indexOf(',') + 1);
                                
                                scope.file.resultbody = fileContent ;
                                scope.file.name = file ? file.name : undefined;
                                scope.file.contenttype = file ? file.type : undefined;
                                
                                scope.$apply(); 
                            }
                            
                            function errorHandler(evt) {
                                if (evt.target.error.name == 'NotReadableError') {
                                    alert('File could not be read');
                                }
                                else {
                                    alert(evt.target.error);
                                }
                            }
                            
                        });
                    }
                };
            });
                
            app.controller('hotspotUploadQuesImageCtrl',function($scope,$timeout){
            
                var pid = "{!$CurrentPage.parameters.quesTempId}";
                $scope.ErrorFlag = false;
                $scope.failedFlagFlag = false;
                $scope.imageUpload = {};
                $scope.selectionPickList = [];
                $scope.selectedPickList;
                $scope.hotspotImgProp = {};
                $scope.hotspotImgProp.area = [];
                var hotspotAreaObj = {};
                hotspotAreaObj.shape = '';
                $scope.hotspotImgProp.area.push(hotspotAreaObj);
                
                $scope.hotspotImgProp.questionImageId = '';
                $scope.hotspotImgProp.imageWidth = 240;
                $scope.hotspotImgProp.imageHeight = 320;
                
                $scope.selectionPickList.push({label:"-- Selection Type --",value:""},{label:"Circle",value:"circle"},{label:"Polygon",value:"poly"},{label:"Rectangle",value:"rect"});
                $scope.selectedPickList = '';
                
                $scope.isLoadedImage = false;
                $scope.currentIndex = 0;
                $scope.disabled = [];
                
                $scope.uploadImage = function() {
                    var isErrorPage = $scope.validatePage(0);
                    if (!isErrorPage) {
                        var hotspotresult = sforce.connection.query("select Name, Id from Attachment where ParentId = '"+pid+"' AND Name = 'Hotspot-Image' ORDER BY LastModifiedDate DESC LIMIT 1"); 
                        var attRecords = hotspotresult.getArray("records");
                        var attachmentId = '';
                        if (attRecords != null && attRecords.length > 0) {
                            attachmentId = attRecords[0].Id;
                        }
                        var attObList = [];
                        var attachmentOb = new sforce.SObject("Attachment");
                         
                        if( (angular.isDefined($scope.imageUpload) ) && ($scope.imageUpload.contenttype=='image/jpeg' || $scope.imageUpload.contenttype=='image/png' || $scope.imageUpload.contenttype=='image/gif' || $scope.imageUpload.contenttype=='image/jpg')){
                            attachmentOb.Name = 'Hotspot-Image';
                            attachmentOb.Body = $scope.imageUpload.resultbody;
                            attachmentOb.ContentType = $scope.imageUpload.contenttype;
                            if (attachmentId != '') {
                                attachmentOb.Id = attachmentId;
                            } else {
                                attachmentOb.ParentId = pid; 
                            }
                            attObList.push(attachmentOb);
                            $scope.ErrorFlag = false;
                        } else {
                            $scope.ErrorFlag = true;
                        }
                        var hotspotAttachmentId ='';
                        if(attObList.length > 0 ) {
                            var att_result = sforce.connection.upsert("Id", attObList);
                            if (att_result != null && att_result.length > 0) {
                                 if (att_result[0].success == 'true') {
                                     hotspotAttachmentId = att_result[0].id;
                                     console.log(':::att_result[0].Id::::',att_result[0].id);
                                     console.log('::::hotspotAttachmentId :::',hotspotAttachmentId );
                                     $scope.successAtt = true;
                                 }else {
                                     $scope.failedFlag = true;
                                 }
                            }   
                        }
                        if($scope.successAtt) {
                             var quesTemp =[];
                             var quesTempObj = new sforce.SObject("ExAM__Question_Template__c");
                             quesTempObj.Id = pid;
                             $scope.hotspotImgProp.questionImageId = hotspotAttachmentId; 
                             quesTempObj.ExAM__Hotspot_Image_Properties__c = JSON.stringify($scope.hotspotImgProp);
                             quesTemp.push(quesTempObj);
                             console.log(':::::pro:::',$scope.hotspotImgProp);
                             if(quesTemp.length > 0 ) {
                                var qt_result = sforce.connection.update(quesTemp);
                                if (qt_result != null && qt_result.length > 0) {
                                     if (qt_result[0].success == 'true') {
                                         window.location =  "{!LEFT($CurrentPage.URL,FIND('/',$CurrentPage.URL,9))}{!$CurrentPage.parameters.quesTempId}";
                                     } else {
                                         $scope.failedFlag = true;
                                     }
                                }   
                            }
                        }
                    }
                }
                $scope.uploadCancel = function() {
                    window.location =  "{!LEFT($CurrentPage.URL,FIND('/',$CurrentPage.URL,9))}{!$CurrentPage.parameters.quesTempId}";
                }
                
                
                
                var can = document.getElementById('canvas1');
                var ctx = can.getContext('2d');
                var tempArray = [];
                var img = new Image();
                var startX, startY;
                
                $scope.validatePage = function(indexVal) {
                    var isRequired = false;
                    if ($scope.hotspotImgProp.area[indexVal].shape == null || $scope.hotspotImgProp.area[indexVal].shape == '' ) {
                        $(".shape"+indexVal).next().next("div").show();
                        $(".shape"+indexVal).parent().addClass('slds-has-error');
                        isRequired = true;
                    } else {
                        $(".shape"+indexVal).next().next("div").hide();
                        $(".shape"+indexVal).parent().removeClass('slds-has-error');
                    }
                    if ($scope.hotspotImgProp.area[indexVal].areaValue == null || $scope.hotspotImgProp.area[indexVal].areaValue == '' ) {
                        $(".hotspot"+indexVal).next().next("div").show();
                        $(".hotspot"+indexVal).parent().addClass('slds-has-error');
                        isRequired = true;
                    } else {
                        $(".hotspot"+indexVal).next().next("div").hide();
                        $(".hotspot"+indexVal).parent().removeClass('slds-has-error');
                    }
                    if ($scope.hotspotImgProp.area[indexVal].coords == null || $scope.hotspotImgProp.area[indexVal].coords== '' ) {
                        $(".coords"+indexVal).next().next("div").show();
                        $(".coords"+indexVal).parent().addClass('slds-has-error');
                        isRequired = true;
                    } else {
                        $(".coords"+indexVal).next().next("div").hide();
                        $(".coords"+indexVal).next().next("div").hide();
                        console.log('::::end:::',indexVal);
                    }
                    return isRequired;
                
                }
                
                $scope.newSelection = function(indexVal) {
                    var validateResult = $scope.validatePage(indexVal); 
                    console.log(':::validateResult::::',validateResult);
                    if ( $scope.hotspotImgProp.area[indexVal].shape != null 
                            && $scope.hotspotImgProp.area[indexVal].shape != '' 
                            && $scope.hotspotImgProp.area[indexVal].shape
                            && $scope.hotspotImgProp.area[indexVal].coords != null
                            && $scope.hotspotImgProp.area[indexVal].coords != ''
                            && $scope.hotspotImgProp.area[indexVal].areaValue != null
                            && $scope.hotspotImgProp.area[indexVal].areaValue != '' ) {
                            
                        var hotspotAreaObj = {};
                        hotspotAreaObj.shape = '';
                        
                        if ($scope.hotspotImgProp.area[indexVal].shape != '') {
                            $scope.disabled[indexVal] = true;
                            if ($scope.hotspotImgProp.area[indexVal].shape == 'poly' && tempArray.length > 4) {
                                ctx.lineTo(tempArray[0], tempArray[1]);                                        
                                ctx.stroke();
                            }
                        }
                        $scope.hotspotImgProp.area.unshift(hotspotAreaObj);
                        tempArray = [];
                    } 
                        
                }
                $scope.removeShape = function(indexValue) {
                    console.log('::::index val:::',indexValue);
                    //console.log('::::$scope.hotspotImgProp:1::',$scope.hotspotImgProp);
                    //$scope.hotspotImgProp.area.splice(indexValue, 1);
                    //console.log(':::$scope.hotspotImgProp.area.lenght:::',$scope.hotspotImgProp.area.length);
                    if (angular.isDefined($scope.hotspotImgProp) && angular.isDefined($scope.hotspotImgProp.area) && $scope.hotspotImgProp.area.length > 0 ) {
                        console.log('::::$scope.hotspotImgProp:::',$scope.hotspotImgProp);
                        $scope.hotspotImgProp.area.splice(indexValue, 1);
                        if ($scope.hotspotImgProp.area.length == 0) {
                            var hotspotAreaObj = {};
                            hotspotAreaObj.shape = '';
                            $scope.hotspotImgProp.area.push(hotspotAreaObj);
                        }
                        $scope.changefile();
                    }
                }        
                        
                $scope.changefile1 = function() {
                    $timeout(function(){
                        $scope.changefile();
                    },1000);
                }        
                $scope.changefile = function() {
                    $scope.ErrorFlag = false;
                    //console.log('::::changefile::::',$scope.imageUpload, $scope.imageUpload.contenttype);
                    if( (angular.isDefined($scope.imageUpload) ) && ($scope.imageUpload.contenttype =='image/jpeg' || $scope.imageUpload.contenttype=='image/png' || $scope.imageUpload.contenttype=='image/gif' || $scope.imageUpload.contenttype=='image/jpg')) {
                        //console.log('::::inside:::if:::');
                        var filename = $('input[type=file]').val().replace(/C:\\fakepath\\/i, '')
                        var file    = document.querySelector('input[type=file]').files[0];
                        if (file) {
                            var reader = new FileReader();
                            reader.readAsDataURL(file);
                            reader.onload = function(e) {
                                //console.log(e.target.result);
                                img.src = (e.target.result);
                                ctx.clearRect(0, 0, 240, 320);
                                ctx.stroke();
                                ctx.beginPath();
                                ctx.drawImage(img, 0, 0,240,320);
                                ctx.stroke();
                                if (angular.isDefined($scope.hotspotImgProp) && angular.isDefined($scope.hotspotImgProp.area) && $scope.hotspotImgProp.area.length > 0) {
                                    for (var i = 0; i < $scope.hotspotImgProp.area.length; i++) {
                                        console.log(':::$scope.hotspotImgProp.area[i].shape:::',$scope.hotspotImgProp.area[i].shape);
                                        if ( angular.isDefined($scope.hotspotImgProp.area[i].coords) && $scope.hotspotImgProp.area[i].coords != '' ) {
                                            if ($scope.hotspotImgProp.area[i].shape == 'rect') {
                                                var tempCoordsArray = $scope.hotspotImgProp.area[i].coords.split(',');
                                                if (tempCoordsArray != null && tempCoordsArray.length == 4) {
                                                    ctx.moveTo(tempCoordsArray[0],tempCoordsArray[1] );
                                                    ctx.rect(tempCoordsArray[0],tempCoordsArray[1],tempCoordsArray[2]-tempCoordsArray[0],tempCoordsArray[3]-tempCoordsArray[1]);
                                                    
                                                }
                                                ctx.stroke();
                                            } else if ($scope.hotspotImgProp.area[i].shape == 'circle') {
                                                var tempCoordsArray = $scope.hotspotImgProp.area[i].coords.split(',');
                                                if (tempCoordsArray != null && tempCoordsArray.length == 3) {
                                                    ctx.moveTo(parseFloat(tempCoordsArray[0])+parseFloat(tempCoordsArray[2]), tempCoordsArray[1]);
                                                    ctx.arc( tempCoordsArray[0],tempCoordsArray[1], tempCoordsArray[2], 0, 2 * Math.PI);
                                                }
                                                ctx.stroke();
                                            } else if ($scope.hotspotImgProp.area[i].shape == 'poly') {
                                                var tempCoordsArray = $scope.hotspotImgProp.area[i].coords.split(', ');
                                                if (tempCoordsArray != null && tempCoordsArray.length >= 4) {
                                                    for (var j = 0; j < tempCoordsArray.length; j+=2) {
                                                        if (j == 0) {
                                                            ctx.moveTo(tempCoordsArray[0], tempCoordsArray[1]);
                                                        } else {                                        
                                                            ctx.lineTo(tempCoordsArray[j], tempCoordsArray[j+1]); 
                                                        }
                                                    }
                                                    ctx.stroke();
                                                }                                        
                                            }
                                        }
                                    }
                                    
                                } 
                                $scope.isLoadedImage = true;
                                $("#canvas1").show();
                                $scope.$apply();
                            };
                        }
                    } else {
                        $scope.ErrorFlag = true;
                        $scope.isLoadedImage = false;
                    }
                
                }
                $scope.startMouseDown = function(event) {
                    console.log('::::mouse down::::');
                    if ($scope.isLoadedImage 
                            && ($scope.hotspotImgProp.area[$scope.currentIndex].shape == 'circle' 
                                || $scope.hotspotImgProp.area[$scope.currentIndex].shape == 'rect')) {
                            
                        if (tempArray != null && tempArray.length >= 4) {
                            $scope.hotspotImgProp.area[$scope.currentIndex].coords = '';
                            $scope.changefile();
                        }
                        tempArray = [];
                        var offsetX = event.offsetX;
                        var offsetY = event.offsetY;
                        
                        tempArray.push(offsetX);
                        tempArray.push(offsetY);
                    }
                }
                $scope.EndMouseUp = function(event) {
                    if ($scope.isLoadedImage 
                            && ($scope.hotspotImgProp.area[$scope.currentIndex].shape == 'circle' 
                                || $scope.hotspotImgProp.area[$scope.currentIndex].shape == 'rect')) {
                                
                        console.log('::::mouse up::::');
                        $scope.doClick(event);
                    }
                }
                
                $scope.doClick = function(event) {
                    if ($scope.isLoadedImage) {
                        var x = event.x;
                        var y = event.y;
                        var offsetX = event.offsetX;
                        var offsetY = event.offsetY;
                        
                        tempArray.push(offsetX);
                        tempArray.push(offsetY);
                        //console.log(':::tempArray::::',tempArray.length);
                        if (tempArray.length > 0 ) {
                            var ctx = can.getContext('2d');
                            if ($scope.hotspotImgProp.area[$scope.currentIndex].shape == 'circle' || $scope.hotspotImgProp.area[$scope.currentIndex].shape == 'rect'|| $scope.hotspotImgProp.area[$scope.currentIndex].shape == 'poly') {
    
                                if(tempArray.length >= 4 && $scope.hotspotImgProp.area[$scope.currentIndex].shape == 'circle') {                                    
                                    if (tempArray.length > 4) {
                                        tempArray[3] = tempArray[tempArray.length-1];
                                        tempArray[2] = tempArray[tempArray.length-2];                                        
                                    }
                                    
                                    var radius = (Math.sqrt(Math.pow(tempArray[0]-tempArray[2], 2) + Math.pow(tempArray[1]-tempArray[3], 2)))/2;
                                    ctx.moveTo(((tempArray[0]+tempArray[2]) / 2) + radius , (tempArray[1]+tempArray[3]) /2);
                                    var coOrd = (tempArray[0]+tempArray[2]) / 2 + ',' + (tempArray[1]+tempArray[3]) /2 + ',';
                                    coOrd += ((Math.sqrt(Math.pow(tempArray[0]-tempArray[2], 2) + Math.pow(tempArray[1]-tempArray[3], 2)))/2).toFixed(2);
                                    var hotspotAreaObj = {};
                                    //hotspotAreaObj.shape = $scope.selectedPickList;
                                    $scope.hotspotImgProp.area[$scope.currentIndex].coords = coOrd;
                                    if (tempArray.length == 4) {
                                        ctx.arc( (tempArray[0]+tempArray[2]) / 2 , (tempArray[1]+tempArray[3]) /2,
                                             radius, 0, 2 * Math.PI); 
                                    } else {
                                        $scope.changefile();
                                    }
                                    ctx.stroke();
                                    $scope.$apply();
                                    
                                    
                                } else if(tempArray.length >= 4 && $scope.hotspotImgProp.area[$scope.currentIndex].shape == 'rect') {
                                    if (tempArray.length > 4) {
                                        tempArray[3] = tempArray[tempArray.length-1];
                                        tempArray[2] = tempArray[tempArray.length-2];                                        
                                    }
                                    
                                    ctx.moveTo(tempArray[0],tempArray[1] );
                                    var coOrd = tempArray[0] + ',' + tempArray[1] + ',' + tempArray[2] + ',' + tempArray[3];
                                    $scope.hotspotImgProp.area[$scope.currentIndex].coords = coOrd;
                                    if (tempArray.length == 4) {
                                        ctx.rect(tempArray[0],tempArray[1],tempArray[2]-tempArray[0],tempArray[3]-tempArray[1]);
                                    } else {
                                        $scope.changefile();
                                    }
                                    ctx.stroke();
                                    $scope.$apply();
                                } else if ($scope.hotspotImgProp.area[$scope.currentIndex].shape == 'poly') {
                                    
                                    //ctx.moveTo(tempArray[0],tempArray[1] );
                                    if (tempArray.length == 2) {
                                        ctx.moveTo(offsetX, offsetY);
                                    } else {                                        
                                        ctx.lineTo(offsetX, offsetY);                                        
                                        //ctx.moveTo(offsetX, offsetY);
                                        ctx.stroke();
                                    }
                                    ctx.stroke();
                                    var coOrd = '';
                                    for (var i = 0 ; i < tempArray.length; i++) {
                                        if (i == 0) {
                                            coOrd += tempArray[i];
                                        } else {
                                            coOrd += ', ' + tempArray[i];
                                        }
                                    }
                                    if (tempArray.length > 4 ) {
                                        coOrd += ', '+tempArray[0] + ', '+tempArray[1];                                        
                                    } 
                                    $scope.hotspotImgProp.area[$scope.currentIndex].coords = coOrd;    
                                    $scope.$apply();
                                }
                                
                                //ctx.closePath();
                                //ctx.save();
                                //ctx.stroke();
                            } 
                            
                        }
                        console.log(':::$scope.hotspotImgProp:::', $scope.hotspotImgProp);
                    }
                } // end of doClick method
                
                
                $scope.shapeChange = function(indexVal) {
                    console.log('::::tempArray::::',tempArray);
                    if (tempArray != null && tempArray.length >= 4) {
                        $scope.hotspotImgProp.area[indexVal].coords = '';
                        console.log('::::inside if::::',$scope.hotspotImgProp);
                        
                        $scope.changefile();
                    }
                    tempArray = [];
                    $scope.currentIndex = indexVal;
                }        
            });
       
        </script>
    </div>
</apex:page>